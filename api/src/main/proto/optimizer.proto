syntax = "proto3";

option optimize_for = CODE_SIZE;
option java_multiple_files = true;
option java_package = "com.empowerops.volition.dto";
option csharp_namespace = "EmpowerOps.Volition.DTO";

package empowerops.volition.api;

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

service FederatedOptimizer {
    // TBD: the key feature this optimizer will export is that it will accept multiple tools registering at once
    // this was the original goal of the API, and has prooven to be very complex.
    // the idea is that multiple simulation clients can all access the same optimization at the same time,
    // meaning an ANSA plugin and a NASTRAN plugin can both talk to the same optimizer,
    // and each participate in an optimization
    //
    // unfortunately this necessitates a lot of state-sychronization,
    // which raises the complexity level by an order of magnitude.
}

// some notes on naming scheme:
// "...QueryDTO" ->     a request for a ref-transparent ("getter") information.
//                      Results are sent via the in the "offer..." rpc methods;                     a "getX"
// "...ResponseDTO" ->  a result from a QueryDTO, sometimes passed from optimizer to simulator
//                      sometimes passed in the other direction;                                    result from "getX"
// "...CommandDTO" ->   a request to statefully change the configuration of the optimizer;          a "setX"
// "...ConfirmDTO" ->   the result of a Command, often indicates success or failure of the command; result from "setX"

service UnaryOptimizer {

    // Starts an optimization of the specified problem definition and simulation nodes,
    // and returns a stream of evaluation requests and other messages pertaining to the optimization.
    rpc StartOptimization (StartOptimizationCommandDTO) returns (stream OptimizerGeneratedQueryDTO) {}

    // responses to OASIS supplied queries,
    // these should be called by the simulator in response to OptimizerGeneratedQueryDTO messages.
    // namely: every OptimizerGeneratedQueryDTO.SimulationEvaluationRequest must be followed by either
    // an OfferSimulationResult call, or an OfferErrorResultCall.

    // offers the completed result of the simulation evaluation for the last provided SimulationEvaluationRequest
    rpc OfferSimulationResult (SimulationEvaluationCompletedResponseDTO) returns (SimulationEvaluationResultConfirmDTO) {}

    // offers an error to describe the completion of the last provided SimulationEvaluationRequest
    // internally, the optimizer is likely to avoid areas it encounters errors,
    // the optimizer will not try to evaluate the same point again.
    rpc OfferErrorResult (SimulationEvaluationErrorResponseDTO) returns (SimulationEvaluationErrorConfirmDTO) {}

    // offers a status update for the current running simulation evaluation.
    // these messages are important for user experience in that they re-assure the user that the
    // simulation is still running, and may be used to debug problems.
    rpc OfferEvaluationStatusMessage (StatusMessageCommandDTO) returns (StatusMessageConfirmDTO) {}

    rpc StopOptimization (StopOptimizationCommandDTO) returns (StopOptimizationConfirmDTO) {}
    rpc RequestRunResult (OptimizationResultsQueryDTO) returns (OptimizationResultsResponseDTO) {}
}

message StartOptimizationCommandDTO {

    ProblemDefinition problem_definition = 1;

    message ProblemDefinition {
        repeated PrototypeInputParameter inputs = 1;
        repeated PrototypeOutputParameter objectives = 2;

        repeated BabelConstraint constraints = 3;
        repeated BabelScalar intermediates = 5;
    }

    repeated SimulationNode nodes = 2;

    message SimulationNode {

        string name = 1;

        oneof mapping {
            bool auto_map = 2;
            VariableMapping mapping_table = 3;
        }

        repeated string inputs = 4;
        repeated string outputs = 5;

        google.protobuf.Duration time_out = 6;
    }

    google.protobuf.Duration run_time = 11;
    google.protobuf.UInt32Value iteration_count = 12;

    //note: ignored for multi-objective optimization
    google.protobuf.DoubleValue target_objective_value = 13;
}
message OptimizerGeneratedQueryDTO {

    oneof request {

        SimulationEvaluationRequest evaluation_request = 1;
        SimulationCancelRequest cancel_request = 3;

        OptimizationStartedNotification optimization_started_notification = 5;
        OptimizationFinishedNotification optimization_finished_notification = 6;

        OptimizationFailedToStartNotification optimization_not_started_notification = 7;
    }

    message SimulationEvaluationRequest {
        string name = 1;
        map<string, double> input_vector = 2;
    }

    // optimizer requests that a simulation cancel its current evaluation
    // note this is a very race-ee message. For your first implementation I suggest
    // Doing nothing on receiving this message is always legal,
    // so long as the SimulationEvaluationRequest contract is fulfilled.
    message SimulationCancelRequest {
        string name = 1;
    }

    message RegistrationConfirm {}
    message OptimizationStartedNotification {
        UUID run_ID = 2;
    }
    message OptimizationFinishedNotification {}
    message OptimizationFailedToStartNotification {
        repeated string issues = 1;
    }
}

// responses to OASIS supplied queries
message SimulationEvaluationCompletedResponseDTO {
    string name = 1;
    map<string, double> output_vector = 2;
}
message SimulationEvaluationResultConfirmDTO {}

message SimulationEvaluationErrorResponseDTO {
    string name = 1;
    string message = 2;
    string exception = 3;
}
message SimulationEvaluationErrorConfirmDTO {}

message StatusMessageCommandDTO {
    string name = 1;
    string message = 2;
}
message StatusMessageConfirmDTO {}

message StopOptimizationCommandDTO {
    string name = 1;
    UUID run_ID = 2;
}
message StopOptimizationConfirmDTO {
    oneof response{
        string message = 1;
        UUID run_ID = 2;
    }
}

message OptimizationResultsQueryDTO {
    string name = 1;
    UUID run_ID = 2;
}
message OptimizationResultsResponseDTO {
    UUID run_ID = 1;

    repeated string input_columns = 7;
    repeated string output_columns = 8;

    repeated DesignRow points = 9;
    repeated DesignRow frontier = 10; //Best value for single run and pareto frontier for multiple objective
}

// helpers
message PrototypeInputParameter {
    string name = 1;

    oneof domain {
        Continuous continuous = 4;
        DiscreteRange discrete_range = 5;
    }

    message Continuous {
        double lower_bound = 2;
        double upper_bound = 3;
    }
    message DiscreteRange {
        double lower_bound = 2;
        double upper_bound = 3;
        double step_size = 4;
    }
}
message PrototypeOutputParameter {
    string name = 1;
    enum type {
        SCALAR = 0;
        CONSTRAINT = 1;
    }
}
message VariableMapping {
    // key:optimization-var-name TO value:simulation-param-name
    map<string, string> inputs = 1;
    // key:simulation-output-name TO value:optimization-var-name
    map<string, string> outputs = 2;
}
message BabelConstraint {
    string output_name = 1;
    string boolean_expression = 2;
}
message BabelScalar {
    string output_name = 1;
    string scalar_expression = 2;
}
message DesignRow {
    repeated double inputs = 1; //invariant := inputs.length == [parent].inputColumns.length
    repeated double outputs = 2; //invariant := outputs.length == [parent].outputColumns.length
    bool is_feasible = 3; // invariant := outputs.sublist(constraints).any { it > 0.0 }
}
message UUID {
    string value = 1;
}

