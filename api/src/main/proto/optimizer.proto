syntax = "proto3";

option optimize_for = CODE_SIZE;
option java_multiple_files = true;
option java_package = "com.empowerops.volition.dto";
option csharp_namespace = "EmpowerOps.Volition.DTO";

package empowerops.volition.api;

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

// some notes on naming scheme:
// "...QueryDTO" ->     a request for a ref-transparent ("getter") information.
//                      Results are sent via the in the "offer..." rpc methods;                     a "getX"
// "...ResponseDTO" ->  a result from a QueryDTO, sometimes passed from optimizer to simulator
//                      sometimes passed in the other direction;                                    result from "getX"
// "...CommandDTO" ->   a request to statefully change the configuration of the optimizer;          a "setX"
// "...ConfirmDTO" ->   the result of a Command, often indicates success or failure of the command; result from "setX"

service Optimizer {

    // entry-point, returns stream of OASIS queries/commands
    rpc register (RegistrationCommandDTO) returns (stream OptimizerGeneratedQueryDTO) {}
    rpc unregister (UnregistrationCommandDTO) returns (UnregistrationConfirmDTO) {}

    // responses to OASIS supplied queries
    rpc offerSimulationResult (SimulationEvaluationCompletedResponseDTO) returns (SimulationEvaluationResultConfirmDTO) {}
    rpc offerErrorResult (SimulationEvaluationErrorResponseDTO) returns (SimulationEvaluationErrorConfirmDTO) {}
    rpc offerEvaluationStatusMessage (StatusMessageCommandDTO) returns (StatusMessageConfirmDTO) {}

    // commands/queries to OASIS

    /*
     * Starts an optimization of the specified problem definition and simulation nodes
     */
    rpc startOptimization (StartOptimizationCommandDTO) returns (StartOptimizationConfirmDTO) {}
    rpc stopOptimization (StopOptimizationCommandDTO) returns (StopOptimizationConfirmDTO) {}
    rpc requestRunResult (OptimizationResultsQueryDTO) returns (OptimizationResultsResponseDTO) {}
}

// entry-point, returns stream of OASIS queries/commands
message RegistrationCommandDTO {
    string name = 1;
}
message OptimizerGeneratedQueryDTO {
    oneof request {
        SimulationEvaluationRequest evaluation_request = 1;
        SimulationCancelRequest cancel_request = 3;

        RegistrationConfirm registration_confirmed = 4;
        OptimizationStartedNotification optimization_started_notification = 5;
        OptimizationFinishedNotification optimization_finished_notification = 6;
    }

    message SimulationEvaluationRequest {
        string name = 1;
        map<string, double> input_vector = 2;
    }

    // optimizer requests that a simulation cancel its current evaluation
    // note this is a very race-ee message. For your first implementation I suggest
    // Doing nothing on receiving this message is always legal,
    // so long as the SimulationEvaluationRequest contract is fulfilled.
    message SimulationCancelRequest {
        string name = 1;
    }

    message RegistrationConfirm {}
    message OptimizationStartedNotification {}
    message OptimizationFinishedNotification {}
}

message UnregistrationCommandDTO {
    string name = 1;
}
message UnregistrationConfirmDTO {
    string message = 1;
}

// responses to OASIS supplied queries
message SimulationEvaluationCompletedResponseDTO {
    string name = 1;
    map<string, double> outputVector = 2;
}
message SimulationEvaluationResultConfirmDTO {}

message SimulationEvaluationErrorResponseDTO {
    string name = 1;
    string message = 2;
    string exception = 3;
}
message SimulationEvaluationErrorConfirmDTO {}

message StatusMessageCommandDTO {
    string name = 1;
    string message = 2;
}
message StatusMessageConfirmDTO {}

// commands/queries to OASIS
message StartOptimizationCommandDTO {

    ProblemDefinition problem_definition = 1;

    message ProblemDefinition {
        repeated PrototypeInputParameter inputs = 1;
        repeated PrototypeOutputParameter objectives = 2;

        repeated BabelConstraint constraints = 3;
        repeated BabelScalar intermediates = 5;
    }

    repeated SimulationNode nodes = 2;

    message SimulationNode {

        string name = 1;

        oneof mapping {
            bool auto_map = 2;
            VariableMapping mapping_table = 3;
        }

        repeated string inputs = 4;
        repeated string outputs = 5;

        google.protobuf.Duration time_out = 6;
    }

    google.protobuf.Duration run_time = 11;
    google.protobuf.UInt32Value iteration_count = 12;
    google.protobuf.DoubleValue target_objective_value = 13; //note: ignored for multi-objective optimization
}
message StartOptimizationConfirmDTO {
    oneof response {
        Issues issues = 1;
        string run_ID = 2;
    }

    message Issues {
        repeated string issues = 1;
    }
}

message StopOptimizationCommandDTO {
    string name = 1;
    string run_ID = 2;
}
message StopOptimizationConfirmDTO {
    oneof response{
        string message = 1;
        string run_ID = 2;
    }
}

message OptimizationResultsQueryDTO {
    string name = 1;
    string run_ID = 2;
}
message OptimizationResultsResponseDTO {
    string run_ID = 1;

    repeated string input_columns = 7;
    repeated string output_columns = 8;

    repeated DesignRow points = 9;
    repeated DesignRow frontier = 10; //Best value for single run and pareto frontier for multiple objective
}

// helpers
message PrototypeInputParameter {
    string name = 1;

    google.protobuf.DoubleValue lowerBound = 2;
    google.protobuf.DoubleValue upperBound = 3;
}
message PrototypeOutputParameter {
    string name = 1;
    enum type {
        SCALAR = 0;
        CONSTRAINT = 1;
    }
}
message VariableMapping {
    // key:optimization-var-name TO value:simulation-param-name
    map<string, string> inputs = 1;
    // key:simulation-output-name TO value:optimization-var-name
    map<string, string> outputs = 2;
}
message BabelConstraint {
    string outputName = 1;
    string booleanExpression = 2;
}
message BabelScalar {
    string outputName = 1;
    string scalarExpression = 2;
}
message DesignRow {
    repeated double inputs = 1; //invariant := inputs.length == [parent].inputColumns.length
    repeated double outputs = 2; //invariant := outputs.length == [parent].outputColumns.length
    bool is_feasible = 3; // invariant := outputs.sublist(constraints).any { it > 0.0 }
}
message Unit {}
