buildscript {
    ext.kotlin_version = '1.3.0'
    ext.grpc_csharp_generator = '$projectdir/.kinda-nuget/packages/grpc.tools/1.15.0/tools/windows_x64/grpc_csharp_plugin.exe'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlin-eap" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7"
    id "org.jetbrains.kotlin.jvm" version "1.3.0"
}

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlin-eap" }
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

allprojects {

    group 'com.empowerops'
    version "0.2.147.${System.getenv("BUILD_NUMBER") ?: '0'}"
    
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlin-eap" }
    }
}

subprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = 1.8

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        compile 'io.grpc:grpc-netty-shaded:1.15.1'
        compile 'io.grpc:grpc-protobuf:1.15.1'
        compile 'io.grpc:grpc-stub:1.15.1'

        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.0.0"

        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    //This is purely for syntax highlighting in intelliJ,
    //this should be done by the gradle/proto plugin, but it isnt because they're dumb.
    sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'
    sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/grpc_java'
    javadoc { exclude "com/empowerops/volition/optimizer/**" }
}

project('api'){

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'

    dependencies {
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
        compile 'javax.annotation:javax.annotation-api:1.3.2'
    }

    ext {
        volitionName = "volition-api"
        volitionVersion = '0.2'
    }

    protobuf {

        protoc {
            artifact = "com.google.protobuf:protoc:3.5.1-1"
        }
        plugins {
            grpc_java {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.15.1'
            }
            grpc_csharp {
                path = file("$projectDir/../.kinda-nuget/packages/grpc.tools/1.15.0/tools/windows_x64/grpc_csharp_plugin.exe").absolutePath
                //TODO: consider dynamically pulling from nuget
                //https://github.com/Ullink/gradle-nuget-plugin
                // --also note, he has an msbuild plugin for gradle
            }
        }

        generateProtoTasks {
            all().each { task ->
                task.plugins {
                    grpc_java {}
                    grpc_csharp {}
                }
                task.builtins {
                    java { }
                    csharp {}
                }
            }
        }
    }

    jar {
        baseName = volitionName
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        baseName = volitionName
        from sourceSets.main.allSource
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        baseName = volitionName
        from javadoc.destinationDir
    }
    
    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            Production(MavenPublication){
                groupId 'com.empowerops'
                artifactId volitionName
                version volitionVersion
                
                //blargwargl: we need to express transitive deps here.
                // see this: https://docs.gradle.org/current/userguide/publishing_maven.html
                
            }
        }
    }

    bintray {
        user = 'empower-operations-team'
        key = project.properties.bintrayEmpoweropsKey
        pkg {
            repo = 'maven'
            name = volitionName
            userOrg = 'empower-operations-team'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/EmpowerOperations/volition.git'

            version {
                name = volitionVersion
                desc = 'Empower Operations Volition API'
                released  = new Date()
            }
        }
        configurations = ['archives']
        publications = ['Production']
    }

}

project('client-reference'){
    dependencies {
        compile project(":api")

        compile 'io.netty:netty-all:4.1.30.Final'
        compile 'no.tornado:tornadofx:1.7.17'
    }
}
project('oasis-reference'){
    dependencies {
        compile project(":api")
        compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.30.2'
        compile 'no.tornado:tornadofx:1.7.17'
        compile group: 'org.funktionale', name: 'funktionale-all', version: '1.2'
    }

    task copyToLib(type: Copy) {
        from configurations.runtime
        into "$buildDir/deps"
    }

    assemble.dependsOn copyToLib
    
    jar {
        manifest {
            attributes 'Main-Class': 'com.empowerops.volition.ref_oasis.RefOptimizerKt'
        }
    }

    task deliverable(type: Zip, dependsOn: assemble) {
        from "$buildDir/libs"
        from "$buildDir/deps"
        from "$projectDir"
        include "*.exe"
        include "*.jar"
        archiveName "optimizer-reference-${version}.zip"
        destinationDir(file("$buildDir/deliverable"))
    }
    
}