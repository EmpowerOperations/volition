buildscript {
    ext.kotlin_version = '1.3.0'
    ext.grpc_csharp_generator = '$projectdir/.kinda-nuget/packages/grpc.tools/1.15.0/tools/windows_x64/grpc_csharp_plugin.exe'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlin-eap" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7"
    id "org.jetbrains.kotlin.jvm" version "1.3.0"
}

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlin-eap" }
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

allprojects {
    group 'com.empowerops'
    version '0.1'
    
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlin-eap" }
    }
}

subprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = 1.8

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        compile 'io.grpc:grpc-netty-shaded:1.15.1'
        compile 'io.grpc:grpc-protobuf:1.15.1'
        compile 'io.grpc:grpc-stub:1.15.1'

        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.0.0"

        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    //This is purely for syntax highlighting in intelliJ,
    //this should be done by the gradle/proto plugin, but it isnt because they're dumb.
    sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'
    sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/grpc_java'
    javadoc { exclude "com/empowerops/volition/optimizer/**" }
}

project('api'){

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'com.google.protobuf'

    dependencies {
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0-RC1'
    }

    protobuf {

        protoc {
            artifact = "com.google.protobuf:protoc:3.5.1-1"
        }
        plugins {
            grpc_java {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.15.1'
            }
            grpc_csharp {
                path = file("$projectDir/../.kinda-nuget/packages/grpc.tools/1.15.0/tools/windows_x64/grpc_csharp_plugin.exe").absolutePath
                //TODO: consider dynamically pulling from nuget
                //https://github.com/Ullink/gradle-nuget-plugin
                // --also note, he has an msbuild plugin for gradle
            }
        }

        generateProtoTasks {
            all().each { task ->
                task.plugins {
                    grpc_java {}
                    grpc_csharp {}
                }
                task.builtins {
                    java { }
                    csharp {}
                }
            }
        }
    }

    jar {
        baseName = 'volition-api'
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
    artifacts {
        archives sourcesJar
        archives javadocJar
    }

}

project('client-reference'){
    dependencies {
        compile project(":api")

        compile 'io.netty:netty-all:4.1.30.Final'
        compile 'no.tornado:tornadofx:1.7.17'
    }
}
project('oasis-reference'){
    dependencies {
        compile project(":api")
        compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.30.2'
    }
}