import java.nio.file.OpenOption
import java.nio.file.StandardOpenOption

buildscript {
    ext {
        kotlin_version = "1.4.32"
    }

    repositories {
        mavenCentral()
//        jcenter()
//        maven { url "https://kotlin.bintray.com/kotlin-eap" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.15"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.2"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
}

def protobufVersion = "3.18.0"
def grpcVersion = "1.37.0"
def volitionSpecVersion = "1.2"
def volitionBuildNumber = System.getenv("BUILD_NUMBER") ?: "306"
def volitionFullVersion = "$volitionSpecVersion.$volitionBuildNumber"
def volitionName = "volition-api"

repositories {
    mavenCentral()
}

allprojects {

    group "com.empowerops"
    version volitionFullVersion

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs += "-include-runtime"
        }
    }

    repositories {
        mavenCentral()
        //kotlinx.collections.immutable 0.1, 0.3 is available on mvn
        //functionale-all 1.2 not available... but is is? https://mvnrepository.com/artifact/org.funktionale/funktionale-all/1.2
        jcenter()
    }
}
subprojects {

    repositories {
        mavenCentral()
    }

    javadoc { exclude "com/empowerops/volition/optimizer/**" }
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

project("api"){

    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "com.google.protobuf"
    apply plugin: "maven-publish"

    sourceSets.main.java.srcDirs += "build/generated/source/proto/main/java"
    sourceSets.main.kotlin.srcDirs += "build/generated/source/proto/main/kotlin"
    sourceSets.main.java.srcDirs += "build/generated/source/proto/main/grpc_java"
    sourceSets.main.kotlin.srcDirs += "build/generated/source/proto/main/grpc_kt"

    dependencies {
        implementation "javax.annotation:javax.annotation-api:1.3.2"
        implementation "com.google.guava:guava:27.0.1-jre"

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "io.grpc:grpc-netty-shaded:$grpcVersion"
        implementation "io.grpc:grpc-protobuf:$grpcVersion"
        implementation "io.grpc:grpc-stub:$grpcVersion"

        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.4.3"

        implementation "io.grpc:grpc-kotlin-stub:1.1.0"
        implementation "com.google.protobuf:protobuf-kotlin:$protobufVersion"
//        implementation "com.google.protobuf:protobuf-kotlin-lite:$protobuf_version"
    }

    protobuf {

        protoc {
            artifact = "com.google.protobuf:protoc:$protobufVersion"
        }
        plugins {
            grpc_java {
                artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
            }
            grpc_csharp {
                path = "../vcpkg/packages/grpc_x64-windows/tools/grpc/grpc_csharp_plugin.exe"
            }
            grpc_cpp {
                path = "../vcpkg/packages/grpc_x64-windows/tools/grpc/grpc_cpp_plugin.exe"
            }
            grpc_python {
                path = "../vcpkg/packages/grpc_x64-windows/tools/grpc/grpc_python_plugin.exe"
            }
            grpc_kt {
                artifact = "io.grpc:protoc-gen-grpc-kotlin:1.1.0:jdk7@jar"
            }
        }

        generateProtoTasks {
            all().each { task ->
                task.plugins {
                    grpc_java {}
                    grpc_csharp {}
                    grpc_cpp {}
                    grpc_python {}
                    grpc_kt {}
                }
                task.builtins {
                    java { }
                    csharp {}
                    cpp {}
                    python {}
                    kotlin {}
                }
            }
        }
    }

    jar {
        baseName = volitionName
        manifest {
            attributes "Specification-Title": "Volition API"
            attributes "Specification-Version": volitionSpecVersion
            attributes "Specification-Vendor": "Empower Operations Corp"
            attributes "Implementation-Version": volitionFullVersion
            attributes "Implementation-Vendor": "Empower Operations Corp"
        }
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        archiveBaseName = volitionName
        from(sourceSets["main"].allSource, sourceSets["main"].proto)
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = "javadoc"
        archiveBaseName = volitionName
        from javadoc.destinationDir
    }

    task vcpkgBootstrap(type: Exec) {
        commandLine "vcpkg/bootstrap-vcpkg.bat", "-disableMetrics"
    }

    task vcpkgMakeManifest(dependsOn: vcpkgBootstrap){

        // this hangs gradle
        // because gradle is really really difficult
//    from file("vcpkg.template.json")
//    rename("vcpkg.template.json", "vcpkg.json")
//    into "./"
//    filter { line -> line.replaceAll("%volitionFullVersion%", volitionFullVersion) }

        doLast {
            def lines = java.nio.file.Files.readAllLines(projectDir.toPath().resolve("vcpkg.template.json"))
            lines = lines.collect {
                it.replaceAll("%volitionFullVersion%", volitionFullVersion)
                        .replaceAll("%protobufVersion%", protobufVersion)
                        .replaceAll("%grpcVersion%", grpcVersion)
            }
            def target = projectDir.toPath().resolve("vcpkg.json")
            java.nio.file.Files.write(target, lines, StandardOpenOption.TRUNCATE_EXISTING)
        }
    }

    task vcpkgInstall(type: Exec, dependsOn: vcpkgMakeManifest) {
        commandLine "$rootDir/vcpkg/vcpkg.exe", "--feature-flags=manifests,versions", "--triplet=x64-windows", "install"
        // if you see a failure here run this from your command prompt to get better errors,
        // somehow gradle doesnt capture standard out or standard error for exec calls (!?!?)
    }

    compileJava.dependsOn vcpkgInstall

    task vcpkgCheckVersions(type: Exec, dependsOn: vcpkgInstall) {
        commandLine "$rootDir/vcpkg/vcpkg.exe", "--feature-flags=manifests,versions", "--triplet=x64-windows", "list"
        //TODO: we should parse this table and assert the pulled version of grpc and protobuf match our constants.
    }
    
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project("oasis-reference"){

    apply plugin: "kotlin"
    apply plugin: "java"

    def apiGeneratedDir = "${project(":api").buildDir}/generated/source"

    sourceSets.main.java.srcDir("$apiGeneratedDir/proto/main/grpc_java")
    sourceSets.main.java.srcDir("$apiGeneratedDir/proto/main/java")
    sourceSets.main.kotlin.srcDir("$apiGeneratedDir/proto/main/grpc_kt")
    sourceSets.main.kotlin.srcDir("$apiGeneratedDir/proto/main/kotlin")

    dependencies {
        compile project(":api")

        compile files("babel-0.18.jar")
        compile group: "org.antlr", name: "antlr4-runtime", version: "4.9.1"

        compile "io.grpc:grpc-netty-shaded:$grpcVersion"
        compile "io.grpc:grpc-protobuf:$grpcVersion"
        compile "io.grpc:grpc-stub:$grpcVersion"
        implementation "com.google.protobuf:protobuf-kotlin:$protobufVersion"

        compile group: "org.jetbrains.kotlinx", name: "kotlinx-collections-immutable", version: "0.1"
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.4.3"

        compile "no.tornado:tornadofx:1.7.17"
        compile "info.picocli:picocli:3.9.5"
//        compile group: "org.funktionale", name: "funktionale-all", version: "1.2"
        implementation "org.antlr:antlr4-runtime:4.8-1"

        testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
        testCompile "org.assertj:assertj-core:3.11.1"
    }

    jar {
        manifest {
            attributes "Main-Class": "com.empowerops.volition.ref_oasis.OptimizerCLIKt"
            attributes "Specification-Title": "Volition Reference Optimizer"
            attributes "Specification-Version": volitionFullVersion
            attributes "Specification-Vendor": "Empower Operations Corp"
            attributes "Implementation-Version": volitionBuildNumber
            attributes "Implementation-Vendor": "Empower Operations Corp"
        }
    }

    task deliverable(type: Zip, dependsOn: assemble) {
        from "$buildDir/libs"
        from configurations.runtime
        from "$projectDir"
        include "*.exe"
        include "*.jar"
        archiveName "optimizer-reference-${archiveVersion}.zip"
        destinationDir(file("$buildDir/deliverable"))
    }
    
    test {
        useJUnitPlatform()
    }
}