// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: optimizer.proto
#ifndef GRPC_optimizer_2eproto__INCLUDED
#define GRPC_optimizer_2eproto__INCLUDED

#include "optimizer.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace empowerops {
namespace volition {
namespace dto {

// An optimizer that is updated by multiple different clients,
// who synchronize on the optimization and jointly manage its life cycle.
class FederatedOptimizer final {
 public:
  static constexpr char const* service_full_name() {
    return "empowerops.volition.dto.FederatedOptimizer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
  };
  typedef Service AsyncService;
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef Service CallbackService;
  #endif

  typedef Service ExperimentalCallbackService;
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};
// TBD: the key feature this optimizer will export is that it will accept multiple tools registering at once
// this was the original goal of the API, and has prooven to be very complex.
// the idea is that multiple simulation clients can all access the same optimization at the same time,
// meaning an ANSA plugin and a NASTRAN plugin can both talk to the same optimizer,
// and each participate in an optimization
//
// unfortunately this necessitates a lot of state-sychronization,
// which raises the complexity level by an order of magnitude.

// some notes on naming scheme:
// "...QueryDTO" ->     a request for a ref-transparent ("getter") information.
//                      Results are sent via the in the "offer..." rpc methods;                     a "getX"
// "...ResponseDTO" ->  a result from a QueryDTO, sometimes passed from optimizer to simulator
//                      sometimes passed in the other direction;                                    result from "getX"
// "...CommandDTO" ->   a request to statefully change the configuration of the optimizer;          a "setX"
// "...ConfirmDTO" ->   the result of a Command, often indicates success or failure of the command; result from "setX"
//
// An optimizer that is started and stopped by a single client.
class UnaryOptimizer final {
 public:
  static constexpr char const* service_full_name() {
    return "empowerops.volition.dto.UnaryOptimizer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Starts an optimization of the specified problem definition and simulation nodes,
    // and returns a stream of evaluation requests and other messages pertaining to the optimization.
    // If the specified start request contains error, a stream is returned that contains a single message
    // with a textual list of problems that prevented the run from starting. 
    //
    // If the optimization is started successfully,
    // the messages returned by the stream will be as follows:
    // OptimizationStartedNotification
    // SimulationEvaluationRequest
    // possibly: SimulationCancelRequest -- if the simulation takes too long or the optimization is stopped. 
    // SimulationEvaluationRequest
    // ... repeated until convergence criteria is met
    // OptimizationFinishedNotification
    // [stream completed]
    // 
    // Uf the optimization cannot be started:
    // OptimizationFailedToStartNotification -- will contain a list of issues indicating why the optimization was not started.
    // [stream completed]
    std::unique_ptr< ::grpc::ClientReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>> StartOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>>(StartOptimizationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>> AsyncStartOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>>(AsyncStartOptimizationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>> PrepareAsyncStartOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>>(PrepareAsyncStartOptimizationRaw(context, request, cq));
    }
    // Responses to OASIS supplied queries,
    // these should be called by the simulator in response to OptimizerGeneratedQueryDTO messages.
    // namely: every OptimizerGeneratedQueryDTO.SimulationEvaluationRequest must be followed by either
    // an OfferSimulationResult call, or an OfferErrorResultCall.
    //
    // Offers the completed result of the simulation evaluation for the last provided SimulationEvaluationRequest
    virtual ::grpc::Status OfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>> AsyncOfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>>(AsyncOfferSimulationResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>> PrepareAsyncOfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>>(PrepareAsyncOfferSimulationResultRaw(context, request, cq));
    }
    // Offers an error to describe the completion of the last provided SimulationEvaluationRequest
    // internally, the optimizer is likely to avoid areas it encounters errors,
    // the optimizer will not try to evaluate the same point again.
    virtual ::grpc::Status OfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>> AsyncOfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>>(AsyncOfferErrorResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>> PrepareAsyncOfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>>(PrepareAsyncOfferErrorResultRaw(context, request, cq));
    }
    // Offers a status update for the current running simulation evaluation.
    // these messages are important for user experience in that they re-assure the user that the
    // simulation is still running, and may be used to debug problems.
    virtual ::grpc::Status OfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StatusMessageConfirmDTO>> AsyncOfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StatusMessageConfirmDTO>>(AsyncOfferEvaluationStatusMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StatusMessageConfirmDTO>> PrepareAsyncOfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StatusMessageConfirmDTO>>(PrepareAsyncOfferEvaluationStatusMessageRaw(context, request, cq));
    }
    // Stops a running optimization asynchronously.
    // this method will likely send a SimulationCancelRequest to any running simulation
    // it will return immediately, but the results from the simulation will not be available 
    // until an OptimizationFinishedNotification is sent through the StartOptimization stream.
    virtual ::grpc::Status StopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StopOptimizationConfirmDTO>> AsyncStopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StopOptimizationConfirmDTO>>(AsyncStopOptimizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StopOptimizationConfirmDTO>> PrepareAsyncStopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StopOptimizationConfirmDTO>>(PrepareAsyncStopOptimizationRaw(context, request, cq));
    }
    // Gets the results from a completed optimization 
    // (that is, an optimization for which a OptimizationFinishedNotification has been sent)
    virtual ::grpc::Status RequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::OptimizationResultsResponseDTO>> AsyncRequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::OptimizationResultsResponseDTO>>(AsyncRequestRunResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::OptimizationResultsResponseDTO>> PrepareAsyncRequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::OptimizationResultsResponseDTO>>(PrepareAsyncRequestRunResultRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Starts an optimization of the specified problem definition and simulation nodes,
      // and returns a stream of evaluation requests and other messages pertaining to the optimization.
      // If the specified start request contains error, a stream is returned that contains a single message
      // with a textual list of problems that prevented the run from starting. 
      //
      // If the optimization is started successfully,
      // the messages returned by the stream will be as follows:
      // OptimizationStartedNotification
      // SimulationEvaluationRequest
      // possibly: SimulationCancelRequest -- if the simulation takes too long or the optimization is stopped. 
      // SimulationEvaluationRequest
      // ... repeated until convergence criteria is met
      // OptimizationFinishedNotification
      // [stream completed]
      // 
      // Uf the optimization cannot be started:
      // OptimizationFailedToStartNotification -- will contain a list of issues indicating why the optimization was not started.
      // [stream completed]
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartOptimization(::grpc::ClientContext* context, ::empowerops::volition::dto::StartOptimizationCommandDTO* request, ::grpc::ClientReadReactor< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* reactor) = 0;
      #else
      virtual void StartOptimization(::grpc::ClientContext* context, ::empowerops::volition::dto::StartOptimizationCommandDTO* request, ::grpc::experimental::ClientReadReactor< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* reactor) = 0;
      #endif
      // Responses to OASIS supplied queries,
      // these should be called by the simulator in response to OptimizerGeneratedQueryDTO messages.
      // namely: every OptimizerGeneratedQueryDTO.SimulationEvaluationRequest must be followed by either
      // an OfferSimulationResult call, or an OfferErrorResultCall.
      //
      // Offers the completed result of the simulation evaluation for the last provided SimulationEvaluationRequest
      virtual void OfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Offers an error to describe the completion of the last provided SimulationEvaluationRequest
      // internally, the optimizer is likely to avoid areas it encounters errors,
      // the optimizer will not try to evaluate the same point again.
      virtual void OfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Offers a status update for the current running simulation evaluation.
      // these messages are important for user experience in that they re-assure the user that the
      // simulation is still running, and may be used to debug problems.
      virtual void OfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Stops a running optimization asynchronously.
      // this method will likely send a SimulationCancelRequest to any running simulation
      // it will return immediately, but the results from the simulation will not be available 
      // until an OptimizationFinishedNotification is sent through the StartOptimization stream.
      virtual void StopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets the results from a completed optimization 
      // (that is, an optimization for which a OptimizationFinishedNotification has been sent)
      virtual void RequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* StartOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* AsyncStartOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* PrepareAsyncStartOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>* AsyncOfferSimulationResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>* PrepareAsyncOfferSimulationResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>* AsyncOfferErrorResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>* PrepareAsyncOfferErrorResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StatusMessageConfirmDTO>* AsyncOfferEvaluationStatusMessageRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StatusMessageConfirmDTO>* PrepareAsyncOfferEvaluationStatusMessageRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StopOptimizationConfirmDTO>* AsyncStopOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::StopOptimizationConfirmDTO>* PrepareAsyncStopOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::OptimizationResultsResponseDTO>* AsyncRequestRunResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::empowerops::volition::dto::OptimizationResultsResponseDTO>* PrepareAsyncRequestRunResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>> StartOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>>(StartOptimizationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>> AsyncStartOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>>(AsyncStartOptimizationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>> PrepareAsyncStartOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>>(PrepareAsyncStartOptimizationRaw(context, request, cq));
    }
    ::grpc::Status OfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>> AsyncOfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>>(AsyncOfferSimulationResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>> PrepareAsyncOfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>>(PrepareAsyncOfferSimulationResultRaw(context, request, cq));
    }
    ::grpc::Status OfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>> AsyncOfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>>(AsyncOfferErrorResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>> PrepareAsyncOfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>>(PrepareAsyncOfferErrorResultRaw(context, request, cq));
    }
    ::grpc::Status OfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StatusMessageConfirmDTO>> AsyncOfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StatusMessageConfirmDTO>>(AsyncOfferEvaluationStatusMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StatusMessageConfirmDTO>> PrepareAsyncOfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StatusMessageConfirmDTO>>(PrepareAsyncOfferEvaluationStatusMessageRaw(context, request, cq));
    }
    ::grpc::Status StopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StopOptimizationConfirmDTO>> AsyncStopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StopOptimizationConfirmDTO>>(AsyncStopOptimizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StopOptimizationConfirmDTO>> PrepareAsyncStopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StopOptimizationConfirmDTO>>(PrepareAsyncStopOptimizationRaw(context, request, cq));
    }
    ::grpc::Status RequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::OptimizationResultsResponseDTO>> AsyncRequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::OptimizationResultsResponseDTO>>(AsyncRequestRunResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::OptimizationResultsResponseDTO>> PrepareAsyncRequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::OptimizationResultsResponseDTO>>(PrepareAsyncRequestRunResultRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartOptimization(::grpc::ClientContext* context, ::empowerops::volition::dto::StartOptimizationCommandDTO* request, ::grpc::ClientReadReactor< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* reactor) override;
      #else
      void StartOptimization(::grpc::ClientContext* context, ::empowerops::volition::dto::StartOptimizationCommandDTO* request, ::grpc::experimental::ClientReadReactor< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* reactor) override;
      #endif
      void OfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OfferSimulationResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OfferErrorResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OfferEvaluationStatusMessage(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopOptimization(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestRunResult(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* StartOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request) override;
    ::grpc::ClientAsyncReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* AsyncStartOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* PrepareAsyncStartOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>* AsyncOfferSimulationResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>* PrepareAsyncOfferSimulationResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>* AsyncOfferErrorResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>* PrepareAsyncOfferErrorResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StatusMessageConfirmDTO>* AsyncOfferEvaluationStatusMessageRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StatusMessageConfirmDTO>* PrepareAsyncOfferEvaluationStatusMessageRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StopOptimizationConfirmDTO>* AsyncStopOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::StopOptimizationConfirmDTO>* PrepareAsyncStopOptimizationRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::OptimizationResultsResponseDTO>* AsyncRequestRunResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::empowerops::volition::dto::OptimizationResultsResponseDTO>* PrepareAsyncRequestRunResultRaw(::grpc::ClientContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartOptimization_;
    const ::grpc::internal::RpcMethod rpcmethod_OfferSimulationResult_;
    const ::grpc::internal::RpcMethod rpcmethod_OfferErrorResult_;
    const ::grpc::internal::RpcMethod rpcmethod_OfferEvaluationStatusMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_StopOptimization_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestRunResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Starts an optimization of the specified problem definition and simulation nodes,
    // and returns a stream of evaluation requests and other messages pertaining to the optimization.
    // If the specified start request contains error, a stream is returned that contains a single message
    // with a textual list of problems that prevented the run from starting. 
    //
    // If the optimization is started successfully,
    // the messages returned by the stream will be as follows:
    // OptimizationStartedNotification
    // SimulationEvaluationRequest
    // possibly: SimulationCancelRequest -- if the simulation takes too long or the optimization is stopped. 
    // SimulationEvaluationRequest
    // ... repeated until convergence criteria is met
    // OptimizationFinishedNotification
    // [stream completed]
    // 
    // Uf the optimization cannot be started:
    // OptimizationFailedToStartNotification -- will contain a list of issues indicating why the optimization was not started.
    // [stream completed]
    virtual ::grpc::Status StartOptimization(::grpc::ServerContext* context, const ::empowerops::volition::dto::StartOptimizationCommandDTO* request, ::grpc::ServerWriter< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* writer);
    // Responses to OASIS supplied queries,
    // these should be called by the simulator in response to OptimizerGeneratedQueryDTO messages.
    // namely: every OptimizerGeneratedQueryDTO.SimulationEvaluationRequest must be followed by either
    // an OfferSimulationResult call, or an OfferErrorResultCall.
    //
    // Offers the completed result of the simulation evaluation for the last provided SimulationEvaluationRequest
    virtual ::grpc::Status OfferSimulationResult(::grpc::ServerContext* context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response);
    // Offers an error to describe the completion of the last provided SimulationEvaluationRequest
    // internally, the optimizer is likely to avoid areas it encounters errors,
    // the optimizer will not try to evaluate the same point again.
    virtual ::grpc::Status OfferErrorResult(::grpc::ServerContext* context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response);
    // Offers a status update for the current running simulation evaluation.
    // these messages are important for user experience in that they re-assure the user that the
    // simulation is still running, and may be used to debug problems.
    virtual ::grpc::Status OfferEvaluationStatusMessage(::grpc::ServerContext* context, const ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response);
    // Stops a running optimization asynchronously.
    // this method will likely send a SimulationCancelRequest to any running simulation
    // it will return immediately, but the results from the simulation will not be available 
    // until an OptimizationFinishedNotification is sent through the StartOptimization stream.
    virtual ::grpc::Status StopOptimization(::grpc::ServerContext* context, const ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response);
    // Gets the results from a completed optimization 
    // (that is, an optimization for which a OptimizationFinishedNotification has been sent)
    virtual ::grpc::Status RequestRunResult(::grpc::ServerContext* context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartOptimization() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StartOptimizationCommandDTO* /*request*/, ::grpc::ServerWriter< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartOptimization(::grpc::ServerContext* context, ::empowerops::volition::dto::StartOptimizationCommandDTO* request, ::grpc::ServerAsyncWriter< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OfferSimulationResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OfferSimulationResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OfferSimulationResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSimulationResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOfferSimulationResult(::grpc::ServerContext* context, ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::grpc::ServerAsyncResponseWriter< ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OfferErrorResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OfferErrorResult() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OfferErrorResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferErrorResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOfferErrorResult(::grpc::ServerContext* context, ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::grpc::ServerAsyncResponseWriter< ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OfferEvaluationStatusMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OfferEvaluationStatusMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OfferEvaluationStatusMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferEvaluationStatusMessage(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StatusMessageCommandDTO* /*request*/, ::empowerops::volition::dto::StatusMessageConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOfferEvaluationStatusMessage(::grpc::ServerContext* context, ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::grpc::ServerAsyncResponseWriter< ::empowerops::volition::dto::StatusMessageConfirmDTO>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopOptimization() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StopOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StopOptimizationCommandDTO* /*request*/, ::empowerops::volition::dto::StopOptimizationConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopOptimization(::grpc::ServerContext* context, ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::grpc::ServerAsyncResponseWriter< ::empowerops::volition::dto::StopOptimizationConfirmDTO>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestRunResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestRunResult() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RequestRunResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRunResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* /*request*/, ::empowerops::volition::dto::OptimizationResultsResponseDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestRunResult(::grpc::ServerContext* context, ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::grpc::ServerAsyncResponseWriter< ::empowerops::volition::dto::OptimizationResultsResponseDTO>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartOptimization<WithAsyncMethod_OfferSimulationResult<WithAsyncMethod_OfferErrorResult<WithAsyncMethod_OfferEvaluationStatusMessage<WithAsyncMethod_StopOptimization<WithAsyncMethod_RequestRunResult<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartOptimization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::empowerops::volition::dto::StartOptimizationCommandDTO, ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::empowerops::volition::dto::StartOptimizationCommandDTO* request) { return this->StartOptimization(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_StartOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StartOptimizationCommandDTO* /*request*/, ::grpc::ServerWriter< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* StartOptimization(
      ::grpc::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::StartOptimizationCommandDTO* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* StartOptimization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::StartOptimizationCommandDTO* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OfferSimulationResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OfferSimulationResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* response) { return this->OfferSimulationResult(context, request, response); }));}
    void SetMessageAllocatorFor_OfferSimulationResult(
        ::grpc::experimental::MessageAllocator< ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OfferSimulationResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSimulationResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OfferSimulationResult(
      ::grpc::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OfferSimulationResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OfferErrorResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OfferErrorResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* request, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* response) { return this->OfferErrorResult(context, request, response); }));}
    void SetMessageAllocatorFor_OfferErrorResult(
        ::grpc::experimental::MessageAllocator< ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OfferErrorResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferErrorResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OfferErrorResult(
      ::grpc::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OfferErrorResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OfferEvaluationStatusMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OfferEvaluationStatusMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::StatusMessageCommandDTO, ::empowerops::volition::dto::StatusMessageConfirmDTO>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::empowerops::volition::dto::StatusMessageCommandDTO* request, ::empowerops::volition::dto::StatusMessageConfirmDTO* response) { return this->OfferEvaluationStatusMessage(context, request, response); }));}
    void SetMessageAllocatorFor_OfferEvaluationStatusMessage(
        ::grpc::experimental::MessageAllocator< ::empowerops::volition::dto::StatusMessageCommandDTO, ::empowerops::volition::dto::StatusMessageConfirmDTO>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::StatusMessageCommandDTO, ::empowerops::volition::dto::StatusMessageConfirmDTO>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OfferEvaluationStatusMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferEvaluationStatusMessage(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StatusMessageCommandDTO* /*request*/, ::empowerops::volition::dto::StatusMessageConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OfferEvaluationStatusMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::StatusMessageCommandDTO* /*request*/, ::empowerops::volition::dto::StatusMessageConfirmDTO* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OfferEvaluationStatusMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::StatusMessageCommandDTO* /*request*/, ::empowerops::volition::dto::StatusMessageConfirmDTO* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopOptimization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::StopOptimizationCommandDTO, ::empowerops::volition::dto::StopOptimizationConfirmDTO>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::empowerops::volition::dto::StopOptimizationCommandDTO* request, ::empowerops::volition::dto::StopOptimizationConfirmDTO* response) { return this->StopOptimization(context, request, response); }));}
    void SetMessageAllocatorFor_StopOptimization(
        ::grpc::experimental::MessageAllocator< ::empowerops::volition::dto::StopOptimizationCommandDTO, ::empowerops::volition::dto::StopOptimizationConfirmDTO>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::StopOptimizationCommandDTO, ::empowerops::volition::dto::StopOptimizationConfirmDTO>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StopOptimizationCommandDTO* /*request*/, ::empowerops::volition::dto::StopOptimizationConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopOptimization(
      ::grpc::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::StopOptimizationCommandDTO* /*request*/, ::empowerops::volition::dto::StopOptimizationConfirmDTO* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopOptimization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::StopOptimizationCommandDTO* /*request*/, ::empowerops::volition::dto::StopOptimizationConfirmDTO* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestRunResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestRunResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::OptimizationResultsQueryDTO, ::empowerops::volition::dto::OptimizationResultsResponseDTO>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* request, ::empowerops::volition::dto::OptimizationResultsResponseDTO* response) { return this->RequestRunResult(context, request, response); }));}
    void SetMessageAllocatorFor_RequestRunResult(
        ::grpc::experimental::MessageAllocator< ::empowerops::volition::dto::OptimizationResultsQueryDTO, ::empowerops::volition::dto::OptimizationResultsResponseDTO>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::empowerops::volition::dto::OptimizationResultsQueryDTO, ::empowerops::volition::dto::OptimizationResultsResponseDTO>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestRunResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRunResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* /*request*/, ::empowerops::volition::dto::OptimizationResultsResponseDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestRunResult(
      ::grpc::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* /*request*/, ::empowerops::volition::dto::OptimizationResultsResponseDTO* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestRunResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* /*request*/, ::empowerops::volition::dto::OptimizationResultsResponseDTO* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartOptimization<ExperimentalWithCallbackMethod_OfferSimulationResult<ExperimentalWithCallbackMethod_OfferErrorResult<ExperimentalWithCallbackMethod_OfferEvaluationStatusMessage<ExperimentalWithCallbackMethod_StopOptimization<ExperimentalWithCallbackMethod_RequestRunResult<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartOptimization<ExperimentalWithCallbackMethod_OfferSimulationResult<ExperimentalWithCallbackMethod_OfferErrorResult<ExperimentalWithCallbackMethod_OfferEvaluationStatusMessage<ExperimentalWithCallbackMethod_StopOptimization<ExperimentalWithCallbackMethod_RequestRunResult<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartOptimization() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StartOptimizationCommandDTO* /*request*/, ::grpc::ServerWriter< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OfferSimulationResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OfferSimulationResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OfferSimulationResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSimulationResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OfferErrorResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OfferErrorResult() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OfferErrorResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferErrorResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OfferEvaluationStatusMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OfferEvaluationStatusMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OfferEvaluationStatusMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferEvaluationStatusMessage(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StatusMessageCommandDTO* /*request*/, ::empowerops::volition::dto::StatusMessageConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopOptimization() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StopOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StopOptimizationCommandDTO* /*request*/, ::empowerops::volition::dto::StopOptimizationConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestRunResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestRunResult() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RequestRunResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRunResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* /*request*/, ::empowerops::volition::dto::OptimizationResultsResponseDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartOptimization() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StartOptimizationCommandDTO* /*request*/, ::grpc::ServerWriter< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartOptimization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OfferSimulationResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OfferSimulationResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OfferSimulationResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSimulationResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOfferSimulationResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OfferErrorResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OfferErrorResult() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OfferErrorResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferErrorResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOfferErrorResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OfferEvaluationStatusMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OfferEvaluationStatusMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OfferEvaluationStatusMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferEvaluationStatusMessage(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StatusMessageCommandDTO* /*request*/, ::empowerops::volition::dto::StatusMessageConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOfferEvaluationStatusMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopOptimization() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StopOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StopOptimizationCommandDTO* /*request*/, ::empowerops::volition::dto::StopOptimizationConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopOptimization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestRunResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestRunResult() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RequestRunResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRunResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* /*request*/, ::empowerops::volition::dto::OptimizationResultsResponseDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestRunResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartOptimization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->StartOptimization(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StartOptimizationCommandDTO* /*request*/, ::grpc::ServerWriter< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StartOptimization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* StartOptimization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OfferSimulationResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OfferSimulationResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OfferSimulationResult(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OfferSimulationResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSimulationResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OfferSimulationResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OfferSimulationResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OfferErrorResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OfferErrorResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OfferErrorResult(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OfferErrorResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferErrorResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OfferErrorResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OfferErrorResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OfferEvaluationStatusMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OfferEvaluationStatusMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OfferEvaluationStatusMessage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OfferEvaluationStatusMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferEvaluationStatusMessage(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StatusMessageCommandDTO* /*request*/, ::empowerops::volition::dto::StatusMessageConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OfferEvaluationStatusMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OfferEvaluationStatusMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopOptimization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopOptimization(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StopOptimizationCommandDTO* /*request*/, ::empowerops::volition::dto::StopOptimizationConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopOptimization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopOptimization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestRunResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestRunResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestRunResult(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestRunResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRunResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* /*request*/, ::empowerops::volition::dto::OptimizationResultsResponseDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestRunResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestRunResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OfferSimulationResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OfferSimulationResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>* streamer) {
                       return this->StreamedOfferSimulationResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OfferSimulationResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OfferSimulationResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOfferSimulationResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO,::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OfferErrorResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OfferErrorResult() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>* streamer) {
                       return this->StreamedOfferErrorResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OfferErrorResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OfferErrorResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* /*request*/, ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOfferErrorResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO,::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OfferEvaluationStatusMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OfferEvaluationStatusMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::empowerops::volition::dto::StatusMessageCommandDTO, ::empowerops::volition::dto::StatusMessageConfirmDTO>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::empowerops::volition::dto::StatusMessageCommandDTO, ::empowerops::volition::dto::StatusMessageConfirmDTO>* streamer) {
                       return this->StreamedOfferEvaluationStatusMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OfferEvaluationStatusMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OfferEvaluationStatusMessage(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StatusMessageCommandDTO* /*request*/, ::empowerops::volition::dto::StatusMessageConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOfferEvaluationStatusMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::empowerops::volition::dto::StatusMessageCommandDTO,::empowerops::volition::dto::StatusMessageConfirmDTO>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopOptimization() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::empowerops::volition::dto::StopOptimizationCommandDTO, ::empowerops::volition::dto::StopOptimizationConfirmDTO>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::empowerops::volition::dto::StopOptimizationCommandDTO, ::empowerops::volition::dto::StopOptimizationConfirmDTO>* streamer) {
                       return this->StreamedStopOptimization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StopOptimizationCommandDTO* /*request*/, ::empowerops::volition::dto::StopOptimizationConfirmDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopOptimization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::empowerops::volition::dto::StopOptimizationCommandDTO,::empowerops::volition::dto::StopOptimizationConfirmDTO>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestRunResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestRunResult() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::empowerops::volition::dto::OptimizationResultsQueryDTO, ::empowerops::volition::dto::OptimizationResultsResponseDTO>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::empowerops::volition::dto::OptimizationResultsQueryDTO, ::empowerops::volition::dto::OptimizationResultsResponseDTO>* streamer) {
                       return this->StreamedRequestRunResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestRunResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestRunResult(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::OptimizationResultsQueryDTO* /*request*/, ::empowerops::volition::dto::OptimizationResultsResponseDTO* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestRunResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::empowerops::volition::dto::OptimizationResultsQueryDTO,::empowerops::volition::dto::OptimizationResultsResponseDTO>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OfferSimulationResult<WithStreamedUnaryMethod_OfferErrorResult<WithStreamedUnaryMethod_OfferEvaluationStatusMessage<WithStreamedUnaryMethod_StopOptimization<WithStreamedUnaryMethod_RequestRunResult<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StartOptimization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StartOptimization() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::empowerops::volition::dto::StartOptimizationCommandDTO, ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::empowerops::volition::dto::StartOptimizationCommandDTO, ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* streamer) {
                       return this->StreamedStartOptimization(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StartOptimization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartOptimization(::grpc::ServerContext* /*context*/, const ::empowerops::volition::dto::StartOptimizationCommandDTO* /*request*/, ::grpc::ServerWriter< ::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStartOptimization(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::empowerops::volition::dto::StartOptimizationCommandDTO,::empowerops::volition::dto::OptimizerGeneratedQueryDTO>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StartOptimization<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_StartOptimization<WithStreamedUnaryMethod_OfferSimulationResult<WithStreamedUnaryMethod_OfferErrorResult<WithStreamedUnaryMethod_OfferEvaluationStatusMessage<WithStreamedUnaryMethod_StopOptimization<WithStreamedUnaryMethod_RequestRunResult<Service > > > > > > StreamedService;
};

}  // namespace dto
}  // namespace volition
}  // namespace empowerops


#endif  // GRPC_optimizer_2eproto__INCLUDED
