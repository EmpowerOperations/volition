syntax = "proto3";

option optimize_for = SPEED;

option java_multiple_files = true;

option java_package = "com.empowerops.volition.dto";
option csharp_namespace = "EmpowerOps.Volition.Dto";
package empowerops.volition.dto;

import "google/protobuf/duration.proto";
//import "google/protobuf/wrappers.proto";
import "google/protobuf/descriptor.proto";

extend google.protobuf.MessageOptions {
    optional string potential_message_size = 50001;
}


// An optimizer that is updated by multiple different clients,
// who synchronize on the optimization and jointly manage its life cycle.
service FederatedOptimizer {
    // TBD: the key feature this optimizer will export is that it will accept multiple tools registering at once
    // this was the original goal of the API, and has prooven to be very complex.
    // the idea is that multiple simulation clients can all access the same optimization at the same time,
    // meaning an ANSA plugin and a NASTRAN plugin can both talk to the same optimizer,
    // and each participate in an optimization
    //
    // unfortunately this necessitates a lot of state-sychronization,
    // which raises the complexity level by an order of magnitude.
}

// some notes on naming scheme:
// "...QueryDTO" ->     a request for a ref-transparent ("getter") information.
//                      Results are sent via the in the "offer..." rpc methods;                     a "getX"
// "...ResponseDTO" ->  a result from a QueryDTO, sometimes passed from optimizer to simulator
//                      sometimes passed in the other direction;                                    result from "getX"
// "...CommandDTO" ->   a request to statefully change the configuration of the optimizer;          a "setX"
// "...ConfirmDTO" ->   the result of a Command, often indicates success or failure of the command; result from "setX"

// An optimizer that is started and stopped by a single client.
service UnaryOptimizer {

    // Starts an optimization of the specified problem definition and simulation nodes,
    // and returns a stream of evaluation requests and other messages pertaining to the optimization.
    // If the specified start request contains error, a stream is returned that contains a single message
    // with a textual list of problems that prevented the run from starting. 
    //
    // If the optimization is started successfully,
    // the messages returned by the stream will be as follows:
    // OptimizationStartedNotification
    // SimulationEvaluationRequest
    // possibly: SimulationCancelRequest -- if the simulation takes too long or the optimization is stopped. 
    // SimulationEvaluationRequest
    // ... repeated until convergence criteria is met
    // OptimizationFinishedNotification
    // [stream completed]
    // 
    // Uf the optimization cannot be started:
    // OptimizationFailedToStartNotification -- will contain a list of issues indicating why the optimization was not started.
    // [stream completed]
    rpc StartOptimization (StartOptimizationCommandDTO) returns (stream OptimizerGeneratedQueryDTO) {}

    // Responses to OASIS supplied queries,
    // these should be called by the simulator in response to OptimizerGeneratedQueryDTO messages.
    // namely: every OptimizerGeneratedQueryDTO.SimulationEvaluationRequest must be followed by either
    // an OfferSimulationResult call, or an OfferErrorResultCall.
    //
    // Offers the completed result of the simulation evaluation for the last provided SimulationEvaluationRequest
    rpc OfferSimulationResult (SimulationEvaluationCompletedResponseDTO) returns (SimulationEvaluationResultConfirmDTO) {}

    // Offers an error to describe the completion of the last provided SimulationEvaluationRequest
    // internally, the optimizer is likely to avoid areas it encounters errors,
    // the optimizer will not try to evaluate the same point again.
    rpc OfferErrorResult (SimulationEvaluationErrorResponseDTO) returns (SimulationEvaluationErrorConfirmDTO) {}

    // Offers a status update for the current running simulation evaluation.
    // these messages are important for user experience in that they re-assure the user that the
    // simulation is still running, and may be used to debug problems.
    rpc OfferEvaluationStatusMessage (StatusMessageCommandDTO) returns (StatusMessageConfirmDTO) {}
    
    // Stops a running optimization asynchronously.
    // this method will likely send a SimulationCancelRequest to any running simulation
    // it will return immediately, but the results from the simulation will not be available 
    // until an OptimizationFinishedNotification is sent through the StartOptimization stream.
    rpc StopOptimization (StopOptimizationCommandDTO) returns (StopOptimizationConfirmDTO) {}
    
    // Gets the results from a completed optimization 
    // (that is, an optimization for which a OptimizationFinishedNotification has been sent)
    rpc RequestRunResult (OptimizationResultsQueryDTO) returns (OptimizationResultsResponseDTO) {}
}

// A request to start an optimization and the associated information necessary 
// to start an optimization. 
message StartOptimizationCommandDTO {

    // The optimization configuration, including the variables the optimizer
    // will generate values for as well as the objective(s) that must be optimized for.
    // Optionally, any intermediate transforms and constraints that must be solved are included here. 
    ProblemDefinitionDTO problem_definition = 1;

    // the settings that will cause the optimization to normally terminate
    // leaving it default will cause the optimization to run until a stop message is sent
    OptimizationSettingsDTO settings = 3;

    // data from which an optimization should be resumed
    //
    // the order of the data in each row must match the problem definition:
    // - each row's inputs must match the problem definitions inputs
    // - each row's outputs must match the problem definitions evaluables
    //
    // for example:
    //   if we had the problem definition
    //     inputs: length
    //     inputs: width
    //     inputs: height
    //     evaluable: transform: output_name: "cost"
    //     evaluable: simulation: outputs: "stress_max", "max_usable_capacity"
    //     evaluable: constraint: output_name: "is_usable"
    //   then a seed row with
    //     inputs: 1.0
    //     inputs: 2.0
    //     inputs: 3.0
    //     outputs: 4.0
    //     outputs: 5.0
    //     outputs: 6.0
    //     outputs: 7.0
    //   would be interpreted as a design with:
    //     length=1.0, width=2.0, height=3.0, cost=4.0, stress_max=5.0, max_usable_capacity=6.0, is_usable=7.0
    repeated SeedRowDTO seed_points = 4;
}

// The definition of the work to be done each iteration as part of the optimization.
//
// this work can be expressed as a series of steps that, when executed in the correct order,
// will transform the inputs generated by the optimizer into the necessary objective values and
// constraint values to be used by the optimizer in determining the next design point to evaluate.
//
// for example, given we have three inputs, 'length', 'width', 'height',
// a constraint function called 'cost' that proportional to these three inputs
// and a simulation that produces two outputs 'stress_max' and 'max_usable_capacity'
// on the three inputs 'length', 'width', and 'height',
// and another constraint function called 'is_usable' that is a threshold on the input 'max_usable_capacity'
//
// that could be expressed as the optimization model:
// {} => length
// {} => width
// {} => height
// { length, width, height } => { cost }
// { length, width, height } => { stress_max, max_usable_capacity }
// { max_usable_capacity } => { is_usable }
//
// in this example:
// - "length", "width", and "height" are inputs
// - "cost" is a "cheap" constraint, which must be satisfied on all points
// - "stress_max" is a "terminal" objective, it will be the target for a single-objective optimization
//   this is because 'cost' is a scalar output (not a constraint output) that is not used by any other evaluations.
// - "max_usable_capacity" is an 'intermediate' output because it is used by the final constraint,
// - "is_usable" is an "expensive" constraint because it operates on the output from a simulation, "max_usable_capacity"
message ProblemDefinitionDTO {

    // the input values to be generated by the optimizer
    repeated InputParameterDTO inputs = 1;

    // the set of evaluable things that define the total work to be done in an iteration.
    // each evaluation transforms inputs (generated by the optimizer)
    // or other "intermediate" outputs
    // (outputs from other evaluations)
    // into _more-terminal_ outputs
    // (to be used by other evaluations or to be used as a "terminal" objective)
    repeated EvaluableNodeDTO evaluables = 2;
}

// an evaluation that will move the total evaluation status of an iteration forward.
message EvaluableNodeDTO {

    oneof value {

        // any necessary transforms to be evaluated
        // during an iteration. These transforms typically act as post-processing
        // of simulation outputs or convienience methods
        // to transform inputs into more useful quantities.
        BabelScalarNodeDTO transform = 2;

        // the simulation evaluations that participate in an iteration
        //
        // a simulation with three inputs length, width, height,
        // that produces a single output max_stress yields the node
        // { length, width, height } => { max_stress }
        SimulationNodeDTO simulation = 3;

        // the set of constraints that the optimizer must attempt to satisfy for each design
        // note that constraints are 'cheap' if they operate only on inputs
        // (or use inputs from intermediate transforms that themselves only use inputs)
        // a constraint is 'expensive' if it has inputs that are produced from the outputs of simulations.
        BabelConstraintNodeDTO constraint = 4;
    }
}

// Defines a simulation that must be evaluated to complete an iteration
message SimulationNodeDTO {

    string name = 1;

    // The strategy used to map optimization generated input variables to the simulation
    oneof mapping {
        bool auto_map = 2;
        VariableMappingDTO mapping_table = 3;
    }

    repeated SimulationInputParameterDTO inputs = 4;
    repeated SimulationOutputParameterDTO outputs = 5;
    google.protobuf.Duration time_out = 6;

    oneof strategy {
        SuspendAndCallbackConfigurationDTO suspend_and_callback = 7;
        ExternalSimulationExecConfigurationDTO external_simulation_exec = 8;
    }
}

message SimulationInputParameterDTO {
    string name = 1;
}
message SimulationOutputParameterDTO {
    string name = 1;
    bool is_boolean = 2;
}

// a simulation that requires the optimizer stop and ask this connected client
// to evaluate some portion of the design for an iteration.
//
// most volition-client simulation plugins are themselves this type of simulation
message SuspendAndCallbackConfigurationDTO { }

// a simulation that requires the optimizer to evaluate a command line tool
// to progress in the iteration
message ExternalSimulationExecConfigurationDTO {

    PathDTO working_directory = 1;

    PathDTO input_file = 2;
    PathDTO output_file = 3;

    PathDTO backup_directory = 4;

    BackupTimimg backup_timing = 5;
    enum BackupTimimg {
        Never = 0;
        AtStart = 1;
        AtEachEvaluation = 2;
    }

    PathDTO executable = 6;

    repeated ExecOptionDTO options = 7;

    ExecStrategy exec_strategy = 8;
    enum ExecStrategy {
        InvokeAtEachEvaluation = 0;
        OnceAndWatchFiles = 1;
    }

    repeated OutputParameterLocationStepSequenceDTO output_step_sequences = 9;

    repeated InputParameterDetectionStepSetDTO input_step_sets = 10;

    repeated uint32 exit_codes = 11;
}

message ExecOptionDTO {
    string option_name = 1;
    string argument = 2;
}

message OutputParameterLocationStepSequenceDTO {
    repeated OutputParameterLocationStepDTO steps = 1;
}

message InputParameterDetectionStepSetDTO {
    repeated InputParameterLocationStepDTO steps = 1;
}

message OutputParameterLocationStepDTO {
    string name = 1;
    oneof location {
        AnchorLocationDTO anchor_location = 2;
        uint32 row_offset = 3;
        uint32 column_offset = 4;
    }
}

message InputParameterLocationStepDTO {
    string name = 1;
    oneof location {
        RowColumnLengthLocationDTO row_column_and_length_location = 2;
    }
}

message RowColumnLengthLocationDTO {
    //1-based; first row == 1
    uint32 row_number = 1;
    //1-based; first column == 1
    uint32 column_number = 2;
    uint32 length = 3;
}

message AnchorLocationDTO {
    string raw_anchor_text = 1;
    //1-based index, IE the first occurance == 1, fifth occurance = 5.
    uint32 occurance = 2;
}

message OptimizationSettingsDTO {

    // the amount of time to let the optimization run for
    // after this amount of time has elapsed, no further evaluation requests will be submitted
    optional google.protobuf.Duration run_time = 11;

    // the count of iterations to let the optimization run for
    optional uint32 iteration_count = 12;

    // an objective value for the optimizer to stop once reached
    // note: ignored for multi-objective optimization
    optional double target_objective_value = 13;

    optional uint32 concurrent_run_count = 14;
}

// a request from the optimizer service to the simulator client, sent via 
// the stream created from the StartOptimization call.
// only one request is made per message sent.
message OptimizerGeneratedQueryDTO {

    // an instance of a request or notification made by the optimizer or provided by the optimizer
    // appropriate to the current stage in the optimization life-cycle.
    //
    // If the optimization is started successfully,
    // the messages returned by the stream will be as follows:
    //
    // purpose=OptimizationStartedNotification
    // purpose=SimulationEvaluationRequest
    // possibly: purpose=SimulationCancelRequest -- if the simulation takes too long or the optimization is stopped.
    // purpose=SimulationEvaluationRequest
    // ... repeated until convergence criteria is met, or a StopOptimization call is made.
    // purpose=OptimizationFinishedNotification
    // [stream completed]
    //
    // If the optimization cannot be started:
    // purpose=OptimizationFailedToStartNotification -- will contain a list of issues indicating why the optimization was not started.
    // [stream completed]
    oneof purpose {

        SimulationEvaluationRequestDTO evaluation_request = 1;
        SimulationCancelRequestDTO cancel_request = 3;

        OptimizationStartedNotificationDTO optimization_started_notification = 5;
        OptimizationFinishedNotificationDTO optimization_finished_notification = 6;

        OptimizationNotStartedNotificationDTO optimization_not_started_notification = 7;

        // worth doing?
//        DesignIterationStartedNotificationDTO design_iteration_started_notification = 9;

        DesignIterationCompletedNotificationDTO design_iteration_completed_notification = 8;
    }
}

// optimizer requests that the simulation client start an evaluation
// with the provided values.
message SimulationEvaluationRequestDTO {
    string name = 1;
    map<string, double> input_vector = 2;
    uint32 iteration_index = 3;
}

// optimizer service requests that a simulation client cancel its current evaluation
// this message will only be sent after a SimulationEvaluationRequest message
// but before the optimizer service receives a completion message
// (either SimulationEvaluationCompletedResponseDTO or SimulationEvaluationErrorResponseDTO)
//
// note this is a very race-ee message. For your first implementation I suggest
// Doing nothing on receiving this message is always legal,
// so long as the SimulationEvaluationRequest contract is fulfilled.
message SimulationCancelRequestDTO {
    string name = 1;
    uint32 iteration_index = 2;
}

// optimizer service notifies that it did not find any issues with the specified
// start optimization request and that an optimization run has started.
// included is the run ID for that optimization run which can be used after completion to obtain the results.
message OptimizationStartedNotificationDTO {
    UUIDDTO run_ID = 1;
}

// optimizer service notifies that it has finished an optimization run
// because a convergence criteria was met
// or because an abort_optimization flag was set on an evaluation response
// or because the StopOptimization
message OptimizationFinishedNotificationDTO {
    UUIDDTO run_ID = 1;
}

// Response to start optimization indicating that the optimization
// was not started for the reasons included here
message OptimizationNotStartedNotificationDTO {
    repeated string issues = 1;
}

// Produced by the optimizer at the start of an iteration
message DesignIterationStartedNotificationDTO {
    uint32 iteration_index = 1;
    map<string, double> input_vector = 2;
}

// Produced by the optimizer at the completion of an iteration
// to describe all the data that was generated in iteration
message DesignIterationCompletedNotificationDTO {

    DesignRowDTO design_point = 1 [deprecated = true];
    DesignPointDTO design_point2 = 3;
    uint32 iteration_index = 2;
}

// Messaged produced by the client simulator in response
// to the optimizer service requestin an evaluation, 
// indicating the successful completion of a client evaluation. 
message SimulationEvaluationCompletedResponseDTO {

    // the name of the simulator client as set in the 
    string name = 1;

    // the point that was offered
    uint32 iteration_index = 4;

    // the results of the client evaluation
    map<string, double> output_vector = 2 [deprecated = true];
    
    // indicates that the optimizer should not issue another evaluation request after this one
    bool abort_optimization = 3;

    oneof output {
        OutputVectorDTO vector = 5;
        SimulationEvaluationErrorResponseDTO failure = 6;
    }
}
message SimulationEvaluationResultConfirmDTO {}

message OutputVectorDTO {
    map<string, double> entries = 1;
}

// A message to indicate that an evaluation result has failed.
message SimulationEvaluationErrorResponseDTO {

    // the name of the simulation tool running.
    string name = 1;

    // an informative message about the failure to evaluate the design.
    string message = 2;

    // a stack trace associated with the error, if one exists and is available
    string exception = 3;

    // indicates that the optimizer should not issue another evaluation request.
    //
    // It is suggested that this value be used sparingly,
    // as the optimizer is built to handle failures gracefully,
    // and will attempt to find non-error designs in the input space if any exist.
    //
    // some issues, such as a license failure, cannot be handled by the optimizer.
    bool abort_optimization = 4;

    uint32 iteration_index = 5;
}

message SimulationEvaluationErrorConfirmDTO {}

// A status update message emitted by the simulator client to the optimizer
// to notify of progress.
// These messages can be important for user experience:
// 1. they can be used to debug optimization problems
//    - eg, messages about mesh quality can be used to find model problems in optimization
// 2. they offer the user a reason to remain patient
//    (programs that offer no status updates while running for minutes/hours will often frustrate users)
message StatusMessageCommandDTO {
    string name = 1;
    string message = 2;
    uint32 iteration_index = 3;
}
message StatusMessageConfirmDTO {}

message StopOptimizationCommandDTO {
    string name = 1;
    UUIDDTO run_ID = 2;
}
message StopOptimizationConfirmDTO {
    UUIDDTO run_ID = 2;
}

message OptimizationResultsQueryDTO {
//    string name = 1;
    UUIDDTO run_ID = 2;
}
// the results of an optimization run
message OptimizationResultsResponseDTO {

    // the points field contains all rows and all columns.
    // a 300 var 10k pt optimization contains over 6MB of data.
    // thus a reasonable absolute upper bound on this messages size is 10MB.
    // **note: this is larger than the default buffer size of 4MB for channels for all languages**
    // USERS MUST MANUALLY UPDATE THEIR CHANNEL SIZE TO SET MAX_RECEIVE TO 10MB!
    option (potential_message_size) = "10 MB";

    UUIDDTO run_ID = 1;

    // the names of the input columns as specified in the problem definition,
    // matching the order of the inputs specified in the points and frontier rows.
    repeated string input_columns = 7;
    
    // the names of the output columns as specified in the problem definition, 
    // matching the order of the outputs specified in the points and frontier rows. 
    repeated string output_columns = 8;

    // the optimization matrix, including all input variables, all output variables, and meta-data.
    repeated DesignRowDTO points = 9;
}

// A definition of a variable to be generated for by the optimizer.
message InputParameterDTO {
    
    // the variable name used in optimization
    // this name must not contain spaces or special characters
    // examples of legal names: x1, x_1, some_var. 
    // They may also contain unicode characters, eg 测试
    // illegal names: x*1, names with spaces. 
    string name = 1;

    // the instance of the appropriate type of input variable.
    // Indicates what values would be legal for the input variable.
    oneof domain {
        ContinuousDTO continuous = 4;
        DiscreteRangeDTO discrete_range = 5;
        ValueSetDTO values_set = 6;
    }
}

// A real (floating-point) value that can exist in the continuous range [lower_bound .. upper_bound]
message ContinuousDTO {
    double lower_bound = 2;
    double upper_bound = 3;
}
// a discerete value in [lower_bound .. upper_bound] stepping from the lowerbound by step_size.
//
// That is, a value that can also be expressed as "lower_bound + (K * step_size)"
// where K is an integer, so long as the result is less than upper_bound.
message DiscreteRangeDTO {
    double lower_bound = 2;
    double upper_bound = 3;
    double step_size = 4;
}

// an enumerated set of discrete values
// (that typically dont conform to being expressed as lower-upper-stepped set of bounds)
message ValueSetDTO {
    repeated double values = 1;
}

// A definition of an output that participates in an optimization.
//message PrototypeOutputParameterDTO {
//    string name = 1;
//}

// the explicit mapping of optimization input variables to simulation input parameters
// and simulation output parameters to optimization output variables (objectives and intermediates)
//
// The purpose of the variable mapping is to insulate the optimziers strict naming conventions 
// from simulation clients such that clients may have any naming scheme they wish.
// If a simulation client uses the same strict convention as the optimizer, 
// auto-variable-mapping via the AutoMap property may be used to indicate "match by approximate name",
// where the optimizer service will simply assume simulation parameters match optimization variables.
//
// some examples:
// inputs:
//   "x1": "x1"
//   "input two": "X2"
//   "SIM_PARAM*54": "x_3"
// outputs:
//   "f1": "f1"
//   "AN_OUT 2": "F2"
//   "SIM_OUT*THREE": "f_3"
message VariableMappingDTO {
    
    // A strategy to map from optimization variable names to simulation input names.
    // This table is used to map from optimization variables, which must adhere to a strict naming scheme, 
    // to simulation input parameter names, which can be anything.
    //
    //  TO key:simulation-param-name TO value:optimization-var-name
    map<string, VariableNameDTO> inputs = 1;
    
    // A strategy to map from simulation outputs to optimization outputs
    // This table is used to map from simulation output parameter names, which can be anything, 
    // to optimization output variables, which must adhere to a strict naming scheme. 
    // 
    // key:simulation-output-name TO value:optimization-var-name
    map<string, VariableNameDTO> outputs = 2;
}

// a babel math constraint, a type of cheap constraint,
// to be satisfied by the optimizer for all generated designs
//
// note that if this expression references a variable output by a simulation
// it becomes an expensive constraint
// (eg: given inputs x1 and x2, and a simulation producing the output cfd_drag_1,
// the constraint
// x1 + x2*3 > 0
// is a cheap constraint, whereas the the constraint
// cfd_drag_1 < 0
// is an expensive constraint)
// see https://empowerops.com/manual#babel_math_expressions for more details
message BabelConstraintNodeDTO {

    // the name of the constraint
    // to be created when this expression is evaluated
    string output_name = 1;

    // the expression to produce a scalar non-boolean value
    // for the new intermediate/objective indicated by output_name
    // eg x1 < 3*x2
    // see https://empowerops.com/manual#babel_math_expressions for more details
    string boolean_expression = 2;
}

// a babel math expression to produce an output (often an objective)
// to be evaluated during a design evaluation in optimization
//
// see https://empowerops.com/manual#babel_math_expressions for more details
message BabelScalarNodeDTO {

    // the name of the output (intermediate variable name or objective name)
    // to be created when this expression is evaluated
    string output_name = 1;

    // the expression to produce a scalar non-boolean value
    // for the new intermediate/objective indicated by output_name
    // eg x1 + x2^2 - cos(x3)
    // see https://empowerops.com/manual#babel_math_expressions for more details
    string scalar_expression = 2;
}
message SeedRowDTO {

    // The input values for this design.
    // values are ordered in the same way as input_columns
    //
    // the order of the values specified must match the parent problem-definitions
    // input columns
    repeated double inputs = 1;

    // The output values for this design.
    // values are ordered in the same way as output_columns
    //
    // the order of the values specified must match the parent problem-definitions
    // evaluable outputs
    repeated double outputs = 2;
}
message DesignRowDTO {

    // The input values for this design.
    // values are ordered in the same way as input_columns
    //
    //invariant := inputs.length == [parent].inputColumns.length
    repeated double inputs = 1;

    // The output values for this design.
    // values are ordered in the same way as output_columns
    //
    //invariant := outputs.length == [parent].outputColumns.length
    repeated double outputs = 2;

    // the feasibility of the point.
    // true if this design has one or more failed constraints
    // (positive non-zero constraint values)
    // false if all constraints were satisfied, or there are no constraints.
    //
    // invariant := outputs.sublist(constraints).all { it <= 0.0 }
    bool is_feasible = 3;

    // the optimiality of the point
    // true if the optimization was single-objective and this point is the optimum value
    // also true if the optimization was multi-otjective and this point exists on the pareto frontier
    bool is_frontier = 4;
}
message DesignPointDTO {

    // The input values for this design.
    // values are ordered in the same way as input_columns
    map<string, double> input_vector = 1;

    // The output values for this design.
    // values are ordered in the same way as output_columns
    //
    //invariant := outputs.length == [parent].outputColumns.length
    map<string, double> output_vector = 2;

    // the feasibility of the point.
    // true if this design has one or more failed constraints
    // (positive non-zero constraint values)
    // false if all constraints were satisfied, or there are no constraints.
    //
    // invariant := outputs.sublist(constraints).all { it <= 0.0 }
    bool is_feasible = 3;

    // the optimiality of the point
    // true if the optimization was single-objective and this point is the optimum value
    // also true if the optimization was multi-otjective and this point exists on the pareto frontier
    bool is_frontier = 4;
}

message UUIDDTO {
    string value = 1;
}

// A value corresponding to a file system path
// examples:
// - /linux/absolute/path
// - short-form/relative/with spaces
// - filename.txt
// - ./completely relative/path
// - C:\windows\absolute\path
message PathDTO {
    string value = 1;
}

message ErrorResponseDTO {
    oneof value {
        InternalErrorDTO internal_error = 1;
        NoSuchOptimizationRunDTO no_such_optimization_run = 2;
    }
}
message InternalErrorDTO {
    string message = 1;
    string trace = 2;
}
message NoSuchOptimizationRunDTO {
    UUIDDTO run_ID = 1;
}

// a legal variable name within the optimizer
// example legal names:
// - asdf
// - x1
// - x_1
// - 多变的
// illegal names:
// - x-1
// - x 1
// - 5x

message VariableNameDTO {
    string value = 1;
}