// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: optimizer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_optimizer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_optimizer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_optimizer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_optimizer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[51]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_optimizer_2eproto;
namespace empowerops {
namespace volition {
namespace dto {
class AnchorLocationDTO;
struct AnchorLocationDTODefaultTypeInternal;
extern AnchorLocationDTODefaultTypeInternal _AnchorLocationDTO_default_instance_;
class BabelConstraintNodeDTO;
struct BabelConstraintNodeDTODefaultTypeInternal;
extern BabelConstraintNodeDTODefaultTypeInternal _BabelConstraintNodeDTO_default_instance_;
class BabelScalarNodeDTO;
struct BabelScalarNodeDTODefaultTypeInternal;
extern BabelScalarNodeDTODefaultTypeInternal _BabelScalarNodeDTO_default_instance_;
class ContinuousDTO;
struct ContinuousDTODefaultTypeInternal;
extern ContinuousDTODefaultTypeInternal _ContinuousDTO_default_instance_;
class DesignIterationCompletedNotificationDTO;
struct DesignIterationCompletedNotificationDTODefaultTypeInternal;
extern DesignIterationCompletedNotificationDTODefaultTypeInternal _DesignIterationCompletedNotificationDTO_default_instance_;
class DesignRowDTO;
struct DesignRowDTODefaultTypeInternal;
extern DesignRowDTODefaultTypeInternal _DesignRowDTO_default_instance_;
class DiscreteRangeDTO;
struct DiscreteRangeDTODefaultTypeInternal;
extern DiscreteRangeDTODefaultTypeInternal _DiscreteRangeDTO_default_instance_;
class ErrorResponseDTO;
struct ErrorResponseDTODefaultTypeInternal;
extern ErrorResponseDTODefaultTypeInternal _ErrorResponseDTO_default_instance_;
class EvaluableNodeDTO;
struct EvaluableNodeDTODefaultTypeInternal;
extern EvaluableNodeDTODefaultTypeInternal _EvaluableNodeDTO_default_instance_;
class ExecOptionDTO;
struct ExecOptionDTODefaultTypeInternal;
extern ExecOptionDTODefaultTypeInternal _ExecOptionDTO_default_instance_;
class ExternalSimulationExecConfigurationDTO;
struct ExternalSimulationExecConfigurationDTODefaultTypeInternal;
extern ExternalSimulationExecConfigurationDTODefaultTypeInternal _ExternalSimulationExecConfigurationDTO_default_instance_;
class InputParameterDTO;
struct InputParameterDTODefaultTypeInternal;
extern InputParameterDTODefaultTypeInternal _InputParameterDTO_default_instance_;
class InputParameterDetectionStepSetDTO;
struct InputParameterDetectionStepSetDTODefaultTypeInternal;
extern InputParameterDetectionStepSetDTODefaultTypeInternal _InputParameterDetectionStepSetDTO_default_instance_;
class InputParameterLocationStepDTO;
struct InputParameterLocationStepDTODefaultTypeInternal;
extern InputParameterLocationStepDTODefaultTypeInternal _InputParameterLocationStepDTO_default_instance_;
class InternalErrorDTO;
struct InternalErrorDTODefaultTypeInternal;
extern InternalErrorDTODefaultTypeInternal _InternalErrorDTO_default_instance_;
class NoSuchOptimizationRunDTO;
struct NoSuchOptimizationRunDTODefaultTypeInternal;
extern NoSuchOptimizationRunDTODefaultTypeInternal _NoSuchOptimizationRunDTO_default_instance_;
class OptimizationFinishedNotificationDTO;
struct OptimizationFinishedNotificationDTODefaultTypeInternal;
extern OptimizationFinishedNotificationDTODefaultTypeInternal _OptimizationFinishedNotificationDTO_default_instance_;
class OptimizationNotStartedNotificationDTO;
struct OptimizationNotStartedNotificationDTODefaultTypeInternal;
extern OptimizationNotStartedNotificationDTODefaultTypeInternal _OptimizationNotStartedNotificationDTO_default_instance_;
class OptimizationResultsQueryDTO;
struct OptimizationResultsQueryDTODefaultTypeInternal;
extern OptimizationResultsQueryDTODefaultTypeInternal _OptimizationResultsQueryDTO_default_instance_;
class OptimizationResultsResponseDTO;
struct OptimizationResultsResponseDTODefaultTypeInternal;
extern OptimizationResultsResponseDTODefaultTypeInternal _OptimizationResultsResponseDTO_default_instance_;
class OptimizationSettingsDTO;
struct OptimizationSettingsDTODefaultTypeInternal;
extern OptimizationSettingsDTODefaultTypeInternal _OptimizationSettingsDTO_default_instance_;
class OptimizationStartedNotificationDTO;
struct OptimizationStartedNotificationDTODefaultTypeInternal;
extern OptimizationStartedNotificationDTODefaultTypeInternal _OptimizationStartedNotificationDTO_default_instance_;
class OptimizerGeneratedQueryDTO;
struct OptimizerGeneratedQueryDTODefaultTypeInternal;
extern OptimizerGeneratedQueryDTODefaultTypeInternal _OptimizerGeneratedQueryDTO_default_instance_;
class OutputParameterLocationStepDTO;
struct OutputParameterLocationStepDTODefaultTypeInternal;
extern OutputParameterLocationStepDTODefaultTypeInternal _OutputParameterLocationStepDTO_default_instance_;
class OutputParameterLocationStepSequenceDTO;
struct OutputParameterLocationStepSequenceDTODefaultTypeInternal;
extern OutputParameterLocationStepSequenceDTODefaultTypeInternal _OutputParameterLocationStepSequenceDTO_default_instance_;
class PathDTO;
struct PathDTODefaultTypeInternal;
extern PathDTODefaultTypeInternal _PathDTO_default_instance_;
class ProblemDefinitionDTO;
struct ProblemDefinitionDTODefaultTypeInternal;
extern ProblemDefinitionDTODefaultTypeInternal _ProblemDefinitionDTO_default_instance_;
class RowColumnLengthLocationDTO;
struct RowColumnLengthLocationDTODefaultTypeInternal;
extern RowColumnLengthLocationDTODefaultTypeInternal _RowColumnLengthLocationDTO_default_instance_;
class SeedRowDTO;
struct SeedRowDTODefaultTypeInternal;
extern SeedRowDTODefaultTypeInternal _SeedRowDTO_default_instance_;
class SimulationCancelRequestDTO;
struct SimulationCancelRequestDTODefaultTypeInternal;
extern SimulationCancelRequestDTODefaultTypeInternal _SimulationCancelRequestDTO_default_instance_;
class SimulationEvaluationCompletedResponseDTO;
struct SimulationEvaluationCompletedResponseDTODefaultTypeInternal;
extern SimulationEvaluationCompletedResponseDTODefaultTypeInternal _SimulationEvaluationCompletedResponseDTO_default_instance_;
class SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse;
struct SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUseDefaultTypeInternal;
extern SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUseDefaultTypeInternal _SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse_default_instance_;
class SimulationEvaluationErrorConfirmDTO;
struct SimulationEvaluationErrorConfirmDTODefaultTypeInternal;
extern SimulationEvaluationErrorConfirmDTODefaultTypeInternal _SimulationEvaluationErrorConfirmDTO_default_instance_;
class SimulationEvaluationErrorResponseDTO;
struct SimulationEvaluationErrorResponseDTODefaultTypeInternal;
extern SimulationEvaluationErrorResponseDTODefaultTypeInternal _SimulationEvaluationErrorResponseDTO_default_instance_;
class SimulationEvaluationRequestDTO;
struct SimulationEvaluationRequestDTODefaultTypeInternal;
extern SimulationEvaluationRequestDTODefaultTypeInternal _SimulationEvaluationRequestDTO_default_instance_;
class SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse;
struct SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUseDefaultTypeInternal;
extern SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUseDefaultTypeInternal _SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse_default_instance_;
class SimulationEvaluationResultConfirmDTO;
struct SimulationEvaluationResultConfirmDTODefaultTypeInternal;
extern SimulationEvaluationResultConfirmDTODefaultTypeInternal _SimulationEvaluationResultConfirmDTO_default_instance_;
class SimulationInputParameterDTO;
struct SimulationInputParameterDTODefaultTypeInternal;
extern SimulationInputParameterDTODefaultTypeInternal _SimulationInputParameterDTO_default_instance_;
class SimulationNodeDTO;
struct SimulationNodeDTODefaultTypeInternal;
extern SimulationNodeDTODefaultTypeInternal _SimulationNodeDTO_default_instance_;
class SimulationOutputParameterDTO;
struct SimulationOutputParameterDTODefaultTypeInternal;
extern SimulationOutputParameterDTODefaultTypeInternal _SimulationOutputParameterDTO_default_instance_;
class StartOptimizationCommandDTO;
struct StartOptimizationCommandDTODefaultTypeInternal;
extern StartOptimizationCommandDTODefaultTypeInternal _StartOptimizationCommandDTO_default_instance_;
class StatusMessageCommandDTO;
struct StatusMessageCommandDTODefaultTypeInternal;
extern StatusMessageCommandDTODefaultTypeInternal _StatusMessageCommandDTO_default_instance_;
class StatusMessageConfirmDTO;
struct StatusMessageConfirmDTODefaultTypeInternal;
extern StatusMessageConfirmDTODefaultTypeInternal _StatusMessageConfirmDTO_default_instance_;
class StopOptimizationCommandDTO;
struct StopOptimizationCommandDTODefaultTypeInternal;
extern StopOptimizationCommandDTODefaultTypeInternal _StopOptimizationCommandDTO_default_instance_;
class StopOptimizationConfirmDTO;
struct StopOptimizationConfirmDTODefaultTypeInternal;
extern StopOptimizationConfirmDTODefaultTypeInternal _StopOptimizationConfirmDTO_default_instance_;
class SuspendAndCallbackConfigurationDTO;
struct SuspendAndCallbackConfigurationDTODefaultTypeInternal;
extern SuspendAndCallbackConfigurationDTODefaultTypeInternal _SuspendAndCallbackConfigurationDTO_default_instance_;
class UUIDDTO;
struct UUIDDTODefaultTypeInternal;
extern UUIDDTODefaultTypeInternal _UUIDDTO_default_instance_;
class VariableMappingDTO;
struct VariableMappingDTODefaultTypeInternal;
extern VariableMappingDTODefaultTypeInternal _VariableMappingDTO_default_instance_;
class VariableMappingDTO_InputsEntry_DoNotUse;
struct VariableMappingDTO_InputsEntry_DoNotUseDefaultTypeInternal;
extern VariableMappingDTO_InputsEntry_DoNotUseDefaultTypeInternal _VariableMappingDTO_InputsEntry_DoNotUse_default_instance_;
class VariableMappingDTO_OutputsEntry_DoNotUse;
struct VariableMappingDTO_OutputsEntry_DoNotUseDefaultTypeInternal;
extern VariableMappingDTO_OutputsEntry_DoNotUseDefaultTypeInternal _VariableMappingDTO_OutputsEntry_DoNotUse_default_instance_;
class VariableNameDTO;
struct VariableNameDTODefaultTypeInternal;
extern VariableNameDTODefaultTypeInternal _VariableNameDTO_default_instance_;
}  // namespace dto
}  // namespace volition
}  // namespace empowerops
PROTOBUF_NAMESPACE_OPEN
template<> ::empowerops::volition::dto::AnchorLocationDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::AnchorLocationDTO>(Arena*);
template<> ::empowerops::volition::dto::BabelConstraintNodeDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::BabelConstraintNodeDTO>(Arena*);
template<> ::empowerops::volition::dto::BabelScalarNodeDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::BabelScalarNodeDTO>(Arena*);
template<> ::empowerops::volition::dto::ContinuousDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::ContinuousDTO>(Arena*);
template<> ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::DesignIterationCompletedNotificationDTO>(Arena*);
template<> ::empowerops::volition::dto::DesignRowDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::DesignRowDTO>(Arena*);
template<> ::empowerops::volition::dto::DiscreteRangeDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::DiscreteRangeDTO>(Arena*);
template<> ::empowerops::volition::dto::ErrorResponseDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::ErrorResponseDTO>(Arena*);
template<> ::empowerops::volition::dto::EvaluableNodeDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::EvaluableNodeDTO>(Arena*);
template<> ::empowerops::volition::dto::ExecOptionDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::ExecOptionDTO>(Arena*);
template<> ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO>(Arena*);
template<> ::empowerops::volition::dto::InputParameterDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::InputParameterDTO>(Arena*);
template<> ::empowerops::volition::dto::InputParameterDetectionStepSetDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::InputParameterDetectionStepSetDTO>(Arena*);
template<> ::empowerops::volition::dto::InputParameterLocationStepDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::InputParameterLocationStepDTO>(Arena*);
template<> ::empowerops::volition::dto::InternalErrorDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::InternalErrorDTO>(Arena*);
template<> ::empowerops::volition::dto::NoSuchOptimizationRunDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::NoSuchOptimizationRunDTO>(Arena*);
template<> ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OptimizationFinishedNotificationDTO>(Arena*);
template<> ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OptimizationNotStartedNotificationDTO>(Arena*);
template<> ::empowerops::volition::dto::OptimizationResultsQueryDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OptimizationResultsQueryDTO>(Arena*);
template<> ::empowerops::volition::dto::OptimizationResultsResponseDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OptimizationResultsResponseDTO>(Arena*);
template<> ::empowerops::volition::dto::OptimizationSettingsDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OptimizationSettingsDTO>(Arena*);
template<> ::empowerops::volition::dto::OptimizationStartedNotificationDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OptimizationStartedNotificationDTO>(Arena*);
template<> ::empowerops::volition::dto::OptimizerGeneratedQueryDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OptimizerGeneratedQueryDTO>(Arena*);
template<> ::empowerops::volition::dto::OutputParameterLocationStepDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OutputParameterLocationStepDTO>(Arena*);
template<> ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO>(Arena*);
template<> ::empowerops::volition::dto::PathDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::PathDTO>(Arena*);
template<> ::empowerops::volition::dto::ProblemDefinitionDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::ProblemDefinitionDTO>(Arena*);
template<> ::empowerops::volition::dto::RowColumnLengthLocationDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::RowColumnLengthLocationDTO>(Arena*);
template<> ::empowerops::volition::dto::SeedRowDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SeedRowDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationCancelRequestDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationCancelRequestDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse>(Arena*);
template<> ::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationEvaluationErrorConfirmDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationEvaluationErrorResponseDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationEvaluationRequestDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationEvaluationRequestDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse>(Arena*);
template<> ::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationEvaluationResultConfirmDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationInputParameterDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationInputParameterDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationNodeDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationNodeDTO>(Arena*);
template<> ::empowerops::volition::dto::SimulationOutputParameterDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SimulationOutputParameterDTO>(Arena*);
template<> ::empowerops::volition::dto::StartOptimizationCommandDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::StartOptimizationCommandDTO>(Arena*);
template<> ::empowerops::volition::dto::StatusMessageCommandDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::StatusMessageCommandDTO>(Arena*);
template<> ::empowerops::volition::dto::StatusMessageConfirmDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::StatusMessageConfirmDTO>(Arena*);
template<> ::empowerops::volition::dto::StopOptimizationCommandDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::StopOptimizationCommandDTO>(Arena*);
template<> ::empowerops::volition::dto::StopOptimizationConfirmDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::StopOptimizationConfirmDTO>(Arena*);
template<> ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO>(Arena*);
template<> ::empowerops::volition::dto::UUIDDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::UUIDDTO>(Arena*);
template<> ::empowerops::volition::dto::VariableMappingDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::VariableMappingDTO>(Arena*);
template<> ::empowerops::volition::dto::VariableMappingDTO_InputsEntry_DoNotUse* Arena::CreateMaybeMessage<::empowerops::volition::dto::VariableMappingDTO_InputsEntry_DoNotUse>(Arena*);
template<> ::empowerops::volition::dto::VariableMappingDTO_OutputsEntry_DoNotUse* Arena::CreateMaybeMessage<::empowerops::volition::dto::VariableMappingDTO_OutputsEntry_DoNotUse>(Arena*);
template<> ::empowerops::volition::dto::VariableNameDTO* Arena::CreateMaybeMessage<::empowerops::volition::dto::VariableNameDTO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace empowerops {
namespace volition {
namespace dto {

enum ExternalSimulationExecConfigurationDTO_BackupTimimg : int {
  ExternalSimulationExecConfigurationDTO_BackupTimimg_Never = 0,
  ExternalSimulationExecConfigurationDTO_BackupTimimg_AtStart = 1,
  ExternalSimulationExecConfigurationDTO_BackupTimimg_AtEachEvaluation = 2,
  ExternalSimulationExecConfigurationDTO_BackupTimimg_ExternalSimulationExecConfigurationDTO_BackupTimimg_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExternalSimulationExecConfigurationDTO_BackupTimimg_ExternalSimulationExecConfigurationDTO_BackupTimimg_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExternalSimulationExecConfigurationDTO_BackupTimimg_IsValid(int value);
constexpr ExternalSimulationExecConfigurationDTO_BackupTimimg ExternalSimulationExecConfigurationDTO_BackupTimimg_BackupTimimg_MIN = ExternalSimulationExecConfigurationDTO_BackupTimimg_Never;
constexpr ExternalSimulationExecConfigurationDTO_BackupTimimg ExternalSimulationExecConfigurationDTO_BackupTimimg_BackupTimimg_MAX = ExternalSimulationExecConfigurationDTO_BackupTimimg_AtEachEvaluation;
constexpr int ExternalSimulationExecConfigurationDTO_BackupTimimg_BackupTimimg_ARRAYSIZE = ExternalSimulationExecConfigurationDTO_BackupTimimg_BackupTimimg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExternalSimulationExecConfigurationDTO_BackupTimimg_descriptor();
template<typename T>
inline const std::string& ExternalSimulationExecConfigurationDTO_BackupTimimg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExternalSimulationExecConfigurationDTO_BackupTimimg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExternalSimulationExecConfigurationDTO_BackupTimimg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExternalSimulationExecConfigurationDTO_BackupTimimg_descriptor(), enum_t_value);
}
inline bool ExternalSimulationExecConfigurationDTO_BackupTimimg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExternalSimulationExecConfigurationDTO_BackupTimimg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExternalSimulationExecConfigurationDTO_BackupTimimg>(
    ExternalSimulationExecConfigurationDTO_BackupTimimg_descriptor(), name, value);
}
enum ExternalSimulationExecConfigurationDTO_ExecStrategy : int {
  ExternalSimulationExecConfigurationDTO_ExecStrategy_InvokeAtEachEvaluation = 0,
  ExternalSimulationExecConfigurationDTO_ExecStrategy_OnceAndWatchFiles = 1,
  ExternalSimulationExecConfigurationDTO_ExecStrategy_ExternalSimulationExecConfigurationDTO_ExecStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExternalSimulationExecConfigurationDTO_ExecStrategy_ExternalSimulationExecConfigurationDTO_ExecStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExternalSimulationExecConfigurationDTO_ExecStrategy_IsValid(int value);
constexpr ExternalSimulationExecConfigurationDTO_ExecStrategy ExternalSimulationExecConfigurationDTO_ExecStrategy_ExecStrategy_MIN = ExternalSimulationExecConfigurationDTO_ExecStrategy_InvokeAtEachEvaluation;
constexpr ExternalSimulationExecConfigurationDTO_ExecStrategy ExternalSimulationExecConfigurationDTO_ExecStrategy_ExecStrategy_MAX = ExternalSimulationExecConfigurationDTO_ExecStrategy_OnceAndWatchFiles;
constexpr int ExternalSimulationExecConfigurationDTO_ExecStrategy_ExecStrategy_ARRAYSIZE = ExternalSimulationExecConfigurationDTO_ExecStrategy_ExecStrategy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExternalSimulationExecConfigurationDTO_ExecStrategy_descriptor();
template<typename T>
inline const std::string& ExternalSimulationExecConfigurationDTO_ExecStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExternalSimulationExecConfigurationDTO_ExecStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExternalSimulationExecConfigurationDTO_ExecStrategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExternalSimulationExecConfigurationDTO_ExecStrategy_descriptor(), enum_t_value);
}
inline bool ExternalSimulationExecConfigurationDTO_ExecStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExternalSimulationExecConfigurationDTO_ExecStrategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExternalSimulationExecConfigurationDTO_ExecStrategy>(
    ExternalSimulationExecConfigurationDTO_ExecStrategy_descriptor(), name, value);
}
// ===================================================================

class StartOptimizationCommandDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.StartOptimizationCommandDTO) */ {
 public:
  inline StartOptimizationCommandDTO() : StartOptimizationCommandDTO(nullptr) {}
  ~StartOptimizationCommandDTO() override;
  explicit constexpr StartOptimizationCommandDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartOptimizationCommandDTO(const StartOptimizationCommandDTO& from);
  StartOptimizationCommandDTO(StartOptimizationCommandDTO&& from) noexcept
    : StartOptimizationCommandDTO() {
    *this = ::std::move(from);
  }

  inline StartOptimizationCommandDTO& operator=(const StartOptimizationCommandDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartOptimizationCommandDTO& operator=(StartOptimizationCommandDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartOptimizationCommandDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartOptimizationCommandDTO* internal_default_instance() {
    return reinterpret_cast<const StartOptimizationCommandDTO*>(
               &_StartOptimizationCommandDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartOptimizationCommandDTO& a, StartOptimizationCommandDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(StartOptimizationCommandDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartOptimizationCommandDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartOptimizationCommandDTO* New() const final {
    return new StartOptimizationCommandDTO();
  }

  StartOptimizationCommandDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartOptimizationCommandDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartOptimizationCommandDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartOptimizationCommandDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartOptimizationCommandDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.StartOptimizationCommandDTO";
  }
  protected:
  explicit StartOptimizationCommandDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedPointsFieldNumber = 4,
    kProblemDefinitionFieldNumber = 1,
    kSettingsFieldNumber = 3,
  };
  // repeated .empowerops.volition.dto.SeedRowDTO seed_points = 4;
  int seed_points_size() const;
  private:
  int _internal_seed_points_size() const;
  public:
  void clear_seed_points();
  ::empowerops::volition::dto::SeedRowDTO* mutable_seed_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SeedRowDTO >*
      mutable_seed_points();
  private:
  const ::empowerops::volition::dto::SeedRowDTO& _internal_seed_points(int index) const;
  ::empowerops::volition::dto::SeedRowDTO* _internal_add_seed_points();
  public:
  const ::empowerops::volition::dto::SeedRowDTO& seed_points(int index) const;
  ::empowerops::volition::dto::SeedRowDTO* add_seed_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SeedRowDTO >&
      seed_points() const;

  // .empowerops.volition.dto.ProblemDefinitionDTO problem_definition = 1;
  bool has_problem_definition() const;
  private:
  bool _internal_has_problem_definition() const;
  public:
  void clear_problem_definition();
  const ::empowerops::volition::dto::ProblemDefinitionDTO& problem_definition() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::ProblemDefinitionDTO* release_problem_definition();
  ::empowerops::volition::dto::ProblemDefinitionDTO* mutable_problem_definition();
  void set_allocated_problem_definition(::empowerops::volition::dto::ProblemDefinitionDTO* problem_definition);
  private:
  const ::empowerops::volition::dto::ProblemDefinitionDTO& _internal_problem_definition() const;
  ::empowerops::volition::dto::ProblemDefinitionDTO* _internal_mutable_problem_definition();
  public:
  void unsafe_arena_set_allocated_problem_definition(
      ::empowerops::volition::dto::ProblemDefinitionDTO* problem_definition);
  ::empowerops::volition::dto::ProblemDefinitionDTO* unsafe_arena_release_problem_definition();

  // .empowerops.volition.dto.OptimizationSettingsDTO settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::empowerops::volition::dto::OptimizationSettingsDTO& settings() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::OptimizationSettingsDTO* release_settings();
  ::empowerops::volition::dto::OptimizationSettingsDTO* mutable_settings();
  void set_allocated_settings(::empowerops::volition::dto::OptimizationSettingsDTO* settings);
  private:
  const ::empowerops::volition::dto::OptimizationSettingsDTO& _internal_settings() const;
  ::empowerops::volition::dto::OptimizationSettingsDTO* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::empowerops::volition::dto::OptimizationSettingsDTO* settings);
  ::empowerops::volition::dto::OptimizationSettingsDTO* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.StartOptimizationCommandDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SeedRowDTO > seed_points_;
  ::empowerops::volition::dto::ProblemDefinitionDTO* problem_definition_;
  ::empowerops::volition::dto::OptimizationSettingsDTO* settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class ProblemDefinitionDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.ProblemDefinitionDTO) */ {
 public:
  inline ProblemDefinitionDTO() : ProblemDefinitionDTO(nullptr) {}
  ~ProblemDefinitionDTO() override;
  explicit constexpr ProblemDefinitionDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProblemDefinitionDTO(const ProblemDefinitionDTO& from);
  ProblemDefinitionDTO(ProblemDefinitionDTO&& from) noexcept
    : ProblemDefinitionDTO() {
    *this = ::std::move(from);
  }

  inline ProblemDefinitionDTO& operator=(const ProblemDefinitionDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProblemDefinitionDTO& operator=(ProblemDefinitionDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProblemDefinitionDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProblemDefinitionDTO* internal_default_instance() {
    return reinterpret_cast<const ProblemDefinitionDTO*>(
               &_ProblemDefinitionDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProblemDefinitionDTO& a, ProblemDefinitionDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(ProblemDefinitionDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProblemDefinitionDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProblemDefinitionDTO* New() const final {
    return new ProblemDefinitionDTO();
  }

  ProblemDefinitionDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProblemDefinitionDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProblemDefinitionDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProblemDefinitionDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProblemDefinitionDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.ProblemDefinitionDTO";
  }
  protected:
  explicit ProblemDefinitionDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kEvaluablesFieldNumber = 2,
  };
  // repeated .empowerops.volition.dto.InputParameterDTO inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::empowerops::volition::dto::InputParameterDTO* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDTO >*
      mutable_inputs();
  private:
  const ::empowerops::volition::dto::InputParameterDTO& _internal_inputs(int index) const;
  ::empowerops::volition::dto::InputParameterDTO* _internal_add_inputs();
  public:
  const ::empowerops::volition::dto::InputParameterDTO& inputs(int index) const;
  ::empowerops::volition::dto::InputParameterDTO* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDTO >&
      inputs() const;

  // repeated .empowerops.volition.dto.EvaluableNodeDTO evaluables = 2;
  int evaluables_size() const;
  private:
  int _internal_evaluables_size() const;
  public:
  void clear_evaluables();
  ::empowerops::volition::dto::EvaluableNodeDTO* mutable_evaluables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::EvaluableNodeDTO >*
      mutable_evaluables();
  private:
  const ::empowerops::volition::dto::EvaluableNodeDTO& _internal_evaluables(int index) const;
  ::empowerops::volition::dto::EvaluableNodeDTO* _internal_add_evaluables();
  public:
  const ::empowerops::volition::dto::EvaluableNodeDTO& evaluables(int index) const;
  ::empowerops::volition::dto::EvaluableNodeDTO* add_evaluables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::EvaluableNodeDTO >&
      evaluables() const;

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.ProblemDefinitionDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDTO > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::EvaluableNodeDTO > evaluables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class EvaluableNodeDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.EvaluableNodeDTO) */ {
 public:
  inline EvaluableNodeDTO() : EvaluableNodeDTO(nullptr) {}
  ~EvaluableNodeDTO() override;
  explicit constexpr EvaluableNodeDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvaluableNodeDTO(const EvaluableNodeDTO& from);
  EvaluableNodeDTO(EvaluableNodeDTO&& from) noexcept
    : EvaluableNodeDTO() {
    *this = ::std::move(from);
  }

  inline EvaluableNodeDTO& operator=(const EvaluableNodeDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvaluableNodeDTO& operator=(EvaluableNodeDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvaluableNodeDTO& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kTransform = 2,
    kSimulation = 3,
    kConstraint = 4,
    VALUE_NOT_SET = 0,
  };

  static inline const EvaluableNodeDTO* internal_default_instance() {
    return reinterpret_cast<const EvaluableNodeDTO*>(
               &_EvaluableNodeDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EvaluableNodeDTO& a, EvaluableNodeDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(EvaluableNodeDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvaluableNodeDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvaluableNodeDTO* New() const final {
    return new EvaluableNodeDTO();
  }

  EvaluableNodeDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvaluableNodeDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvaluableNodeDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EvaluableNodeDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvaluableNodeDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.EvaluableNodeDTO";
  }
  protected:
  explicit EvaluableNodeDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
    kSimulationFieldNumber = 3,
    kConstraintFieldNumber = 4,
  };
  // .empowerops.volition.dto.BabelScalarNodeDTO transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::empowerops::volition::dto::BabelScalarNodeDTO& transform() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::BabelScalarNodeDTO* release_transform();
  ::empowerops::volition::dto::BabelScalarNodeDTO* mutable_transform();
  void set_allocated_transform(::empowerops::volition::dto::BabelScalarNodeDTO* transform);
  private:
  const ::empowerops::volition::dto::BabelScalarNodeDTO& _internal_transform() const;
  ::empowerops::volition::dto::BabelScalarNodeDTO* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::empowerops::volition::dto::BabelScalarNodeDTO* transform);
  ::empowerops::volition::dto::BabelScalarNodeDTO* unsafe_arena_release_transform();

  // .empowerops.volition.dto.SimulationNodeDTO simulation = 3;
  bool has_simulation() const;
  private:
  bool _internal_has_simulation() const;
  public:
  void clear_simulation();
  const ::empowerops::volition::dto::SimulationNodeDTO& simulation() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::SimulationNodeDTO* release_simulation();
  ::empowerops::volition::dto::SimulationNodeDTO* mutable_simulation();
  void set_allocated_simulation(::empowerops::volition::dto::SimulationNodeDTO* simulation);
  private:
  const ::empowerops::volition::dto::SimulationNodeDTO& _internal_simulation() const;
  ::empowerops::volition::dto::SimulationNodeDTO* _internal_mutable_simulation();
  public:
  void unsafe_arena_set_allocated_simulation(
      ::empowerops::volition::dto::SimulationNodeDTO* simulation);
  ::empowerops::volition::dto::SimulationNodeDTO* unsafe_arena_release_simulation();

  // .empowerops.volition.dto.BabelConstraintNodeDTO constraint = 4;
  bool has_constraint() const;
  private:
  bool _internal_has_constraint() const;
  public:
  void clear_constraint();
  const ::empowerops::volition::dto::BabelConstraintNodeDTO& constraint() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::BabelConstraintNodeDTO* release_constraint();
  ::empowerops::volition::dto::BabelConstraintNodeDTO* mutable_constraint();
  void set_allocated_constraint(::empowerops::volition::dto::BabelConstraintNodeDTO* constraint);
  private:
  const ::empowerops::volition::dto::BabelConstraintNodeDTO& _internal_constraint() const;
  ::empowerops::volition::dto::BabelConstraintNodeDTO* _internal_mutable_constraint();
  public:
  void unsafe_arena_set_allocated_constraint(
      ::empowerops::volition::dto::BabelConstraintNodeDTO* constraint);
  ::empowerops::volition::dto::BabelConstraintNodeDTO* unsafe_arena_release_constraint();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.EvaluableNodeDTO)
 private:
  class _Internal;
  void set_has_transform();
  void set_has_simulation();
  void set_has_constraint();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::empowerops::volition::dto::BabelScalarNodeDTO* transform_;
    ::empowerops::volition::dto::SimulationNodeDTO* simulation_;
    ::empowerops::volition::dto::BabelConstraintNodeDTO* constraint_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationNodeDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationNodeDTO) */ {
 public:
  inline SimulationNodeDTO() : SimulationNodeDTO(nullptr) {}
  ~SimulationNodeDTO() override;
  explicit constexpr SimulationNodeDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationNodeDTO(const SimulationNodeDTO& from);
  SimulationNodeDTO(SimulationNodeDTO&& from) noexcept
    : SimulationNodeDTO() {
    *this = ::std::move(from);
  }

  inline SimulationNodeDTO& operator=(const SimulationNodeDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationNodeDTO& operator=(SimulationNodeDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationNodeDTO& default_instance() {
    return *internal_default_instance();
  }
  enum MappingCase {
    kAutoMap = 2,
    kMappingTable = 3,
    MAPPING_NOT_SET = 0,
  };

  enum StrategyCase {
    kSuspendAndCallback = 7,
    kExternalSimulationExec = 8,
    STRATEGY_NOT_SET = 0,
  };

  static inline const SimulationNodeDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationNodeDTO*>(
               &_SimulationNodeDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SimulationNodeDTO& a, SimulationNodeDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationNodeDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationNodeDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationNodeDTO* New() const final {
    return new SimulationNodeDTO();
  }

  SimulationNodeDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationNodeDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationNodeDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationNodeDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationNodeDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationNodeDTO";
  }
  protected:
  explicit SimulationNodeDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 4,
    kOutputsFieldNumber = 5,
    kNameFieldNumber = 1,
    kTimeOutFieldNumber = 6,
    kAutoMapFieldNumber = 2,
    kMappingTableFieldNumber = 3,
    kSuspendAndCallbackFieldNumber = 7,
    kExternalSimulationExecFieldNumber = 8,
  };
  // repeated .empowerops.volition.dto.SimulationInputParameterDTO inputs = 4;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::empowerops::volition::dto::SimulationInputParameterDTO* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationInputParameterDTO >*
      mutable_inputs();
  private:
  const ::empowerops::volition::dto::SimulationInputParameterDTO& _internal_inputs(int index) const;
  ::empowerops::volition::dto::SimulationInputParameterDTO* _internal_add_inputs();
  public:
  const ::empowerops::volition::dto::SimulationInputParameterDTO& inputs(int index) const;
  ::empowerops::volition::dto::SimulationInputParameterDTO* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationInputParameterDTO >&
      inputs() const;

  // repeated .empowerops.volition.dto.SimulationOutputParameterDTO outputs = 5;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::empowerops::volition::dto::SimulationOutputParameterDTO* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationOutputParameterDTO >*
      mutable_outputs();
  private:
  const ::empowerops::volition::dto::SimulationOutputParameterDTO& _internal_outputs(int index) const;
  ::empowerops::volition::dto::SimulationOutputParameterDTO* _internal_add_outputs();
  public:
  const ::empowerops::volition::dto::SimulationOutputParameterDTO& outputs(int index) const;
  ::empowerops::volition::dto::SimulationOutputParameterDTO* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationOutputParameterDTO >&
      outputs() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Duration time_out = 6;
  bool has_time_out() const;
  private:
  bool _internal_has_time_out() const;
  public:
  void clear_time_out();
  const ::PROTOBUF_NAMESPACE_ID::Duration& time_out() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_time_out();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_time_out();
  void set_allocated_time_out(::PROTOBUF_NAMESPACE_ID::Duration* time_out);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_time_out() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_out();
  public:
  void unsafe_arena_set_allocated_time_out(
      ::PROTOBUF_NAMESPACE_ID::Duration* time_out);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_out();

  // bool auto_map = 2;
  bool has_auto_map() const;
  private:
  bool _internal_has_auto_map() const;
  public:
  void clear_auto_map();
  bool auto_map() const;
  void set_auto_map(bool value);
  private:
  bool _internal_auto_map() const;
  void _internal_set_auto_map(bool value);
  public:

  // .empowerops.volition.dto.VariableMappingDTO mapping_table = 3;
  bool has_mapping_table() const;
  private:
  bool _internal_has_mapping_table() const;
  public:
  void clear_mapping_table();
  const ::empowerops::volition::dto::VariableMappingDTO& mapping_table() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::VariableMappingDTO* release_mapping_table();
  ::empowerops::volition::dto::VariableMappingDTO* mutable_mapping_table();
  void set_allocated_mapping_table(::empowerops::volition::dto::VariableMappingDTO* mapping_table);
  private:
  const ::empowerops::volition::dto::VariableMappingDTO& _internal_mapping_table() const;
  ::empowerops::volition::dto::VariableMappingDTO* _internal_mutable_mapping_table();
  public:
  void unsafe_arena_set_allocated_mapping_table(
      ::empowerops::volition::dto::VariableMappingDTO* mapping_table);
  ::empowerops::volition::dto::VariableMappingDTO* unsafe_arena_release_mapping_table();

  // .empowerops.volition.dto.SuspendAndCallbackConfigurationDTO suspend_and_callback = 7;
  bool has_suspend_and_callback() const;
  private:
  bool _internal_has_suspend_and_callback() const;
  public:
  void clear_suspend_and_callback();
  const ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO& suspend_and_callback() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* release_suspend_and_callback();
  ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* mutable_suspend_and_callback();
  void set_allocated_suspend_and_callback(::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* suspend_and_callback);
  private:
  const ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO& _internal_suspend_and_callback() const;
  ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* _internal_mutable_suspend_and_callback();
  public:
  void unsafe_arena_set_allocated_suspend_and_callback(
      ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* suspend_and_callback);
  ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* unsafe_arena_release_suspend_and_callback();

  // .empowerops.volition.dto.ExternalSimulationExecConfigurationDTO external_simulation_exec = 8;
  bool has_external_simulation_exec() const;
  private:
  bool _internal_has_external_simulation_exec() const;
  public:
  void clear_external_simulation_exec();
  const ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO& external_simulation_exec() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* release_external_simulation_exec();
  ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* mutable_external_simulation_exec();
  void set_allocated_external_simulation_exec(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* external_simulation_exec);
  private:
  const ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO& _internal_external_simulation_exec() const;
  ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* _internal_mutable_external_simulation_exec();
  public:
  void unsafe_arena_set_allocated_external_simulation_exec(
      ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* external_simulation_exec);
  ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* unsafe_arena_release_external_simulation_exec();

  void clear_mapping();
  MappingCase mapping_case() const;
  void clear_strategy();
  StrategyCase strategy_case() const;
  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationNodeDTO)
 private:
  class _Internal;
  void set_has_auto_map();
  void set_has_mapping_table();
  void set_has_suspend_and_callback();
  void set_has_external_simulation_exec();

  inline bool has_mapping() const;
  inline void clear_has_mapping();

  inline bool has_strategy() const;
  inline void clear_has_strategy();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationInputParameterDTO > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationOutputParameterDTO > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Duration* time_out_;
  union MappingUnion {
    constexpr MappingUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool auto_map_;
    ::empowerops::volition::dto::VariableMappingDTO* mapping_table_;
  } mapping_;
  union StrategyUnion {
    constexpr StrategyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* suspend_and_callback_;
    ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* external_simulation_exec_;
  } strategy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationInputParameterDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationInputParameterDTO) */ {
 public:
  inline SimulationInputParameterDTO() : SimulationInputParameterDTO(nullptr) {}
  ~SimulationInputParameterDTO() override;
  explicit constexpr SimulationInputParameterDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationInputParameterDTO(const SimulationInputParameterDTO& from);
  SimulationInputParameterDTO(SimulationInputParameterDTO&& from) noexcept
    : SimulationInputParameterDTO() {
    *this = ::std::move(from);
  }

  inline SimulationInputParameterDTO& operator=(const SimulationInputParameterDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationInputParameterDTO& operator=(SimulationInputParameterDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationInputParameterDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationInputParameterDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationInputParameterDTO*>(
               &_SimulationInputParameterDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimulationInputParameterDTO& a, SimulationInputParameterDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationInputParameterDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationInputParameterDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationInputParameterDTO* New() const final {
    return new SimulationInputParameterDTO();
  }

  SimulationInputParameterDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationInputParameterDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationInputParameterDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationInputParameterDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationInputParameterDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationInputParameterDTO";
  }
  protected:
  explicit SimulationInputParameterDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationInputParameterDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationOutputParameterDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationOutputParameterDTO) */ {
 public:
  inline SimulationOutputParameterDTO() : SimulationOutputParameterDTO(nullptr) {}
  ~SimulationOutputParameterDTO() override;
  explicit constexpr SimulationOutputParameterDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationOutputParameterDTO(const SimulationOutputParameterDTO& from);
  SimulationOutputParameterDTO(SimulationOutputParameterDTO&& from) noexcept
    : SimulationOutputParameterDTO() {
    *this = ::std::move(from);
  }

  inline SimulationOutputParameterDTO& operator=(const SimulationOutputParameterDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationOutputParameterDTO& operator=(SimulationOutputParameterDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationOutputParameterDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationOutputParameterDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationOutputParameterDTO*>(
               &_SimulationOutputParameterDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimulationOutputParameterDTO& a, SimulationOutputParameterDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationOutputParameterDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationOutputParameterDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationOutputParameterDTO* New() const final {
    return new SimulationOutputParameterDTO();
  }

  SimulationOutputParameterDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationOutputParameterDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationOutputParameterDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationOutputParameterDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationOutputParameterDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationOutputParameterDTO";
  }
  protected:
  explicit SimulationOutputParameterDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIsBooleanFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_boolean = 2;
  void clear_is_boolean();
  bool is_boolean() const;
  void set_is_boolean(bool value);
  private:
  bool _internal_is_boolean() const;
  void _internal_set_is_boolean(bool value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationOutputParameterDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_boolean_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SuspendAndCallbackConfigurationDTO final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SuspendAndCallbackConfigurationDTO) */ {
 public:
  inline SuspendAndCallbackConfigurationDTO() : SuspendAndCallbackConfigurationDTO(nullptr) {}
  explicit constexpr SuspendAndCallbackConfigurationDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuspendAndCallbackConfigurationDTO(const SuspendAndCallbackConfigurationDTO& from);
  SuspendAndCallbackConfigurationDTO(SuspendAndCallbackConfigurationDTO&& from) noexcept
    : SuspendAndCallbackConfigurationDTO() {
    *this = ::std::move(from);
  }

  inline SuspendAndCallbackConfigurationDTO& operator=(const SuspendAndCallbackConfigurationDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendAndCallbackConfigurationDTO& operator=(SuspendAndCallbackConfigurationDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuspendAndCallbackConfigurationDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuspendAndCallbackConfigurationDTO* internal_default_instance() {
    return reinterpret_cast<const SuspendAndCallbackConfigurationDTO*>(
               &_SuspendAndCallbackConfigurationDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SuspendAndCallbackConfigurationDTO& a, SuspendAndCallbackConfigurationDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendAndCallbackConfigurationDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuspendAndCallbackConfigurationDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuspendAndCallbackConfigurationDTO* New() const final {
    return new SuspendAndCallbackConfigurationDTO();
  }

  SuspendAndCallbackConfigurationDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuspendAndCallbackConfigurationDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SuspendAndCallbackConfigurationDTO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SuspendAndCallbackConfigurationDTO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SuspendAndCallbackConfigurationDTO";
  }
  protected:
  explicit SuspendAndCallbackConfigurationDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SuspendAndCallbackConfigurationDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class ExternalSimulationExecConfigurationDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO) */ {
 public:
  inline ExternalSimulationExecConfigurationDTO() : ExternalSimulationExecConfigurationDTO(nullptr) {}
  ~ExternalSimulationExecConfigurationDTO() override;
  explicit constexpr ExternalSimulationExecConfigurationDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExternalSimulationExecConfigurationDTO(const ExternalSimulationExecConfigurationDTO& from);
  ExternalSimulationExecConfigurationDTO(ExternalSimulationExecConfigurationDTO&& from) noexcept
    : ExternalSimulationExecConfigurationDTO() {
    *this = ::std::move(from);
  }

  inline ExternalSimulationExecConfigurationDTO& operator=(const ExternalSimulationExecConfigurationDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalSimulationExecConfigurationDTO& operator=(ExternalSimulationExecConfigurationDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalSimulationExecConfigurationDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExternalSimulationExecConfigurationDTO* internal_default_instance() {
    return reinterpret_cast<const ExternalSimulationExecConfigurationDTO*>(
               &_ExternalSimulationExecConfigurationDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExternalSimulationExecConfigurationDTO& a, ExternalSimulationExecConfigurationDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalSimulationExecConfigurationDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalSimulationExecConfigurationDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalSimulationExecConfigurationDTO* New() const final {
    return new ExternalSimulationExecConfigurationDTO();
  }

  ExternalSimulationExecConfigurationDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalSimulationExecConfigurationDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExternalSimulationExecConfigurationDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExternalSimulationExecConfigurationDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalSimulationExecConfigurationDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.ExternalSimulationExecConfigurationDTO";
  }
  protected:
  explicit ExternalSimulationExecConfigurationDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExternalSimulationExecConfigurationDTO_BackupTimimg BackupTimimg;
  static constexpr BackupTimimg Never =
    ExternalSimulationExecConfigurationDTO_BackupTimimg_Never;
  static constexpr BackupTimimg AtStart =
    ExternalSimulationExecConfigurationDTO_BackupTimimg_AtStart;
  static constexpr BackupTimimg AtEachEvaluation =
    ExternalSimulationExecConfigurationDTO_BackupTimimg_AtEachEvaluation;
  static inline bool BackupTimimg_IsValid(int value) {
    return ExternalSimulationExecConfigurationDTO_BackupTimimg_IsValid(value);
  }
  static constexpr BackupTimimg BackupTimimg_MIN =
    ExternalSimulationExecConfigurationDTO_BackupTimimg_BackupTimimg_MIN;
  static constexpr BackupTimimg BackupTimimg_MAX =
    ExternalSimulationExecConfigurationDTO_BackupTimimg_BackupTimimg_MAX;
  static constexpr int BackupTimimg_ARRAYSIZE =
    ExternalSimulationExecConfigurationDTO_BackupTimimg_BackupTimimg_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BackupTimimg_descriptor() {
    return ExternalSimulationExecConfigurationDTO_BackupTimimg_descriptor();
  }
  template<typename T>
  static inline const std::string& BackupTimimg_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BackupTimimg>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BackupTimimg_Name.");
    return ExternalSimulationExecConfigurationDTO_BackupTimimg_Name(enum_t_value);
  }
  static inline bool BackupTimimg_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BackupTimimg* value) {
    return ExternalSimulationExecConfigurationDTO_BackupTimimg_Parse(name, value);
  }

  typedef ExternalSimulationExecConfigurationDTO_ExecStrategy ExecStrategy;
  static constexpr ExecStrategy InvokeAtEachEvaluation =
    ExternalSimulationExecConfigurationDTO_ExecStrategy_InvokeAtEachEvaluation;
  static constexpr ExecStrategy OnceAndWatchFiles =
    ExternalSimulationExecConfigurationDTO_ExecStrategy_OnceAndWatchFiles;
  static inline bool ExecStrategy_IsValid(int value) {
    return ExternalSimulationExecConfigurationDTO_ExecStrategy_IsValid(value);
  }
  static constexpr ExecStrategy ExecStrategy_MIN =
    ExternalSimulationExecConfigurationDTO_ExecStrategy_ExecStrategy_MIN;
  static constexpr ExecStrategy ExecStrategy_MAX =
    ExternalSimulationExecConfigurationDTO_ExecStrategy_ExecStrategy_MAX;
  static constexpr int ExecStrategy_ARRAYSIZE =
    ExternalSimulationExecConfigurationDTO_ExecStrategy_ExecStrategy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ExecStrategy_descriptor() {
    return ExternalSimulationExecConfigurationDTO_ExecStrategy_descriptor();
  }
  template<typename T>
  static inline const std::string& ExecStrategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExecStrategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExecStrategy_Name.");
    return ExternalSimulationExecConfigurationDTO_ExecStrategy_Name(enum_t_value);
  }
  static inline bool ExecStrategy_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ExecStrategy* value) {
    return ExternalSimulationExecConfigurationDTO_ExecStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 7,
    kOutputStepSequencesFieldNumber = 9,
    kInputStepSetsFieldNumber = 10,
    kExitCodesFieldNumber = 11,
    kWorkingDirectoryFieldNumber = 1,
    kInputFileFieldNumber = 2,
    kOutputFileFieldNumber = 3,
    kBackupDirectoryFieldNumber = 4,
    kExecutableFieldNumber = 6,
    kBackupTimingFieldNumber = 5,
    kExecStrategyFieldNumber = 8,
  };
  // repeated .empowerops.volition.dto.ExecOptionDTO options = 7;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::empowerops::volition::dto::ExecOptionDTO* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::ExecOptionDTO >*
      mutable_options();
  private:
  const ::empowerops::volition::dto::ExecOptionDTO& _internal_options(int index) const;
  ::empowerops::volition::dto::ExecOptionDTO* _internal_add_options();
  public:
  const ::empowerops::volition::dto::ExecOptionDTO& options(int index) const;
  ::empowerops::volition::dto::ExecOptionDTO* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::ExecOptionDTO >&
      options() const;

  // repeated .empowerops.volition.dto.OutputParameterLocationStepSequenceDTO output_step_sequences = 9;
  int output_step_sequences_size() const;
  private:
  int _internal_output_step_sequences_size() const;
  public:
  void clear_output_step_sequences();
  ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO* mutable_output_step_sequences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO >*
      mutable_output_step_sequences();
  private:
  const ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO& _internal_output_step_sequences(int index) const;
  ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO* _internal_add_output_step_sequences();
  public:
  const ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO& output_step_sequences(int index) const;
  ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO* add_output_step_sequences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO >&
      output_step_sequences() const;

  // repeated .empowerops.volition.dto.InputParameterDetectionStepSetDTO input_step_sets = 10;
  int input_step_sets_size() const;
  private:
  int _internal_input_step_sets_size() const;
  public:
  void clear_input_step_sets();
  ::empowerops::volition::dto::InputParameterDetectionStepSetDTO* mutable_input_step_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDetectionStepSetDTO >*
      mutable_input_step_sets();
  private:
  const ::empowerops::volition::dto::InputParameterDetectionStepSetDTO& _internal_input_step_sets(int index) const;
  ::empowerops::volition::dto::InputParameterDetectionStepSetDTO* _internal_add_input_step_sets();
  public:
  const ::empowerops::volition::dto::InputParameterDetectionStepSetDTO& input_step_sets(int index) const;
  ::empowerops::volition::dto::InputParameterDetectionStepSetDTO* add_input_step_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDetectionStepSetDTO >&
      input_step_sets() const;

  // repeated uint32 exit_codes = 11;
  int exit_codes_size() const;
  private:
  int _internal_exit_codes_size() const;
  public:
  void clear_exit_codes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_codes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_exit_codes() const;
  void _internal_add_exit_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_exit_codes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_codes(int index) const;
  void set_exit_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_exit_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      exit_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_exit_codes();

  // .empowerops.volition.dto.PathDTO working_directory = 1;
  bool has_working_directory() const;
  private:
  bool _internal_has_working_directory() const;
  public:
  void clear_working_directory();
  const ::empowerops::volition::dto::PathDTO& working_directory() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::PathDTO* release_working_directory();
  ::empowerops::volition::dto::PathDTO* mutable_working_directory();
  void set_allocated_working_directory(::empowerops::volition::dto::PathDTO* working_directory);
  private:
  const ::empowerops::volition::dto::PathDTO& _internal_working_directory() const;
  ::empowerops::volition::dto::PathDTO* _internal_mutable_working_directory();
  public:
  void unsafe_arena_set_allocated_working_directory(
      ::empowerops::volition::dto::PathDTO* working_directory);
  ::empowerops::volition::dto::PathDTO* unsafe_arena_release_working_directory();

  // .empowerops.volition.dto.PathDTO input_file = 2;
  bool has_input_file() const;
  private:
  bool _internal_has_input_file() const;
  public:
  void clear_input_file();
  const ::empowerops::volition::dto::PathDTO& input_file() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::PathDTO* release_input_file();
  ::empowerops::volition::dto::PathDTO* mutable_input_file();
  void set_allocated_input_file(::empowerops::volition::dto::PathDTO* input_file);
  private:
  const ::empowerops::volition::dto::PathDTO& _internal_input_file() const;
  ::empowerops::volition::dto::PathDTO* _internal_mutable_input_file();
  public:
  void unsafe_arena_set_allocated_input_file(
      ::empowerops::volition::dto::PathDTO* input_file);
  ::empowerops::volition::dto::PathDTO* unsafe_arena_release_input_file();

  // .empowerops.volition.dto.PathDTO output_file = 3;
  bool has_output_file() const;
  private:
  bool _internal_has_output_file() const;
  public:
  void clear_output_file();
  const ::empowerops::volition::dto::PathDTO& output_file() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::PathDTO* release_output_file();
  ::empowerops::volition::dto::PathDTO* mutable_output_file();
  void set_allocated_output_file(::empowerops::volition::dto::PathDTO* output_file);
  private:
  const ::empowerops::volition::dto::PathDTO& _internal_output_file() const;
  ::empowerops::volition::dto::PathDTO* _internal_mutable_output_file();
  public:
  void unsafe_arena_set_allocated_output_file(
      ::empowerops::volition::dto::PathDTO* output_file);
  ::empowerops::volition::dto::PathDTO* unsafe_arena_release_output_file();

  // .empowerops.volition.dto.PathDTO backup_directory = 4;
  bool has_backup_directory() const;
  private:
  bool _internal_has_backup_directory() const;
  public:
  void clear_backup_directory();
  const ::empowerops::volition::dto::PathDTO& backup_directory() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::PathDTO* release_backup_directory();
  ::empowerops::volition::dto::PathDTO* mutable_backup_directory();
  void set_allocated_backup_directory(::empowerops::volition::dto::PathDTO* backup_directory);
  private:
  const ::empowerops::volition::dto::PathDTO& _internal_backup_directory() const;
  ::empowerops::volition::dto::PathDTO* _internal_mutable_backup_directory();
  public:
  void unsafe_arena_set_allocated_backup_directory(
      ::empowerops::volition::dto::PathDTO* backup_directory);
  ::empowerops::volition::dto::PathDTO* unsafe_arena_release_backup_directory();

  // .empowerops.volition.dto.PathDTO executable = 6;
  bool has_executable() const;
  private:
  bool _internal_has_executable() const;
  public:
  void clear_executable();
  const ::empowerops::volition::dto::PathDTO& executable() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::PathDTO* release_executable();
  ::empowerops::volition::dto::PathDTO* mutable_executable();
  void set_allocated_executable(::empowerops::volition::dto::PathDTO* executable);
  private:
  const ::empowerops::volition::dto::PathDTO& _internal_executable() const;
  ::empowerops::volition::dto::PathDTO* _internal_mutable_executable();
  public:
  void unsafe_arena_set_allocated_executable(
      ::empowerops::volition::dto::PathDTO* executable);
  ::empowerops::volition::dto::PathDTO* unsafe_arena_release_executable();

  // .empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.BackupTimimg backup_timing = 5;
  void clear_backup_timing();
  ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg backup_timing() const;
  void set_backup_timing(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg value);
  private:
  ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg _internal_backup_timing() const;
  void _internal_set_backup_timing(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg value);
  public:

  // .empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.ExecStrategy exec_strategy = 8;
  void clear_exec_strategy();
  ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy exec_strategy() const;
  void set_exec_strategy(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy value);
  private:
  ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy _internal_exec_strategy() const;
  void _internal_set_exec_strategy(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::ExecOptionDTO > options_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO > output_step_sequences_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDetectionStepSetDTO > input_step_sets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > exit_codes_;
  mutable std::atomic<int> _exit_codes_cached_byte_size_;
  ::empowerops::volition::dto::PathDTO* working_directory_;
  ::empowerops::volition::dto::PathDTO* input_file_;
  ::empowerops::volition::dto::PathDTO* output_file_;
  ::empowerops::volition::dto::PathDTO* backup_directory_;
  ::empowerops::volition::dto::PathDTO* executable_;
  int backup_timing_;
  int exec_strategy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class ExecOptionDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.ExecOptionDTO) */ {
 public:
  inline ExecOptionDTO() : ExecOptionDTO(nullptr) {}
  ~ExecOptionDTO() override;
  explicit constexpr ExecOptionDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecOptionDTO(const ExecOptionDTO& from);
  ExecOptionDTO(ExecOptionDTO&& from) noexcept
    : ExecOptionDTO() {
    *this = ::std::move(from);
  }

  inline ExecOptionDTO& operator=(const ExecOptionDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecOptionDTO& operator=(ExecOptionDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecOptionDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecOptionDTO* internal_default_instance() {
    return reinterpret_cast<const ExecOptionDTO*>(
               &_ExecOptionDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExecOptionDTO& a, ExecOptionDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecOptionDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecOptionDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecOptionDTO* New() const final {
    return new ExecOptionDTO();
  }

  ExecOptionDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecOptionDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecOptionDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecOptionDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecOptionDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.ExecOptionDTO";
  }
  protected:
  explicit ExecOptionDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionNameFieldNumber = 1,
    kArgumentFieldNumber = 2,
  };
  // string option_name = 1;
  void clear_option_name();
  const std::string& option_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_option_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_option_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_option_name();
  void set_allocated_option_name(std::string* option_name);
  private:
  const std::string& _internal_option_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_option_name(const std::string& value);
  std::string* _internal_mutable_option_name();
  public:

  // string argument = 2;
  void clear_argument();
  const std::string& argument() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_argument(ArgT0&& arg0, ArgT... args);
  std::string* mutable_argument();
  PROTOBUF_MUST_USE_RESULT std::string* release_argument();
  void set_allocated_argument(std::string* argument);
  private:
  const std::string& _internal_argument() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_argument(const std::string& value);
  std::string* _internal_mutable_argument();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.ExecOptionDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr argument_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OutputParameterLocationStepSequenceDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OutputParameterLocationStepSequenceDTO) */ {
 public:
  inline OutputParameterLocationStepSequenceDTO() : OutputParameterLocationStepSequenceDTO(nullptr) {}
  ~OutputParameterLocationStepSequenceDTO() override;
  explicit constexpr OutputParameterLocationStepSequenceDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputParameterLocationStepSequenceDTO(const OutputParameterLocationStepSequenceDTO& from);
  OutputParameterLocationStepSequenceDTO(OutputParameterLocationStepSequenceDTO&& from) noexcept
    : OutputParameterLocationStepSequenceDTO() {
    *this = ::std::move(from);
  }

  inline OutputParameterLocationStepSequenceDTO& operator=(const OutputParameterLocationStepSequenceDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputParameterLocationStepSequenceDTO& operator=(OutputParameterLocationStepSequenceDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputParameterLocationStepSequenceDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputParameterLocationStepSequenceDTO* internal_default_instance() {
    return reinterpret_cast<const OutputParameterLocationStepSequenceDTO*>(
               &_OutputParameterLocationStepSequenceDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OutputParameterLocationStepSequenceDTO& a, OutputParameterLocationStepSequenceDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputParameterLocationStepSequenceDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputParameterLocationStepSequenceDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputParameterLocationStepSequenceDTO* New() const final {
    return new OutputParameterLocationStepSequenceDTO();
  }

  OutputParameterLocationStepSequenceDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputParameterLocationStepSequenceDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputParameterLocationStepSequenceDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutputParameterLocationStepSequenceDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputParameterLocationStepSequenceDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OutputParameterLocationStepSequenceDTO";
  }
  protected:
  explicit OutputParameterLocationStepSequenceDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepsFieldNumber = 1,
  };
  // repeated .empowerops.volition.dto.OutputParameterLocationStepDTO steps = 1;
  int steps_size() const;
  private:
  int _internal_steps_size() const;
  public:
  void clear_steps();
  ::empowerops::volition::dto::OutputParameterLocationStepDTO* mutable_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepDTO >*
      mutable_steps();
  private:
  const ::empowerops::volition::dto::OutputParameterLocationStepDTO& _internal_steps(int index) const;
  ::empowerops::volition::dto::OutputParameterLocationStepDTO* _internal_add_steps();
  public:
  const ::empowerops::volition::dto::OutputParameterLocationStepDTO& steps(int index) const;
  ::empowerops::volition::dto::OutputParameterLocationStepDTO* add_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepDTO >&
      steps() const;

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OutputParameterLocationStepSequenceDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepDTO > steps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class InputParameterDetectionStepSetDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.InputParameterDetectionStepSetDTO) */ {
 public:
  inline InputParameterDetectionStepSetDTO() : InputParameterDetectionStepSetDTO(nullptr) {}
  ~InputParameterDetectionStepSetDTO() override;
  explicit constexpr InputParameterDetectionStepSetDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputParameterDetectionStepSetDTO(const InputParameterDetectionStepSetDTO& from);
  InputParameterDetectionStepSetDTO(InputParameterDetectionStepSetDTO&& from) noexcept
    : InputParameterDetectionStepSetDTO() {
    *this = ::std::move(from);
  }

  inline InputParameterDetectionStepSetDTO& operator=(const InputParameterDetectionStepSetDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputParameterDetectionStepSetDTO& operator=(InputParameterDetectionStepSetDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputParameterDetectionStepSetDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputParameterDetectionStepSetDTO* internal_default_instance() {
    return reinterpret_cast<const InputParameterDetectionStepSetDTO*>(
               &_InputParameterDetectionStepSetDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InputParameterDetectionStepSetDTO& a, InputParameterDetectionStepSetDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(InputParameterDetectionStepSetDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputParameterDetectionStepSetDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputParameterDetectionStepSetDTO* New() const final {
    return new InputParameterDetectionStepSetDTO();
  }

  InputParameterDetectionStepSetDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputParameterDetectionStepSetDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputParameterDetectionStepSetDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputParameterDetectionStepSetDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputParameterDetectionStepSetDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.InputParameterDetectionStepSetDTO";
  }
  protected:
  explicit InputParameterDetectionStepSetDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepsFieldNumber = 1,
  };
  // repeated .empowerops.volition.dto.InputParameterLocationStepDTO steps = 1;
  int steps_size() const;
  private:
  int _internal_steps_size() const;
  public:
  void clear_steps();
  ::empowerops::volition::dto::InputParameterLocationStepDTO* mutable_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterLocationStepDTO >*
      mutable_steps();
  private:
  const ::empowerops::volition::dto::InputParameterLocationStepDTO& _internal_steps(int index) const;
  ::empowerops::volition::dto::InputParameterLocationStepDTO* _internal_add_steps();
  public:
  const ::empowerops::volition::dto::InputParameterLocationStepDTO& steps(int index) const;
  ::empowerops::volition::dto::InputParameterLocationStepDTO* add_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterLocationStepDTO >&
      steps() const;

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.InputParameterDetectionStepSetDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterLocationStepDTO > steps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OutputParameterLocationStepDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OutputParameterLocationStepDTO) */ {
 public:
  inline OutputParameterLocationStepDTO() : OutputParameterLocationStepDTO(nullptr) {}
  ~OutputParameterLocationStepDTO() override;
  explicit constexpr OutputParameterLocationStepDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputParameterLocationStepDTO(const OutputParameterLocationStepDTO& from);
  OutputParameterLocationStepDTO(OutputParameterLocationStepDTO&& from) noexcept
    : OutputParameterLocationStepDTO() {
    *this = ::std::move(from);
  }

  inline OutputParameterLocationStepDTO& operator=(const OutputParameterLocationStepDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputParameterLocationStepDTO& operator=(OutputParameterLocationStepDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputParameterLocationStepDTO& default_instance() {
    return *internal_default_instance();
  }
  enum LocationCase {
    kAnchorLocation = 2,
    kRowOffset = 3,
    kColumnOffset = 4,
    LOCATION_NOT_SET = 0,
  };

  static inline const OutputParameterLocationStepDTO* internal_default_instance() {
    return reinterpret_cast<const OutputParameterLocationStepDTO*>(
               &_OutputParameterLocationStepDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OutputParameterLocationStepDTO& a, OutputParameterLocationStepDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputParameterLocationStepDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputParameterLocationStepDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputParameterLocationStepDTO* New() const final {
    return new OutputParameterLocationStepDTO();
  }

  OutputParameterLocationStepDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputParameterLocationStepDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputParameterLocationStepDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutputParameterLocationStepDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputParameterLocationStepDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OutputParameterLocationStepDTO";
  }
  protected:
  explicit OutputParameterLocationStepDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAnchorLocationFieldNumber = 2,
    kRowOffsetFieldNumber = 3,
    kColumnOffsetFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .empowerops.volition.dto.AnchorLocationDTO anchor_location = 2;
  bool has_anchor_location() const;
  private:
  bool _internal_has_anchor_location() const;
  public:
  void clear_anchor_location();
  const ::empowerops::volition::dto::AnchorLocationDTO& anchor_location() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::AnchorLocationDTO* release_anchor_location();
  ::empowerops::volition::dto::AnchorLocationDTO* mutable_anchor_location();
  void set_allocated_anchor_location(::empowerops::volition::dto::AnchorLocationDTO* anchor_location);
  private:
  const ::empowerops::volition::dto::AnchorLocationDTO& _internal_anchor_location() const;
  ::empowerops::volition::dto::AnchorLocationDTO* _internal_mutable_anchor_location();
  public:
  void unsafe_arena_set_allocated_anchor_location(
      ::empowerops::volition::dto::AnchorLocationDTO* anchor_location);
  ::empowerops::volition::dto::AnchorLocationDTO* unsafe_arena_release_anchor_location();

  // uint32 row_offset = 3;
  bool has_row_offset() const;
  private:
  bool _internal_has_row_offset() const;
  public:
  void clear_row_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_offset() const;
  void set_row_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_offset() const;
  void _internal_set_row_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 column_offset = 4;
  bool has_column_offset() const;
  private:
  bool _internal_has_column_offset() const;
  public:
  void clear_column_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_offset() const;
  void set_column_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_offset() const;
  void _internal_set_column_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_location();
  LocationCase location_case() const;
  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OutputParameterLocationStepDTO)
 private:
  class _Internal;
  void set_has_anchor_location();
  void set_has_row_offset();
  void set_has_column_offset();

  inline bool has_location() const;
  inline void clear_has_location();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union LocationUnion {
    constexpr LocationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::empowerops::volition::dto::AnchorLocationDTO* anchor_location_;
    ::PROTOBUF_NAMESPACE_ID::uint32 row_offset_;
    ::PROTOBUF_NAMESPACE_ID::uint32 column_offset_;
  } location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class InputParameterLocationStepDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.InputParameterLocationStepDTO) */ {
 public:
  inline InputParameterLocationStepDTO() : InputParameterLocationStepDTO(nullptr) {}
  ~InputParameterLocationStepDTO() override;
  explicit constexpr InputParameterLocationStepDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputParameterLocationStepDTO(const InputParameterLocationStepDTO& from);
  InputParameterLocationStepDTO(InputParameterLocationStepDTO&& from) noexcept
    : InputParameterLocationStepDTO() {
    *this = ::std::move(from);
  }

  inline InputParameterLocationStepDTO& operator=(const InputParameterLocationStepDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputParameterLocationStepDTO& operator=(InputParameterLocationStepDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputParameterLocationStepDTO& default_instance() {
    return *internal_default_instance();
  }
  enum LocationCase {
    kRowColumnAndLengthLocation = 2,
    LOCATION_NOT_SET = 0,
  };

  static inline const InputParameterLocationStepDTO* internal_default_instance() {
    return reinterpret_cast<const InputParameterLocationStepDTO*>(
               &_InputParameterLocationStepDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(InputParameterLocationStepDTO& a, InputParameterLocationStepDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(InputParameterLocationStepDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputParameterLocationStepDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputParameterLocationStepDTO* New() const final {
    return new InputParameterLocationStepDTO();
  }

  InputParameterLocationStepDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputParameterLocationStepDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputParameterLocationStepDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputParameterLocationStepDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputParameterLocationStepDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.InputParameterLocationStepDTO";
  }
  protected:
  explicit InputParameterLocationStepDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRowColumnAndLengthLocationFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .empowerops.volition.dto.RowColumnLengthLocationDTO row_column_and_length_location = 2;
  bool has_row_column_and_length_location() const;
  private:
  bool _internal_has_row_column_and_length_location() const;
  public:
  void clear_row_column_and_length_location();
  const ::empowerops::volition::dto::RowColumnLengthLocationDTO& row_column_and_length_location() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::RowColumnLengthLocationDTO* release_row_column_and_length_location();
  ::empowerops::volition::dto::RowColumnLengthLocationDTO* mutable_row_column_and_length_location();
  void set_allocated_row_column_and_length_location(::empowerops::volition::dto::RowColumnLengthLocationDTO* row_column_and_length_location);
  private:
  const ::empowerops::volition::dto::RowColumnLengthLocationDTO& _internal_row_column_and_length_location() const;
  ::empowerops::volition::dto::RowColumnLengthLocationDTO* _internal_mutable_row_column_and_length_location();
  public:
  void unsafe_arena_set_allocated_row_column_and_length_location(
      ::empowerops::volition::dto::RowColumnLengthLocationDTO* row_column_and_length_location);
  ::empowerops::volition::dto::RowColumnLengthLocationDTO* unsafe_arena_release_row_column_and_length_location();

  void clear_location();
  LocationCase location_case() const;
  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.InputParameterLocationStepDTO)
 private:
  class _Internal;
  void set_has_row_column_and_length_location();

  inline bool has_location() const;
  inline void clear_has_location();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union LocationUnion {
    constexpr LocationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::empowerops::volition::dto::RowColumnLengthLocationDTO* row_column_and_length_location_;
  } location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class RowColumnLengthLocationDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.RowColumnLengthLocationDTO) */ {
 public:
  inline RowColumnLengthLocationDTO() : RowColumnLengthLocationDTO(nullptr) {}
  ~RowColumnLengthLocationDTO() override;
  explicit constexpr RowColumnLengthLocationDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RowColumnLengthLocationDTO(const RowColumnLengthLocationDTO& from);
  RowColumnLengthLocationDTO(RowColumnLengthLocationDTO&& from) noexcept
    : RowColumnLengthLocationDTO() {
    *this = ::std::move(from);
  }

  inline RowColumnLengthLocationDTO& operator=(const RowColumnLengthLocationDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowColumnLengthLocationDTO& operator=(RowColumnLengthLocationDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowColumnLengthLocationDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const RowColumnLengthLocationDTO* internal_default_instance() {
    return reinterpret_cast<const RowColumnLengthLocationDTO*>(
               &_RowColumnLengthLocationDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RowColumnLengthLocationDTO& a, RowColumnLengthLocationDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(RowColumnLengthLocationDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowColumnLengthLocationDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RowColumnLengthLocationDTO* New() const final {
    return new RowColumnLengthLocationDTO();
  }

  RowColumnLengthLocationDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RowColumnLengthLocationDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RowColumnLengthLocationDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RowColumnLengthLocationDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowColumnLengthLocationDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.RowColumnLengthLocationDTO";
  }
  protected:
  explicit RowColumnLengthLocationDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowNumberFieldNumber = 1,
    kColumnNumberFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // uint32 row_number = 1;
  void clear_row_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_number() const;
  void set_row_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_number() const;
  void _internal_set_row_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 column_number = 2;
  void clear_column_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_number() const;
  void set_column_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_number() const;
  void _internal_set_column_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.RowColumnLengthLocationDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class AnchorLocationDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.AnchorLocationDTO) */ {
 public:
  inline AnchorLocationDTO() : AnchorLocationDTO(nullptr) {}
  ~AnchorLocationDTO() override;
  explicit constexpr AnchorLocationDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnchorLocationDTO(const AnchorLocationDTO& from);
  AnchorLocationDTO(AnchorLocationDTO&& from) noexcept
    : AnchorLocationDTO() {
    *this = ::std::move(from);
  }

  inline AnchorLocationDTO& operator=(const AnchorLocationDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchorLocationDTO& operator=(AnchorLocationDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnchorLocationDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnchorLocationDTO* internal_default_instance() {
    return reinterpret_cast<const AnchorLocationDTO*>(
               &_AnchorLocationDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AnchorLocationDTO& a, AnchorLocationDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(AnchorLocationDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnchorLocationDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnchorLocationDTO* New() const final {
    return new AnchorLocationDTO();
  }

  AnchorLocationDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnchorLocationDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnchorLocationDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnchorLocationDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchorLocationDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.AnchorLocationDTO";
  }
  protected:
  explicit AnchorLocationDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawAnchorTextFieldNumber = 1,
    kOccuranceFieldNumber = 2,
  };
  // string raw_anchor_text = 1;
  void clear_raw_anchor_text();
  const std::string& raw_anchor_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_anchor_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_anchor_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_raw_anchor_text();
  void set_allocated_raw_anchor_text(std::string* raw_anchor_text);
  private:
  const std::string& _internal_raw_anchor_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_anchor_text(const std::string& value);
  std::string* _internal_mutable_raw_anchor_text();
  public:

  // uint32 occurance = 2;
  void clear_occurance();
  ::PROTOBUF_NAMESPACE_ID::uint32 occurance() const;
  void set_occurance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_occurance() const;
  void _internal_set_occurance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.AnchorLocationDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_anchor_text_;
  ::PROTOBUF_NAMESPACE_ID::uint32 occurance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OptimizationSettingsDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OptimizationSettingsDTO) */ {
 public:
  inline OptimizationSettingsDTO() : OptimizationSettingsDTO(nullptr) {}
  ~OptimizationSettingsDTO() override;
  explicit constexpr OptimizationSettingsDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizationSettingsDTO(const OptimizationSettingsDTO& from);
  OptimizationSettingsDTO(OptimizationSettingsDTO&& from) noexcept
    : OptimizationSettingsDTO() {
    *this = ::std::move(from);
  }

  inline OptimizationSettingsDTO& operator=(const OptimizationSettingsDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizationSettingsDTO& operator=(OptimizationSettingsDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizationSettingsDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizationSettingsDTO* internal_default_instance() {
    return reinterpret_cast<const OptimizationSettingsDTO*>(
               &_OptimizationSettingsDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(OptimizationSettingsDTO& a, OptimizationSettingsDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizationSettingsDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizationSettingsDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizationSettingsDTO* New() const final {
    return new OptimizationSettingsDTO();
  }

  OptimizationSettingsDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizationSettingsDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizationSettingsDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptimizationSettingsDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizationSettingsDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OptimizationSettingsDTO";
  }
  protected:
  explicit OptimizationSettingsDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunTimeFieldNumber = 11,
    kIterationCountFieldNumber = 12,
    kTargetObjectiveValueFieldNumber = 13,
  };
  // optional .google.protobuf.Duration run_time = 11;
  bool has_run_time() const;
  private:
  bool _internal_has_run_time() const;
  public:
  void clear_run_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& run_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_run_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_run_time();
  void set_allocated_run_time(::PROTOBUF_NAMESPACE_ID::Duration* run_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_run_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_run_time();
  public:
  void unsafe_arena_set_allocated_run_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* run_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_run_time();

  // optional uint32 iteration_count = 12;
  bool has_iteration_count() const;
  private:
  bool _internal_has_iteration_count() const;
  public:
  void clear_iteration_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 iteration_count() const;
  void set_iteration_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iteration_count() const;
  void _internal_set_iteration_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double target_objective_value = 13;
  bool has_target_objective_value() const;
  private:
  bool _internal_has_target_objective_value() const;
  public:
  void clear_target_objective_value();
  double target_objective_value() const;
  void set_target_objective_value(double value);
  private:
  double _internal_target_objective_value() const;
  void _internal_set_target_objective_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OptimizationSettingsDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::Duration* run_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iteration_count_;
  double target_objective_value_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OptimizerGeneratedQueryDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OptimizerGeneratedQueryDTO) */ {
 public:
  inline OptimizerGeneratedQueryDTO() : OptimizerGeneratedQueryDTO(nullptr) {}
  ~OptimizerGeneratedQueryDTO() override;
  explicit constexpr OptimizerGeneratedQueryDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizerGeneratedQueryDTO(const OptimizerGeneratedQueryDTO& from);
  OptimizerGeneratedQueryDTO(OptimizerGeneratedQueryDTO&& from) noexcept
    : OptimizerGeneratedQueryDTO() {
    *this = ::std::move(from);
  }

  inline OptimizerGeneratedQueryDTO& operator=(const OptimizerGeneratedQueryDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizerGeneratedQueryDTO& operator=(OptimizerGeneratedQueryDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizerGeneratedQueryDTO& default_instance() {
    return *internal_default_instance();
  }
  enum PurposeCase {
    kEvaluationRequest = 1,
    kCancelRequest = 3,
    kOptimizationStartedNotification = 5,
    kOptimizationFinishedNotification = 6,
    kOptimizationNotStartedNotification = 7,
    kDesignIterationCompletedNotification = 8,
    PURPOSE_NOT_SET = 0,
  };

  static inline const OptimizerGeneratedQueryDTO* internal_default_instance() {
    return reinterpret_cast<const OptimizerGeneratedQueryDTO*>(
               &_OptimizerGeneratedQueryDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(OptimizerGeneratedQueryDTO& a, OptimizerGeneratedQueryDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizerGeneratedQueryDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizerGeneratedQueryDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizerGeneratedQueryDTO* New() const final {
    return new OptimizerGeneratedQueryDTO();
  }

  OptimizerGeneratedQueryDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizerGeneratedQueryDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizerGeneratedQueryDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptimizerGeneratedQueryDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizerGeneratedQueryDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OptimizerGeneratedQueryDTO";
  }
  protected:
  explicit OptimizerGeneratedQueryDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvaluationRequestFieldNumber = 1,
    kCancelRequestFieldNumber = 3,
    kOptimizationStartedNotificationFieldNumber = 5,
    kOptimizationFinishedNotificationFieldNumber = 6,
    kOptimizationNotStartedNotificationFieldNumber = 7,
    kDesignIterationCompletedNotificationFieldNumber = 8,
  };
  // .empowerops.volition.dto.SimulationEvaluationRequestDTO evaluation_request = 1;
  bool has_evaluation_request() const;
  private:
  bool _internal_has_evaluation_request() const;
  public:
  void clear_evaluation_request();
  const ::empowerops::volition::dto::SimulationEvaluationRequestDTO& evaluation_request() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::SimulationEvaluationRequestDTO* release_evaluation_request();
  ::empowerops::volition::dto::SimulationEvaluationRequestDTO* mutable_evaluation_request();
  void set_allocated_evaluation_request(::empowerops::volition::dto::SimulationEvaluationRequestDTO* evaluation_request);
  private:
  const ::empowerops::volition::dto::SimulationEvaluationRequestDTO& _internal_evaluation_request() const;
  ::empowerops::volition::dto::SimulationEvaluationRequestDTO* _internal_mutable_evaluation_request();
  public:
  void unsafe_arena_set_allocated_evaluation_request(
      ::empowerops::volition::dto::SimulationEvaluationRequestDTO* evaluation_request);
  ::empowerops::volition::dto::SimulationEvaluationRequestDTO* unsafe_arena_release_evaluation_request();

  // .empowerops.volition.dto.SimulationCancelRequestDTO cancel_request = 3;
  bool has_cancel_request() const;
  private:
  bool _internal_has_cancel_request() const;
  public:
  void clear_cancel_request();
  const ::empowerops::volition::dto::SimulationCancelRequestDTO& cancel_request() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::SimulationCancelRequestDTO* release_cancel_request();
  ::empowerops::volition::dto::SimulationCancelRequestDTO* mutable_cancel_request();
  void set_allocated_cancel_request(::empowerops::volition::dto::SimulationCancelRequestDTO* cancel_request);
  private:
  const ::empowerops::volition::dto::SimulationCancelRequestDTO& _internal_cancel_request() const;
  ::empowerops::volition::dto::SimulationCancelRequestDTO* _internal_mutable_cancel_request();
  public:
  void unsafe_arena_set_allocated_cancel_request(
      ::empowerops::volition::dto::SimulationCancelRequestDTO* cancel_request);
  ::empowerops::volition::dto::SimulationCancelRequestDTO* unsafe_arena_release_cancel_request();

  // .empowerops.volition.dto.OptimizationStartedNotificationDTO optimization_started_notification = 5;
  bool has_optimization_started_notification() const;
  private:
  bool _internal_has_optimization_started_notification() const;
  public:
  void clear_optimization_started_notification();
  const ::empowerops::volition::dto::OptimizationStartedNotificationDTO& optimization_started_notification() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::OptimizationStartedNotificationDTO* release_optimization_started_notification();
  ::empowerops::volition::dto::OptimizationStartedNotificationDTO* mutable_optimization_started_notification();
  void set_allocated_optimization_started_notification(::empowerops::volition::dto::OptimizationStartedNotificationDTO* optimization_started_notification);
  private:
  const ::empowerops::volition::dto::OptimizationStartedNotificationDTO& _internal_optimization_started_notification() const;
  ::empowerops::volition::dto::OptimizationStartedNotificationDTO* _internal_mutable_optimization_started_notification();
  public:
  void unsafe_arena_set_allocated_optimization_started_notification(
      ::empowerops::volition::dto::OptimizationStartedNotificationDTO* optimization_started_notification);
  ::empowerops::volition::dto::OptimizationStartedNotificationDTO* unsafe_arena_release_optimization_started_notification();

  // .empowerops.volition.dto.OptimizationFinishedNotificationDTO optimization_finished_notification = 6;
  bool has_optimization_finished_notification() const;
  private:
  bool _internal_has_optimization_finished_notification() const;
  public:
  void clear_optimization_finished_notification();
  const ::empowerops::volition::dto::OptimizationFinishedNotificationDTO& optimization_finished_notification() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* release_optimization_finished_notification();
  ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* mutable_optimization_finished_notification();
  void set_allocated_optimization_finished_notification(::empowerops::volition::dto::OptimizationFinishedNotificationDTO* optimization_finished_notification);
  private:
  const ::empowerops::volition::dto::OptimizationFinishedNotificationDTO& _internal_optimization_finished_notification() const;
  ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* _internal_mutable_optimization_finished_notification();
  public:
  void unsafe_arena_set_allocated_optimization_finished_notification(
      ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* optimization_finished_notification);
  ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* unsafe_arena_release_optimization_finished_notification();

  // .empowerops.volition.dto.OptimizationNotStartedNotificationDTO optimization_not_started_notification = 7;
  bool has_optimization_not_started_notification() const;
  private:
  bool _internal_has_optimization_not_started_notification() const;
  public:
  void clear_optimization_not_started_notification();
  const ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO& optimization_not_started_notification() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* release_optimization_not_started_notification();
  ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* mutable_optimization_not_started_notification();
  void set_allocated_optimization_not_started_notification(::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* optimization_not_started_notification);
  private:
  const ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO& _internal_optimization_not_started_notification() const;
  ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* _internal_mutable_optimization_not_started_notification();
  public:
  void unsafe_arena_set_allocated_optimization_not_started_notification(
      ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* optimization_not_started_notification);
  ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* unsafe_arena_release_optimization_not_started_notification();

  // .empowerops.volition.dto.DesignIterationCompletedNotificationDTO design_iteration_completed_notification = 8;
  bool has_design_iteration_completed_notification() const;
  private:
  bool _internal_has_design_iteration_completed_notification() const;
  public:
  void clear_design_iteration_completed_notification();
  const ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO& design_iteration_completed_notification() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* release_design_iteration_completed_notification();
  ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* mutable_design_iteration_completed_notification();
  void set_allocated_design_iteration_completed_notification(::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* design_iteration_completed_notification);
  private:
  const ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO& _internal_design_iteration_completed_notification() const;
  ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* _internal_mutable_design_iteration_completed_notification();
  public:
  void unsafe_arena_set_allocated_design_iteration_completed_notification(
      ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* design_iteration_completed_notification);
  ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* unsafe_arena_release_design_iteration_completed_notification();

  void clear_purpose();
  PurposeCase purpose_case() const;
  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OptimizerGeneratedQueryDTO)
 private:
  class _Internal;
  void set_has_evaluation_request();
  void set_has_cancel_request();
  void set_has_optimization_started_notification();
  void set_has_optimization_finished_notification();
  void set_has_optimization_not_started_notification();
  void set_has_design_iteration_completed_notification();

  inline bool has_purpose() const;
  inline void clear_has_purpose();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PurposeUnion {
    constexpr PurposeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::empowerops::volition::dto::SimulationEvaluationRequestDTO* evaluation_request_;
    ::empowerops::volition::dto::SimulationCancelRequestDTO* cancel_request_;
    ::empowerops::volition::dto::OptimizationStartedNotificationDTO* optimization_started_notification_;
    ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* optimization_finished_notification_;
    ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* optimization_not_started_notification_;
    ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* design_iteration_completed_notification_;
  } purpose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse();
  explicit constexpr SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse& other);
  static const SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse*>(&_SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "empowerops.volition.dto.SimulationEvaluationRequestDTO.InputVectorEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SimulationEvaluationRequestDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationEvaluationRequestDTO) */ {
 public:
  inline SimulationEvaluationRequestDTO() : SimulationEvaluationRequestDTO(nullptr) {}
  ~SimulationEvaluationRequestDTO() override;
  explicit constexpr SimulationEvaluationRequestDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationEvaluationRequestDTO(const SimulationEvaluationRequestDTO& from);
  SimulationEvaluationRequestDTO(SimulationEvaluationRequestDTO&& from) noexcept
    : SimulationEvaluationRequestDTO() {
    *this = ::std::move(from);
  }

  inline SimulationEvaluationRequestDTO& operator=(const SimulationEvaluationRequestDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationEvaluationRequestDTO& operator=(SimulationEvaluationRequestDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationEvaluationRequestDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationEvaluationRequestDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationEvaluationRequestDTO*>(
               &_SimulationEvaluationRequestDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SimulationEvaluationRequestDTO& a, SimulationEvaluationRequestDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationEvaluationRequestDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationEvaluationRequestDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationEvaluationRequestDTO* New() const final {
    return new SimulationEvaluationRequestDTO();
  }

  SimulationEvaluationRequestDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationEvaluationRequestDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationEvaluationRequestDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationEvaluationRequestDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationEvaluationRequestDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationEvaluationRequestDTO";
  }
  protected:
  explicit SimulationEvaluationRequestDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInputVectorFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, double> input_vector = 2;
  int input_vector_size() const;
  private:
  int _internal_input_vector_size() const;
  public:
  void clear_input_vector();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_input_vector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_input_vector();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      input_vector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_input_vector();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationEvaluationRequestDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SimulationEvaluationRequestDTO_InputVectorEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> input_vector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationCancelRequestDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationCancelRequestDTO) */ {
 public:
  inline SimulationCancelRequestDTO() : SimulationCancelRequestDTO(nullptr) {}
  ~SimulationCancelRequestDTO() override;
  explicit constexpr SimulationCancelRequestDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationCancelRequestDTO(const SimulationCancelRequestDTO& from);
  SimulationCancelRequestDTO(SimulationCancelRequestDTO&& from) noexcept
    : SimulationCancelRequestDTO() {
    *this = ::std::move(from);
  }

  inline SimulationCancelRequestDTO& operator=(const SimulationCancelRequestDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationCancelRequestDTO& operator=(SimulationCancelRequestDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationCancelRequestDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationCancelRequestDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationCancelRequestDTO*>(
               &_SimulationCancelRequestDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SimulationCancelRequestDTO& a, SimulationCancelRequestDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationCancelRequestDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationCancelRequestDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationCancelRequestDTO* New() const final {
    return new SimulationCancelRequestDTO();
  }

  SimulationCancelRequestDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationCancelRequestDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationCancelRequestDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationCancelRequestDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationCancelRequestDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationCancelRequestDTO";
  }
  protected:
  explicit SimulationCancelRequestDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationCancelRequestDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OptimizationStartedNotificationDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OptimizationStartedNotificationDTO) */ {
 public:
  inline OptimizationStartedNotificationDTO() : OptimizationStartedNotificationDTO(nullptr) {}
  ~OptimizationStartedNotificationDTO() override;
  explicit constexpr OptimizationStartedNotificationDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizationStartedNotificationDTO(const OptimizationStartedNotificationDTO& from);
  OptimizationStartedNotificationDTO(OptimizationStartedNotificationDTO&& from) noexcept
    : OptimizationStartedNotificationDTO() {
    *this = ::std::move(from);
  }

  inline OptimizationStartedNotificationDTO& operator=(const OptimizationStartedNotificationDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizationStartedNotificationDTO& operator=(OptimizationStartedNotificationDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizationStartedNotificationDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizationStartedNotificationDTO* internal_default_instance() {
    return reinterpret_cast<const OptimizationStartedNotificationDTO*>(
               &_OptimizationStartedNotificationDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OptimizationStartedNotificationDTO& a, OptimizationStartedNotificationDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizationStartedNotificationDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizationStartedNotificationDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizationStartedNotificationDTO* New() const final {
    return new OptimizationStartedNotificationDTO();
  }

  OptimizationStartedNotificationDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizationStartedNotificationDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizationStartedNotificationDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptimizationStartedNotificationDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizationStartedNotificationDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OptimizationStartedNotificationDTO";
  }
  protected:
  explicit OptimizationStartedNotificationDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIDFieldNumber = 1,
  };
  // .empowerops.volition.dto.UUIDDTO run_ID = 1;
  bool has_run_id() const;
  private:
  bool _internal_has_run_id() const;
  public:
  void clear_run_id();
  const ::empowerops::volition::dto::UUIDDTO& run_id() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::UUIDDTO* release_run_id();
  ::empowerops::volition::dto::UUIDDTO* mutable_run_id();
  void set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id);
  private:
  const ::empowerops::volition::dto::UUIDDTO& _internal_run_id() const;
  ::empowerops::volition::dto::UUIDDTO* _internal_mutable_run_id();
  public:
  void unsafe_arena_set_allocated_run_id(
      ::empowerops::volition::dto::UUIDDTO* run_id);
  ::empowerops::volition::dto::UUIDDTO* unsafe_arena_release_run_id();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OptimizationStartedNotificationDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::empowerops::volition::dto::UUIDDTO* run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OptimizationFinishedNotificationDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OptimizationFinishedNotificationDTO) */ {
 public:
  inline OptimizationFinishedNotificationDTO() : OptimizationFinishedNotificationDTO(nullptr) {}
  ~OptimizationFinishedNotificationDTO() override;
  explicit constexpr OptimizationFinishedNotificationDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizationFinishedNotificationDTO(const OptimizationFinishedNotificationDTO& from);
  OptimizationFinishedNotificationDTO(OptimizationFinishedNotificationDTO&& from) noexcept
    : OptimizationFinishedNotificationDTO() {
    *this = ::std::move(from);
  }

  inline OptimizationFinishedNotificationDTO& operator=(const OptimizationFinishedNotificationDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizationFinishedNotificationDTO& operator=(OptimizationFinishedNotificationDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizationFinishedNotificationDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizationFinishedNotificationDTO* internal_default_instance() {
    return reinterpret_cast<const OptimizationFinishedNotificationDTO*>(
               &_OptimizationFinishedNotificationDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(OptimizationFinishedNotificationDTO& a, OptimizationFinishedNotificationDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizationFinishedNotificationDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizationFinishedNotificationDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizationFinishedNotificationDTO* New() const final {
    return new OptimizationFinishedNotificationDTO();
  }

  OptimizationFinishedNotificationDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizationFinishedNotificationDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizationFinishedNotificationDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptimizationFinishedNotificationDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizationFinishedNotificationDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OptimizationFinishedNotificationDTO";
  }
  protected:
  explicit OptimizationFinishedNotificationDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIDFieldNumber = 1,
  };
  // .empowerops.volition.dto.UUIDDTO run_ID = 1;
  bool has_run_id() const;
  private:
  bool _internal_has_run_id() const;
  public:
  void clear_run_id();
  const ::empowerops::volition::dto::UUIDDTO& run_id() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::UUIDDTO* release_run_id();
  ::empowerops::volition::dto::UUIDDTO* mutable_run_id();
  void set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id);
  private:
  const ::empowerops::volition::dto::UUIDDTO& _internal_run_id() const;
  ::empowerops::volition::dto::UUIDDTO* _internal_mutable_run_id();
  public:
  void unsafe_arena_set_allocated_run_id(
      ::empowerops::volition::dto::UUIDDTO* run_id);
  ::empowerops::volition::dto::UUIDDTO* unsafe_arena_release_run_id();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OptimizationFinishedNotificationDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::empowerops::volition::dto::UUIDDTO* run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OptimizationNotStartedNotificationDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OptimizationNotStartedNotificationDTO) */ {
 public:
  inline OptimizationNotStartedNotificationDTO() : OptimizationNotStartedNotificationDTO(nullptr) {}
  ~OptimizationNotStartedNotificationDTO() override;
  explicit constexpr OptimizationNotStartedNotificationDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizationNotStartedNotificationDTO(const OptimizationNotStartedNotificationDTO& from);
  OptimizationNotStartedNotificationDTO(OptimizationNotStartedNotificationDTO&& from) noexcept
    : OptimizationNotStartedNotificationDTO() {
    *this = ::std::move(from);
  }

  inline OptimizationNotStartedNotificationDTO& operator=(const OptimizationNotStartedNotificationDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizationNotStartedNotificationDTO& operator=(OptimizationNotStartedNotificationDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizationNotStartedNotificationDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizationNotStartedNotificationDTO* internal_default_instance() {
    return reinterpret_cast<const OptimizationNotStartedNotificationDTO*>(
               &_OptimizationNotStartedNotificationDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(OptimizationNotStartedNotificationDTO& a, OptimizationNotStartedNotificationDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizationNotStartedNotificationDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizationNotStartedNotificationDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizationNotStartedNotificationDTO* New() const final {
    return new OptimizationNotStartedNotificationDTO();
  }

  OptimizationNotStartedNotificationDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizationNotStartedNotificationDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizationNotStartedNotificationDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptimizationNotStartedNotificationDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizationNotStartedNotificationDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OptimizationNotStartedNotificationDTO";
  }
  protected:
  explicit OptimizationNotStartedNotificationDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIssuesFieldNumber = 1,
  };
  // repeated string issues = 1;
  int issues_size() const;
  private:
  int _internal_issues_size() const;
  public:
  void clear_issues();
  const std::string& issues(int index) const;
  std::string* mutable_issues(int index);
  void set_issues(int index, const std::string& value);
  void set_issues(int index, std::string&& value);
  void set_issues(int index, const char* value);
  void set_issues(int index, const char* value, size_t size);
  std::string* add_issues();
  void add_issues(const std::string& value);
  void add_issues(std::string&& value);
  void add_issues(const char* value);
  void add_issues(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& issues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_issues();
  private:
  const std::string& _internal_issues(int index) const;
  std::string* _internal_add_issues();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OptimizationNotStartedNotificationDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> issues_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class DesignIterationCompletedNotificationDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.DesignIterationCompletedNotificationDTO) */ {
 public:
  inline DesignIterationCompletedNotificationDTO() : DesignIterationCompletedNotificationDTO(nullptr) {}
  ~DesignIterationCompletedNotificationDTO() override;
  explicit constexpr DesignIterationCompletedNotificationDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DesignIterationCompletedNotificationDTO(const DesignIterationCompletedNotificationDTO& from);
  DesignIterationCompletedNotificationDTO(DesignIterationCompletedNotificationDTO&& from) noexcept
    : DesignIterationCompletedNotificationDTO() {
    *this = ::std::move(from);
  }

  inline DesignIterationCompletedNotificationDTO& operator=(const DesignIterationCompletedNotificationDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline DesignIterationCompletedNotificationDTO& operator=(DesignIterationCompletedNotificationDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DesignIterationCompletedNotificationDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const DesignIterationCompletedNotificationDTO* internal_default_instance() {
    return reinterpret_cast<const DesignIterationCompletedNotificationDTO*>(
               &_DesignIterationCompletedNotificationDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DesignIterationCompletedNotificationDTO& a, DesignIterationCompletedNotificationDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(DesignIterationCompletedNotificationDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DesignIterationCompletedNotificationDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DesignIterationCompletedNotificationDTO* New() const final {
    return new DesignIterationCompletedNotificationDTO();
  }

  DesignIterationCompletedNotificationDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DesignIterationCompletedNotificationDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DesignIterationCompletedNotificationDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DesignIterationCompletedNotificationDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DesignIterationCompletedNotificationDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.DesignIterationCompletedNotificationDTO";
  }
  protected:
  explicit DesignIterationCompletedNotificationDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDesignPointFieldNumber = 1,
  };
  // .empowerops.volition.dto.DesignRowDTO design_point = 1;
  bool has_design_point() const;
  private:
  bool _internal_has_design_point() const;
  public:
  void clear_design_point();
  const ::empowerops::volition::dto::DesignRowDTO& design_point() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::DesignRowDTO* release_design_point();
  ::empowerops::volition::dto::DesignRowDTO* mutable_design_point();
  void set_allocated_design_point(::empowerops::volition::dto::DesignRowDTO* design_point);
  private:
  const ::empowerops::volition::dto::DesignRowDTO& _internal_design_point() const;
  ::empowerops::volition::dto::DesignRowDTO* _internal_mutable_design_point();
  public:
  void unsafe_arena_set_allocated_design_point(
      ::empowerops::volition::dto::DesignRowDTO* design_point);
  ::empowerops::volition::dto::DesignRowDTO* unsafe_arena_release_design_point();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.DesignIterationCompletedNotificationDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::empowerops::volition::dto::DesignRowDTO* design_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse();
  explicit constexpr SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse& other);
  static const SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse*>(&_SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.OutputVectorEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SimulationEvaluationCompletedResponseDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO) */ {
 public:
  inline SimulationEvaluationCompletedResponseDTO() : SimulationEvaluationCompletedResponseDTO(nullptr) {}
  ~SimulationEvaluationCompletedResponseDTO() override;
  explicit constexpr SimulationEvaluationCompletedResponseDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationEvaluationCompletedResponseDTO(const SimulationEvaluationCompletedResponseDTO& from);
  SimulationEvaluationCompletedResponseDTO(SimulationEvaluationCompletedResponseDTO&& from) noexcept
    : SimulationEvaluationCompletedResponseDTO() {
    *this = ::std::move(from);
  }

  inline SimulationEvaluationCompletedResponseDTO& operator=(const SimulationEvaluationCompletedResponseDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationEvaluationCompletedResponseDTO& operator=(SimulationEvaluationCompletedResponseDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationEvaluationCompletedResponseDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationEvaluationCompletedResponseDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationEvaluationCompletedResponseDTO*>(
               &_SimulationEvaluationCompletedResponseDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SimulationEvaluationCompletedResponseDTO& a, SimulationEvaluationCompletedResponseDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationEvaluationCompletedResponseDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationEvaluationCompletedResponseDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationEvaluationCompletedResponseDTO* New() const final {
    return new SimulationEvaluationCompletedResponseDTO();
  }

  SimulationEvaluationCompletedResponseDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationEvaluationCompletedResponseDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationEvaluationCompletedResponseDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationEvaluationCompletedResponseDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationEvaluationCompletedResponseDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO";
  }
  protected:
  explicit SimulationEvaluationCompletedResponseDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOutputVectorFieldNumber = 2,
    kNameFieldNumber = 1,
    kAbortOptimizationFieldNumber = 3,
  };
  // map<string, double> output_vector = 2;
  int output_vector_size() const;
  private:
  int _internal_output_vector_size() const;
  public:
  void clear_output_vector();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_output_vector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_output_vector();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      output_vector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_output_vector();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool abort_optimization = 3;
  void clear_abort_optimization();
  bool abort_optimization() const;
  void set_abort_optimization(bool value);
  private:
  bool _internal_abort_optimization() const;
  void _internal_set_abort_optimization(bool value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SimulationEvaluationCompletedResponseDTO_OutputVectorEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> output_vector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool abort_optimization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationEvaluationResultConfirmDTO final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationEvaluationResultConfirmDTO) */ {
 public:
  inline SimulationEvaluationResultConfirmDTO() : SimulationEvaluationResultConfirmDTO(nullptr) {}
  explicit constexpr SimulationEvaluationResultConfirmDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationEvaluationResultConfirmDTO(const SimulationEvaluationResultConfirmDTO& from);
  SimulationEvaluationResultConfirmDTO(SimulationEvaluationResultConfirmDTO&& from) noexcept
    : SimulationEvaluationResultConfirmDTO() {
    *this = ::std::move(from);
  }

  inline SimulationEvaluationResultConfirmDTO& operator=(const SimulationEvaluationResultConfirmDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationEvaluationResultConfirmDTO& operator=(SimulationEvaluationResultConfirmDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationEvaluationResultConfirmDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationEvaluationResultConfirmDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationEvaluationResultConfirmDTO*>(
               &_SimulationEvaluationResultConfirmDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SimulationEvaluationResultConfirmDTO& a, SimulationEvaluationResultConfirmDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationEvaluationResultConfirmDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationEvaluationResultConfirmDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationEvaluationResultConfirmDTO* New() const final {
    return new SimulationEvaluationResultConfirmDTO();
  }

  SimulationEvaluationResultConfirmDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationEvaluationResultConfirmDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SimulationEvaluationResultConfirmDTO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SimulationEvaluationResultConfirmDTO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationEvaluationResultConfirmDTO";
  }
  protected:
  explicit SimulationEvaluationResultConfirmDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationEvaluationResultConfirmDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationEvaluationErrorResponseDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO) */ {
 public:
  inline SimulationEvaluationErrorResponseDTO() : SimulationEvaluationErrorResponseDTO(nullptr) {}
  ~SimulationEvaluationErrorResponseDTO() override;
  explicit constexpr SimulationEvaluationErrorResponseDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationEvaluationErrorResponseDTO(const SimulationEvaluationErrorResponseDTO& from);
  SimulationEvaluationErrorResponseDTO(SimulationEvaluationErrorResponseDTO&& from) noexcept
    : SimulationEvaluationErrorResponseDTO() {
    *this = ::std::move(from);
  }

  inline SimulationEvaluationErrorResponseDTO& operator=(const SimulationEvaluationErrorResponseDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationEvaluationErrorResponseDTO& operator=(SimulationEvaluationErrorResponseDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationEvaluationErrorResponseDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationEvaluationErrorResponseDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationEvaluationErrorResponseDTO*>(
               &_SimulationEvaluationErrorResponseDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SimulationEvaluationErrorResponseDTO& a, SimulationEvaluationErrorResponseDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationEvaluationErrorResponseDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationEvaluationErrorResponseDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationEvaluationErrorResponseDTO* New() const final {
    return new SimulationEvaluationErrorResponseDTO();
  }

  SimulationEvaluationErrorResponseDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationEvaluationErrorResponseDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationEvaluationErrorResponseDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationEvaluationErrorResponseDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationEvaluationErrorResponseDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationEvaluationErrorResponseDTO";
  }
  protected:
  explicit SimulationEvaluationErrorResponseDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
    kExceptionFieldNumber = 3,
    kAbortOptimizationFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string exception = 3;
  void clear_exception();
  const std::string& exception() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exception(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exception();
  PROTOBUF_MUST_USE_RESULT std::string* release_exception();
  void set_allocated_exception(std::string* exception);
  private:
  const std::string& _internal_exception() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exception(const std::string& value);
  std::string* _internal_mutable_exception();
  public:

  // bool abort_optimization = 4;
  void clear_abort_optimization();
  bool abort_optimization() const;
  void set_abort_optimization(bool value);
  private:
  bool _internal_abort_optimization() const;
  void _internal_set_abort_optimization(bool value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exception_;
  bool abort_optimization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SimulationEvaluationErrorConfirmDTO final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SimulationEvaluationErrorConfirmDTO) */ {
 public:
  inline SimulationEvaluationErrorConfirmDTO() : SimulationEvaluationErrorConfirmDTO(nullptr) {}
  explicit constexpr SimulationEvaluationErrorConfirmDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationEvaluationErrorConfirmDTO(const SimulationEvaluationErrorConfirmDTO& from);
  SimulationEvaluationErrorConfirmDTO(SimulationEvaluationErrorConfirmDTO&& from) noexcept
    : SimulationEvaluationErrorConfirmDTO() {
    *this = ::std::move(from);
  }

  inline SimulationEvaluationErrorConfirmDTO& operator=(const SimulationEvaluationErrorConfirmDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationEvaluationErrorConfirmDTO& operator=(SimulationEvaluationErrorConfirmDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationEvaluationErrorConfirmDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationEvaluationErrorConfirmDTO* internal_default_instance() {
    return reinterpret_cast<const SimulationEvaluationErrorConfirmDTO*>(
               &_SimulationEvaluationErrorConfirmDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SimulationEvaluationErrorConfirmDTO& a, SimulationEvaluationErrorConfirmDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationEvaluationErrorConfirmDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationEvaluationErrorConfirmDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationEvaluationErrorConfirmDTO* New() const final {
    return new SimulationEvaluationErrorConfirmDTO();
  }

  SimulationEvaluationErrorConfirmDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationEvaluationErrorConfirmDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SimulationEvaluationErrorConfirmDTO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SimulationEvaluationErrorConfirmDTO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SimulationEvaluationErrorConfirmDTO";
  }
  protected:
  explicit SimulationEvaluationErrorConfirmDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SimulationEvaluationErrorConfirmDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class StatusMessageCommandDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.StatusMessageCommandDTO) */ {
 public:
  inline StatusMessageCommandDTO() : StatusMessageCommandDTO(nullptr) {}
  ~StatusMessageCommandDTO() override;
  explicit constexpr StatusMessageCommandDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusMessageCommandDTO(const StatusMessageCommandDTO& from);
  StatusMessageCommandDTO(StatusMessageCommandDTO&& from) noexcept
    : StatusMessageCommandDTO() {
    *this = ::std::move(from);
  }

  inline StatusMessageCommandDTO& operator=(const StatusMessageCommandDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusMessageCommandDTO& operator=(StatusMessageCommandDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusMessageCommandDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusMessageCommandDTO* internal_default_instance() {
    return reinterpret_cast<const StatusMessageCommandDTO*>(
               &_StatusMessageCommandDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(StatusMessageCommandDTO& a, StatusMessageCommandDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusMessageCommandDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusMessageCommandDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusMessageCommandDTO* New() const final {
    return new StatusMessageCommandDTO();
  }

  StatusMessageCommandDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusMessageCommandDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusMessageCommandDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusMessageCommandDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusMessageCommandDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.StatusMessageCommandDTO";
  }
  protected:
  explicit StatusMessageCommandDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.StatusMessageCommandDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class StatusMessageConfirmDTO final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.StatusMessageConfirmDTO) */ {
 public:
  inline StatusMessageConfirmDTO() : StatusMessageConfirmDTO(nullptr) {}
  explicit constexpr StatusMessageConfirmDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusMessageConfirmDTO(const StatusMessageConfirmDTO& from);
  StatusMessageConfirmDTO(StatusMessageConfirmDTO&& from) noexcept
    : StatusMessageConfirmDTO() {
    *this = ::std::move(from);
  }

  inline StatusMessageConfirmDTO& operator=(const StatusMessageConfirmDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusMessageConfirmDTO& operator=(StatusMessageConfirmDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusMessageConfirmDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusMessageConfirmDTO* internal_default_instance() {
    return reinterpret_cast<const StatusMessageConfirmDTO*>(
               &_StatusMessageConfirmDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(StatusMessageConfirmDTO& a, StatusMessageConfirmDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusMessageConfirmDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusMessageConfirmDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusMessageConfirmDTO* New() const final {
    return new StatusMessageConfirmDTO();
  }

  StatusMessageConfirmDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusMessageConfirmDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StatusMessageConfirmDTO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StatusMessageConfirmDTO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.StatusMessageConfirmDTO";
  }
  protected:
  explicit StatusMessageConfirmDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.StatusMessageConfirmDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class StopOptimizationCommandDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.StopOptimizationCommandDTO) */ {
 public:
  inline StopOptimizationCommandDTO() : StopOptimizationCommandDTO(nullptr) {}
  ~StopOptimizationCommandDTO() override;
  explicit constexpr StopOptimizationCommandDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopOptimizationCommandDTO(const StopOptimizationCommandDTO& from);
  StopOptimizationCommandDTO(StopOptimizationCommandDTO&& from) noexcept
    : StopOptimizationCommandDTO() {
    *this = ::std::move(from);
  }

  inline StopOptimizationCommandDTO& operator=(const StopOptimizationCommandDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopOptimizationCommandDTO& operator=(StopOptimizationCommandDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopOptimizationCommandDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopOptimizationCommandDTO* internal_default_instance() {
    return reinterpret_cast<const StopOptimizationCommandDTO*>(
               &_StopOptimizationCommandDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(StopOptimizationCommandDTO& a, StopOptimizationCommandDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(StopOptimizationCommandDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopOptimizationCommandDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopOptimizationCommandDTO* New() const final {
    return new StopOptimizationCommandDTO();
  }

  StopOptimizationCommandDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopOptimizationCommandDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopOptimizationCommandDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopOptimizationCommandDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopOptimizationCommandDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.StopOptimizationCommandDTO";
  }
  protected:
  explicit StopOptimizationCommandDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRunIDFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .empowerops.volition.dto.UUIDDTO run_ID = 2;
  bool has_run_id() const;
  private:
  bool _internal_has_run_id() const;
  public:
  void clear_run_id();
  const ::empowerops::volition::dto::UUIDDTO& run_id() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::UUIDDTO* release_run_id();
  ::empowerops::volition::dto::UUIDDTO* mutable_run_id();
  void set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id);
  private:
  const ::empowerops::volition::dto::UUIDDTO& _internal_run_id() const;
  ::empowerops::volition::dto::UUIDDTO* _internal_mutable_run_id();
  public:
  void unsafe_arena_set_allocated_run_id(
      ::empowerops::volition::dto::UUIDDTO* run_id);
  ::empowerops::volition::dto::UUIDDTO* unsafe_arena_release_run_id();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.StopOptimizationCommandDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::empowerops::volition::dto::UUIDDTO* run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class StopOptimizationConfirmDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.StopOptimizationConfirmDTO) */ {
 public:
  inline StopOptimizationConfirmDTO() : StopOptimizationConfirmDTO(nullptr) {}
  ~StopOptimizationConfirmDTO() override;
  explicit constexpr StopOptimizationConfirmDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopOptimizationConfirmDTO(const StopOptimizationConfirmDTO& from);
  StopOptimizationConfirmDTO(StopOptimizationConfirmDTO&& from) noexcept
    : StopOptimizationConfirmDTO() {
    *this = ::std::move(from);
  }

  inline StopOptimizationConfirmDTO& operator=(const StopOptimizationConfirmDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopOptimizationConfirmDTO& operator=(StopOptimizationConfirmDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopOptimizationConfirmDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopOptimizationConfirmDTO* internal_default_instance() {
    return reinterpret_cast<const StopOptimizationConfirmDTO*>(
               &_StopOptimizationConfirmDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(StopOptimizationConfirmDTO& a, StopOptimizationConfirmDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(StopOptimizationConfirmDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopOptimizationConfirmDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopOptimizationConfirmDTO* New() const final {
    return new StopOptimizationConfirmDTO();
  }

  StopOptimizationConfirmDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopOptimizationConfirmDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopOptimizationConfirmDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopOptimizationConfirmDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopOptimizationConfirmDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.StopOptimizationConfirmDTO";
  }
  protected:
  explicit StopOptimizationConfirmDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIDFieldNumber = 2,
  };
  // .empowerops.volition.dto.UUIDDTO run_ID = 2;
  bool has_run_id() const;
  private:
  bool _internal_has_run_id() const;
  public:
  void clear_run_id();
  const ::empowerops::volition::dto::UUIDDTO& run_id() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::UUIDDTO* release_run_id();
  ::empowerops::volition::dto::UUIDDTO* mutable_run_id();
  void set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id);
  private:
  const ::empowerops::volition::dto::UUIDDTO& _internal_run_id() const;
  ::empowerops::volition::dto::UUIDDTO* _internal_mutable_run_id();
  public:
  void unsafe_arena_set_allocated_run_id(
      ::empowerops::volition::dto::UUIDDTO* run_id);
  ::empowerops::volition::dto::UUIDDTO* unsafe_arena_release_run_id();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.StopOptimizationConfirmDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::empowerops::volition::dto::UUIDDTO* run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OptimizationResultsQueryDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OptimizationResultsQueryDTO) */ {
 public:
  inline OptimizationResultsQueryDTO() : OptimizationResultsQueryDTO(nullptr) {}
  ~OptimizationResultsQueryDTO() override;
  explicit constexpr OptimizationResultsQueryDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizationResultsQueryDTO(const OptimizationResultsQueryDTO& from);
  OptimizationResultsQueryDTO(OptimizationResultsQueryDTO&& from) noexcept
    : OptimizationResultsQueryDTO() {
    *this = ::std::move(from);
  }

  inline OptimizationResultsQueryDTO& operator=(const OptimizationResultsQueryDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizationResultsQueryDTO& operator=(OptimizationResultsQueryDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizationResultsQueryDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizationResultsQueryDTO* internal_default_instance() {
    return reinterpret_cast<const OptimizationResultsQueryDTO*>(
               &_OptimizationResultsQueryDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(OptimizationResultsQueryDTO& a, OptimizationResultsQueryDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizationResultsQueryDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizationResultsQueryDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizationResultsQueryDTO* New() const final {
    return new OptimizationResultsQueryDTO();
  }

  OptimizationResultsQueryDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizationResultsQueryDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizationResultsQueryDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptimizationResultsQueryDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizationResultsQueryDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OptimizationResultsQueryDTO";
  }
  protected:
  explicit OptimizationResultsQueryDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIDFieldNumber = 2,
  };
  // .empowerops.volition.dto.UUIDDTO run_ID = 2;
  bool has_run_id() const;
  private:
  bool _internal_has_run_id() const;
  public:
  void clear_run_id();
  const ::empowerops::volition::dto::UUIDDTO& run_id() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::UUIDDTO* release_run_id();
  ::empowerops::volition::dto::UUIDDTO* mutable_run_id();
  void set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id);
  private:
  const ::empowerops::volition::dto::UUIDDTO& _internal_run_id() const;
  ::empowerops::volition::dto::UUIDDTO* _internal_mutable_run_id();
  public:
  void unsafe_arena_set_allocated_run_id(
      ::empowerops::volition::dto::UUIDDTO* run_id);
  ::empowerops::volition::dto::UUIDDTO* unsafe_arena_release_run_id();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OptimizationResultsQueryDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::empowerops::volition::dto::UUIDDTO* run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class OptimizationResultsResponseDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.OptimizationResultsResponseDTO) */ {
 public:
  inline OptimizationResultsResponseDTO() : OptimizationResultsResponseDTO(nullptr) {}
  ~OptimizationResultsResponseDTO() override;
  explicit constexpr OptimizationResultsResponseDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizationResultsResponseDTO(const OptimizationResultsResponseDTO& from);
  OptimizationResultsResponseDTO(OptimizationResultsResponseDTO&& from) noexcept
    : OptimizationResultsResponseDTO() {
    *this = ::std::move(from);
  }

  inline OptimizationResultsResponseDTO& operator=(const OptimizationResultsResponseDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizationResultsResponseDTO& operator=(OptimizationResultsResponseDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizationResultsResponseDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizationResultsResponseDTO* internal_default_instance() {
    return reinterpret_cast<const OptimizationResultsResponseDTO*>(
               &_OptimizationResultsResponseDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(OptimizationResultsResponseDTO& a, OptimizationResultsResponseDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizationResultsResponseDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizationResultsResponseDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizationResultsResponseDTO* New() const final {
    return new OptimizationResultsResponseDTO();
  }

  OptimizationResultsResponseDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizationResultsResponseDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizationResultsResponseDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptimizationResultsResponseDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizationResultsResponseDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.OptimizationResultsResponseDTO";
  }
  protected:
  explicit OptimizationResultsResponseDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputColumnsFieldNumber = 7,
    kOutputColumnsFieldNumber = 8,
    kPointsFieldNumber = 9,
    kRunIDFieldNumber = 1,
  };
  // repeated string input_columns = 7;
  int input_columns_size() const;
  private:
  int _internal_input_columns_size() const;
  public:
  void clear_input_columns();
  const std::string& input_columns(int index) const;
  std::string* mutable_input_columns(int index);
  void set_input_columns(int index, const std::string& value);
  void set_input_columns(int index, std::string&& value);
  void set_input_columns(int index, const char* value);
  void set_input_columns(int index, const char* value, size_t size);
  std::string* add_input_columns();
  void add_input_columns(const std::string& value);
  void add_input_columns(std::string&& value);
  void add_input_columns(const char* value);
  void add_input_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_columns();
  private:
  const std::string& _internal_input_columns(int index) const;
  std::string* _internal_add_input_columns();
  public:

  // repeated string output_columns = 8;
  int output_columns_size() const;
  private:
  int _internal_output_columns_size() const;
  public:
  void clear_output_columns();
  const std::string& output_columns(int index) const;
  std::string* mutable_output_columns(int index);
  void set_output_columns(int index, const std::string& value);
  void set_output_columns(int index, std::string&& value);
  void set_output_columns(int index, const char* value);
  void set_output_columns(int index, const char* value, size_t size);
  std::string* add_output_columns();
  void add_output_columns(const std::string& value);
  void add_output_columns(std::string&& value);
  void add_output_columns(const char* value);
  void add_output_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_columns();
  private:
  const std::string& _internal_output_columns(int index) const;
  std::string* _internal_add_output_columns();
  public:

  // repeated .empowerops.volition.dto.DesignRowDTO points = 9;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::empowerops::volition::dto::DesignRowDTO* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::DesignRowDTO >*
      mutable_points();
  private:
  const ::empowerops::volition::dto::DesignRowDTO& _internal_points(int index) const;
  ::empowerops::volition::dto::DesignRowDTO* _internal_add_points();
  public:
  const ::empowerops::volition::dto::DesignRowDTO& points(int index) const;
  ::empowerops::volition::dto::DesignRowDTO* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::DesignRowDTO >&
      points() const;

  // .empowerops.volition.dto.UUIDDTO run_ID = 1;
  bool has_run_id() const;
  private:
  bool _internal_has_run_id() const;
  public:
  void clear_run_id();
  const ::empowerops::volition::dto::UUIDDTO& run_id() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::UUIDDTO* release_run_id();
  ::empowerops::volition::dto::UUIDDTO* mutable_run_id();
  void set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id);
  private:
  const ::empowerops::volition::dto::UUIDDTO& _internal_run_id() const;
  ::empowerops::volition::dto::UUIDDTO* _internal_mutable_run_id();
  public:
  void unsafe_arena_set_allocated_run_id(
      ::empowerops::volition::dto::UUIDDTO* run_id);
  ::empowerops::volition::dto::UUIDDTO* unsafe_arena_release_run_id();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.OptimizationResultsResponseDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::DesignRowDTO > points_;
  ::empowerops::volition::dto::UUIDDTO* run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class InputParameterDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.InputParameterDTO) */ {
 public:
  inline InputParameterDTO() : InputParameterDTO(nullptr) {}
  ~InputParameterDTO() override;
  explicit constexpr InputParameterDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputParameterDTO(const InputParameterDTO& from);
  InputParameterDTO(InputParameterDTO&& from) noexcept
    : InputParameterDTO() {
    *this = ::std::move(from);
  }

  inline InputParameterDTO& operator=(const InputParameterDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputParameterDTO& operator=(InputParameterDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputParameterDTO& default_instance() {
    return *internal_default_instance();
  }
  enum DomainCase {
    kContinuous = 4,
    kDiscreteRange = 5,
    DOMAIN_NOT_SET = 0,
  };

  static inline const InputParameterDTO* internal_default_instance() {
    return reinterpret_cast<const InputParameterDTO*>(
               &_InputParameterDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(InputParameterDTO& a, InputParameterDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(InputParameterDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputParameterDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputParameterDTO* New() const final {
    return new InputParameterDTO();
  }

  InputParameterDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputParameterDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputParameterDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputParameterDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputParameterDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.InputParameterDTO";
  }
  protected:
  explicit InputParameterDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContinuousFieldNumber = 4,
    kDiscreteRangeFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .empowerops.volition.dto.ContinuousDTO continuous = 4;
  bool has_continuous() const;
  private:
  bool _internal_has_continuous() const;
  public:
  void clear_continuous();
  const ::empowerops::volition::dto::ContinuousDTO& continuous() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::ContinuousDTO* release_continuous();
  ::empowerops::volition::dto::ContinuousDTO* mutable_continuous();
  void set_allocated_continuous(::empowerops::volition::dto::ContinuousDTO* continuous);
  private:
  const ::empowerops::volition::dto::ContinuousDTO& _internal_continuous() const;
  ::empowerops::volition::dto::ContinuousDTO* _internal_mutable_continuous();
  public:
  void unsafe_arena_set_allocated_continuous(
      ::empowerops::volition::dto::ContinuousDTO* continuous);
  ::empowerops::volition::dto::ContinuousDTO* unsafe_arena_release_continuous();

  // .empowerops.volition.dto.DiscreteRangeDTO discrete_range = 5;
  bool has_discrete_range() const;
  private:
  bool _internal_has_discrete_range() const;
  public:
  void clear_discrete_range();
  const ::empowerops::volition::dto::DiscreteRangeDTO& discrete_range() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::DiscreteRangeDTO* release_discrete_range();
  ::empowerops::volition::dto::DiscreteRangeDTO* mutable_discrete_range();
  void set_allocated_discrete_range(::empowerops::volition::dto::DiscreteRangeDTO* discrete_range);
  private:
  const ::empowerops::volition::dto::DiscreteRangeDTO& _internal_discrete_range() const;
  ::empowerops::volition::dto::DiscreteRangeDTO* _internal_mutable_discrete_range();
  public:
  void unsafe_arena_set_allocated_discrete_range(
      ::empowerops::volition::dto::DiscreteRangeDTO* discrete_range);
  ::empowerops::volition::dto::DiscreteRangeDTO* unsafe_arena_release_discrete_range();

  void clear_domain();
  DomainCase domain_case() const;
  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.InputParameterDTO)
 private:
  class _Internal;
  void set_has_continuous();
  void set_has_discrete_range();

  inline bool has_domain() const;
  inline void clear_has_domain();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union DomainUnion {
    constexpr DomainUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::empowerops::volition::dto::ContinuousDTO* continuous_;
    ::empowerops::volition::dto::DiscreteRangeDTO* discrete_range_;
  } domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class ContinuousDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.ContinuousDTO) */ {
 public:
  inline ContinuousDTO() : ContinuousDTO(nullptr) {}
  ~ContinuousDTO() override;
  explicit constexpr ContinuousDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContinuousDTO(const ContinuousDTO& from);
  ContinuousDTO(ContinuousDTO&& from) noexcept
    : ContinuousDTO() {
    *this = ::std::move(from);
  }

  inline ContinuousDTO& operator=(const ContinuousDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContinuousDTO& operator=(ContinuousDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContinuousDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContinuousDTO* internal_default_instance() {
    return reinterpret_cast<const ContinuousDTO*>(
               &_ContinuousDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ContinuousDTO& a, ContinuousDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(ContinuousDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContinuousDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContinuousDTO* New() const final {
    return new ContinuousDTO();
  }

  ContinuousDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContinuousDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContinuousDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContinuousDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinuousDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.ContinuousDTO";
  }
  protected:
  explicit ContinuousDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerBoundFieldNumber = 2,
    kUpperBoundFieldNumber = 3,
  };
  // double lower_bound = 2;
  void clear_lower_bound();
  double lower_bound() const;
  void set_lower_bound(double value);
  private:
  double _internal_lower_bound() const;
  void _internal_set_lower_bound(double value);
  public:

  // double upper_bound = 3;
  void clear_upper_bound();
  double upper_bound() const;
  void set_upper_bound(double value);
  private:
  double _internal_upper_bound() const;
  void _internal_set_upper_bound(double value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.ContinuousDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lower_bound_;
  double upper_bound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class DiscreteRangeDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.DiscreteRangeDTO) */ {
 public:
  inline DiscreteRangeDTO() : DiscreteRangeDTO(nullptr) {}
  ~DiscreteRangeDTO() override;
  explicit constexpr DiscreteRangeDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscreteRangeDTO(const DiscreteRangeDTO& from);
  DiscreteRangeDTO(DiscreteRangeDTO&& from) noexcept
    : DiscreteRangeDTO() {
    *this = ::std::move(from);
  }

  inline DiscreteRangeDTO& operator=(const DiscreteRangeDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteRangeDTO& operator=(DiscreteRangeDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscreteRangeDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscreteRangeDTO* internal_default_instance() {
    return reinterpret_cast<const DiscreteRangeDTO*>(
               &_DiscreteRangeDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DiscreteRangeDTO& a, DiscreteRangeDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteRangeDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscreteRangeDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscreteRangeDTO* New() const final {
    return new DiscreteRangeDTO();
  }

  DiscreteRangeDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscreteRangeDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscreteRangeDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscreteRangeDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteRangeDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.DiscreteRangeDTO";
  }
  protected:
  explicit DiscreteRangeDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerBoundFieldNumber = 2,
    kUpperBoundFieldNumber = 3,
    kStepSizeFieldNumber = 4,
  };
  // double lower_bound = 2;
  void clear_lower_bound();
  double lower_bound() const;
  void set_lower_bound(double value);
  private:
  double _internal_lower_bound() const;
  void _internal_set_lower_bound(double value);
  public:

  // double upper_bound = 3;
  void clear_upper_bound();
  double upper_bound() const;
  void set_upper_bound(double value);
  private:
  double _internal_upper_bound() const;
  void _internal_set_upper_bound(double value);
  public:

  // double step_size = 4;
  void clear_step_size();
  double step_size() const;
  void set_step_size(double value);
  private:
  double _internal_step_size() const;
  void _internal_set_step_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.DiscreteRangeDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lower_bound_;
  double upper_bound_;
  double step_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class VariableMappingDTO_InputsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VariableMappingDTO_InputsEntry_DoNotUse, 
    std::string, ::empowerops::volition::dto::VariableNameDTO,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VariableMappingDTO_InputsEntry_DoNotUse, 
    std::string, ::empowerops::volition::dto::VariableNameDTO,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  VariableMappingDTO_InputsEntry_DoNotUse();
  explicit constexpr VariableMappingDTO_InputsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VariableMappingDTO_InputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VariableMappingDTO_InputsEntry_DoNotUse& other);
  static const VariableMappingDTO_InputsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VariableMappingDTO_InputsEntry_DoNotUse*>(&_VariableMappingDTO_InputsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "empowerops.volition.dto.VariableMappingDTO.InputsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class VariableMappingDTO_OutputsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VariableMappingDTO_OutputsEntry_DoNotUse, 
    std::string, ::empowerops::volition::dto::VariableNameDTO,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VariableMappingDTO_OutputsEntry_DoNotUse, 
    std::string, ::empowerops::volition::dto::VariableNameDTO,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  VariableMappingDTO_OutputsEntry_DoNotUse();
  explicit constexpr VariableMappingDTO_OutputsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VariableMappingDTO_OutputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VariableMappingDTO_OutputsEntry_DoNotUse& other);
  static const VariableMappingDTO_OutputsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VariableMappingDTO_OutputsEntry_DoNotUse*>(&_VariableMappingDTO_OutputsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "empowerops.volition.dto.VariableMappingDTO.OutputsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class VariableMappingDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.VariableMappingDTO) */ {
 public:
  inline VariableMappingDTO() : VariableMappingDTO(nullptr) {}
  ~VariableMappingDTO() override;
  explicit constexpr VariableMappingDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableMappingDTO(const VariableMappingDTO& from);
  VariableMappingDTO(VariableMappingDTO&& from) noexcept
    : VariableMappingDTO() {
    *this = ::std::move(from);
  }

  inline VariableMappingDTO& operator=(const VariableMappingDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableMappingDTO& operator=(VariableMappingDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableMappingDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableMappingDTO* internal_default_instance() {
    return reinterpret_cast<const VariableMappingDTO*>(
               &_VariableMappingDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(VariableMappingDTO& a, VariableMappingDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableMappingDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableMappingDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableMappingDTO* New() const final {
    return new VariableMappingDTO();
  }

  VariableMappingDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableMappingDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableMappingDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VariableMappingDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableMappingDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.VariableMappingDTO";
  }
  protected:
  explicit VariableMappingDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
  };
  // map<string, .empowerops.volition.dto.VariableNameDTO> inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >&
      _internal_inputs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >*
      _internal_mutable_inputs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >&
      inputs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >*
      mutable_inputs();

  // map<string, .empowerops.volition.dto.VariableNameDTO> outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >&
      _internal_outputs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >*
      _internal_mutable_outputs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >&
      outputs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >*
      mutable_outputs();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.VariableMappingDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VariableMappingDTO_InputsEntry_DoNotUse,
      std::string, ::empowerops::volition::dto::VariableNameDTO,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VariableMappingDTO_OutputsEntry_DoNotUse,
      std::string, ::empowerops::volition::dto::VariableNameDTO,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class BabelConstraintNodeDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.BabelConstraintNodeDTO) */ {
 public:
  inline BabelConstraintNodeDTO() : BabelConstraintNodeDTO(nullptr) {}
  ~BabelConstraintNodeDTO() override;
  explicit constexpr BabelConstraintNodeDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BabelConstraintNodeDTO(const BabelConstraintNodeDTO& from);
  BabelConstraintNodeDTO(BabelConstraintNodeDTO&& from) noexcept
    : BabelConstraintNodeDTO() {
    *this = ::std::move(from);
  }

  inline BabelConstraintNodeDTO& operator=(const BabelConstraintNodeDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline BabelConstraintNodeDTO& operator=(BabelConstraintNodeDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BabelConstraintNodeDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const BabelConstraintNodeDTO* internal_default_instance() {
    return reinterpret_cast<const BabelConstraintNodeDTO*>(
               &_BabelConstraintNodeDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(BabelConstraintNodeDTO& a, BabelConstraintNodeDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(BabelConstraintNodeDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BabelConstraintNodeDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BabelConstraintNodeDTO* New() const final {
    return new BabelConstraintNodeDTO();
  }

  BabelConstraintNodeDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BabelConstraintNodeDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BabelConstraintNodeDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BabelConstraintNodeDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BabelConstraintNodeDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.BabelConstraintNodeDTO";
  }
  protected:
  explicit BabelConstraintNodeDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputNameFieldNumber = 1,
    kBooleanExpressionFieldNumber = 2,
  };
  // string output_name = 1;
  void clear_output_name();
  const std::string& output_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_name();
  void set_allocated_output_name(std::string* output_name);
  private:
  const std::string& _internal_output_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_name(const std::string& value);
  std::string* _internal_mutable_output_name();
  public:

  // string boolean_expression = 2;
  void clear_boolean_expression();
  const std::string& boolean_expression() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boolean_expression(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boolean_expression();
  PROTOBUF_MUST_USE_RESULT std::string* release_boolean_expression();
  void set_allocated_boolean_expression(std::string* boolean_expression);
  private:
  const std::string& _internal_boolean_expression() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boolean_expression(const std::string& value);
  std::string* _internal_mutable_boolean_expression();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.BabelConstraintNodeDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boolean_expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class BabelScalarNodeDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.BabelScalarNodeDTO) */ {
 public:
  inline BabelScalarNodeDTO() : BabelScalarNodeDTO(nullptr) {}
  ~BabelScalarNodeDTO() override;
  explicit constexpr BabelScalarNodeDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BabelScalarNodeDTO(const BabelScalarNodeDTO& from);
  BabelScalarNodeDTO(BabelScalarNodeDTO&& from) noexcept
    : BabelScalarNodeDTO() {
    *this = ::std::move(from);
  }

  inline BabelScalarNodeDTO& operator=(const BabelScalarNodeDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline BabelScalarNodeDTO& operator=(BabelScalarNodeDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BabelScalarNodeDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const BabelScalarNodeDTO* internal_default_instance() {
    return reinterpret_cast<const BabelScalarNodeDTO*>(
               &_BabelScalarNodeDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(BabelScalarNodeDTO& a, BabelScalarNodeDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(BabelScalarNodeDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BabelScalarNodeDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BabelScalarNodeDTO* New() const final {
    return new BabelScalarNodeDTO();
  }

  BabelScalarNodeDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BabelScalarNodeDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BabelScalarNodeDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BabelScalarNodeDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BabelScalarNodeDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.BabelScalarNodeDTO";
  }
  protected:
  explicit BabelScalarNodeDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputNameFieldNumber = 1,
    kScalarExpressionFieldNumber = 2,
  };
  // string output_name = 1;
  void clear_output_name();
  const std::string& output_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_name();
  void set_allocated_output_name(std::string* output_name);
  private:
  const std::string& _internal_output_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_name(const std::string& value);
  std::string* _internal_mutable_output_name();
  public:

  // string scalar_expression = 2;
  void clear_scalar_expression();
  const std::string& scalar_expression() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scalar_expression(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scalar_expression();
  PROTOBUF_MUST_USE_RESULT std::string* release_scalar_expression();
  void set_allocated_scalar_expression(std::string* scalar_expression);
  private:
  const std::string& _internal_scalar_expression() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scalar_expression(const std::string& value);
  std::string* _internal_mutable_scalar_expression();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.BabelScalarNodeDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scalar_expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class SeedRowDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.SeedRowDTO) */ {
 public:
  inline SeedRowDTO() : SeedRowDTO(nullptr) {}
  ~SeedRowDTO() override;
  explicit constexpr SeedRowDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeedRowDTO(const SeedRowDTO& from);
  SeedRowDTO(SeedRowDTO&& from) noexcept
    : SeedRowDTO() {
    *this = ::std::move(from);
  }

  inline SeedRowDTO& operator=(const SeedRowDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeedRowDTO& operator=(SeedRowDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeedRowDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeedRowDTO* internal_default_instance() {
    return reinterpret_cast<const SeedRowDTO*>(
               &_SeedRowDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SeedRowDTO& a, SeedRowDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(SeedRowDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeedRowDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeedRowDTO* New() const final {
    return new SeedRowDTO();
  }

  SeedRowDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeedRowDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeedRowDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SeedRowDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeedRowDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.SeedRowDTO";
  }
  protected:
  explicit SeedRowDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
  };
  // repeated double inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  private:
  double _internal_inputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_inputs() const;
  void _internal_add_inputs(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_inputs();
  public:
  double inputs(int index) const;
  void set_inputs(int index, double value);
  void add_inputs(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_inputs();

  // repeated double outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  private:
  double _internal_outputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_outputs() const;
  void _internal_add_outputs(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_outputs();
  public:
  double outputs(int index) const;
  void set_outputs(int index, double value);
  void add_outputs(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      outputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_outputs();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.SeedRowDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class DesignRowDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.DesignRowDTO) */ {
 public:
  inline DesignRowDTO() : DesignRowDTO(nullptr) {}
  ~DesignRowDTO() override;
  explicit constexpr DesignRowDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DesignRowDTO(const DesignRowDTO& from);
  DesignRowDTO(DesignRowDTO&& from) noexcept
    : DesignRowDTO() {
    *this = ::std::move(from);
  }

  inline DesignRowDTO& operator=(const DesignRowDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline DesignRowDTO& operator=(DesignRowDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DesignRowDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const DesignRowDTO* internal_default_instance() {
    return reinterpret_cast<const DesignRowDTO*>(
               &_DesignRowDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(DesignRowDTO& a, DesignRowDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(DesignRowDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DesignRowDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DesignRowDTO* New() const final {
    return new DesignRowDTO();
  }

  DesignRowDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DesignRowDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DesignRowDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DesignRowDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DesignRowDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.DesignRowDTO";
  }
  protected:
  explicit DesignRowDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
    kIsFeasibleFieldNumber = 3,
    kIsFrontierFieldNumber = 4,
  };
  // repeated double inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  private:
  double _internal_inputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_inputs() const;
  void _internal_add_inputs(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_inputs();
  public:
  double inputs(int index) const;
  void set_inputs(int index, double value);
  void add_inputs(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_inputs();

  // repeated double outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  private:
  double _internal_outputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_outputs() const;
  void _internal_add_outputs(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_outputs();
  public:
  double outputs(int index) const;
  void set_outputs(int index, double value);
  void add_outputs(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      outputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_outputs();

  // bool is_feasible = 3;
  void clear_is_feasible();
  bool is_feasible() const;
  void set_is_feasible(bool value);
  private:
  bool _internal_is_feasible() const;
  void _internal_set_is_feasible(bool value);
  public:

  // bool is_frontier = 4;
  void clear_is_frontier();
  bool is_frontier() const;
  void set_is_frontier(bool value);
  private:
  bool _internal_is_frontier() const;
  void _internal_set_is_frontier(bool value);
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.DesignRowDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > outputs_;
  bool is_feasible_;
  bool is_frontier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class UUIDDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.UUIDDTO) */ {
 public:
  inline UUIDDTO() : UUIDDTO(nullptr) {}
  ~UUIDDTO() override;
  explicit constexpr UUIDDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUIDDTO(const UUIDDTO& from);
  UUIDDTO(UUIDDTO&& from) noexcept
    : UUIDDTO() {
    *this = ::std::move(from);
  }

  inline UUIDDTO& operator=(const UUIDDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUIDDTO& operator=(UUIDDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUIDDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUIDDTO* internal_default_instance() {
    return reinterpret_cast<const UUIDDTO*>(
               &_UUIDDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UUIDDTO& a, UUIDDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(UUIDDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUIDDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUIDDTO* New() const final {
    return new UUIDDTO();
  }

  UUIDDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUIDDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UUIDDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UUIDDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUIDDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.UUIDDTO";
  }
  protected:
  explicit UUIDDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.UUIDDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class PathDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.PathDTO) */ {
 public:
  inline PathDTO() : PathDTO(nullptr) {}
  ~PathDTO() override;
  explicit constexpr PathDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathDTO(const PathDTO& from);
  PathDTO(PathDTO&& from) noexcept
    : PathDTO() {
    *this = ::std::move(from);
  }

  inline PathDTO& operator=(const PathDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathDTO& operator=(PathDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathDTO* internal_default_instance() {
    return reinterpret_cast<const PathDTO*>(
               &_PathDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(PathDTO& a, PathDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(PathDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathDTO* New() const final {
    return new PathDTO();
  }

  PathDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.PathDTO";
  }
  protected:
  explicit PathDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.PathDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class ErrorResponseDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.ErrorResponseDTO) */ {
 public:
  inline ErrorResponseDTO() : ErrorResponseDTO(nullptr) {}
  ~ErrorResponseDTO() override;
  explicit constexpr ErrorResponseDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorResponseDTO(const ErrorResponseDTO& from);
  ErrorResponseDTO(ErrorResponseDTO&& from) noexcept
    : ErrorResponseDTO() {
    *this = ::std::move(from);
  }

  inline ErrorResponseDTO& operator=(const ErrorResponseDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorResponseDTO& operator=(ErrorResponseDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorResponseDTO& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kInternalError = 1,
    kNoSuchOptimizationRun = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const ErrorResponseDTO* internal_default_instance() {
    return reinterpret_cast<const ErrorResponseDTO*>(
               &_ErrorResponseDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ErrorResponseDTO& a, ErrorResponseDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorResponseDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorResponseDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorResponseDTO* New() const final {
    return new ErrorResponseDTO();
  }

  ErrorResponseDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorResponseDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorResponseDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ErrorResponseDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorResponseDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.ErrorResponseDTO";
  }
  protected:
  explicit ErrorResponseDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalErrorFieldNumber = 1,
    kNoSuchOptimizationRunFieldNumber = 2,
  };
  // .empowerops.volition.dto.InternalErrorDTO internal_error = 1;
  bool has_internal_error() const;
  private:
  bool _internal_has_internal_error() const;
  public:
  void clear_internal_error();
  const ::empowerops::volition::dto::InternalErrorDTO& internal_error() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::InternalErrorDTO* release_internal_error();
  ::empowerops::volition::dto::InternalErrorDTO* mutable_internal_error();
  void set_allocated_internal_error(::empowerops::volition::dto::InternalErrorDTO* internal_error);
  private:
  const ::empowerops::volition::dto::InternalErrorDTO& _internal_internal_error() const;
  ::empowerops::volition::dto::InternalErrorDTO* _internal_mutable_internal_error();
  public:
  void unsafe_arena_set_allocated_internal_error(
      ::empowerops::volition::dto::InternalErrorDTO* internal_error);
  ::empowerops::volition::dto::InternalErrorDTO* unsafe_arena_release_internal_error();

  // .empowerops.volition.dto.NoSuchOptimizationRunDTO no_such_optimization_run = 2;
  bool has_no_such_optimization_run() const;
  private:
  bool _internal_has_no_such_optimization_run() const;
  public:
  void clear_no_such_optimization_run();
  const ::empowerops::volition::dto::NoSuchOptimizationRunDTO& no_such_optimization_run() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::NoSuchOptimizationRunDTO* release_no_such_optimization_run();
  ::empowerops::volition::dto::NoSuchOptimizationRunDTO* mutable_no_such_optimization_run();
  void set_allocated_no_such_optimization_run(::empowerops::volition::dto::NoSuchOptimizationRunDTO* no_such_optimization_run);
  private:
  const ::empowerops::volition::dto::NoSuchOptimizationRunDTO& _internal_no_such_optimization_run() const;
  ::empowerops::volition::dto::NoSuchOptimizationRunDTO* _internal_mutable_no_such_optimization_run();
  public:
  void unsafe_arena_set_allocated_no_such_optimization_run(
      ::empowerops::volition::dto::NoSuchOptimizationRunDTO* no_such_optimization_run);
  ::empowerops::volition::dto::NoSuchOptimizationRunDTO* unsafe_arena_release_no_such_optimization_run();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.ErrorResponseDTO)
 private:
  class _Internal;
  void set_has_internal_error();
  void set_has_no_such_optimization_run();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::empowerops::volition::dto::InternalErrorDTO* internal_error_;
    ::empowerops::volition::dto::NoSuchOptimizationRunDTO* no_such_optimization_run_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class InternalErrorDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.InternalErrorDTO) */ {
 public:
  inline InternalErrorDTO() : InternalErrorDTO(nullptr) {}
  ~InternalErrorDTO() override;
  explicit constexpr InternalErrorDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalErrorDTO(const InternalErrorDTO& from);
  InternalErrorDTO(InternalErrorDTO&& from) noexcept
    : InternalErrorDTO() {
    *this = ::std::move(from);
  }

  inline InternalErrorDTO& operator=(const InternalErrorDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalErrorDTO& operator=(InternalErrorDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalErrorDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalErrorDTO* internal_default_instance() {
    return reinterpret_cast<const InternalErrorDTO*>(
               &_InternalErrorDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(InternalErrorDTO& a, InternalErrorDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalErrorDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalErrorDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalErrorDTO* New() const final {
    return new InternalErrorDTO();
  }

  InternalErrorDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalErrorDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalErrorDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InternalErrorDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalErrorDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.InternalErrorDTO";
  }
  protected:
  explicit InternalErrorDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kTraceFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string trace = 2;
  void clear_trace();
  const std::string& trace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trace();
  PROTOBUF_MUST_USE_RESULT std::string* release_trace();
  void set_allocated_trace(std::string* trace);
  private:
  const std::string& _internal_trace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace(const std::string& value);
  std::string* _internal_mutable_trace();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.InternalErrorDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class NoSuchOptimizationRunDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.NoSuchOptimizationRunDTO) */ {
 public:
  inline NoSuchOptimizationRunDTO() : NoSuchOptimizationRunDTO(nullptr) {}
  ~NoSuchOptimizationRunDTO() override;
  explicit constexpr NoSuchOptimizationRunDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoSuchOptimizationRunDTO(const NoSuchOptimizationRunDTO& from);
  NoSuchOptimizationRunDTO(NoSuchOptimizationRunDTO&& from) noexcept
    : NoSuchOptimizationRunDTO() {
    *this = ::std::move(from);
  }

  inline NoSuchOptimizationRunDTO& operator=(const NoSuchOptimizationRunDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoSuchOptimizationRunDTO& operator=(NoSuchOptimizationRunDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoSuchOptimizationRunDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoSuchOptimizationRunDTO* internal_default_instance() {
    return reinterpret_cast<const NoSuchOptimizationRunDTO*>(
               &_NoSuchOptimizationRunDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(NoSuchOptimizationRunDTO& a, NoSuchOptimizationRunDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(NoSuchOptimizationRunDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoSuchOptimizationRunDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoSuchOptimizationRunDTO* New() const final {
    return new NoSuchOptimizationRunDTO();
  }

  NoSuchOptimizationRunDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoSuchOptimizationRunDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoSuchOptimizationRunDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NoSuchOptimizationRunDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoSuchOptimizationRunDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.NoSuchOptimizationRunDTO";
  }
  protected:
  explicit NoSuchOptimizationRunDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIDFieldNumber = 1,
  };
  // .empowerops.volition.dto.UUIDDTO run_ID = 1;
  bool has_run_id() const;
  private:
  bool _internal_has_run_id() const;
  public:
  void clear_run_id();
  const ::empowerops::volition::dto::UUIDDTO& run_id() const;
  PROTOBUF_MUST_USE_RESULT ::empowerops::volition::dto::UUIDDTO* release_run_id();
  ::empowerops::volition::dto::UUIDDTO* mutable_run_id();
  void set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id);
  private:
  const ::empowerops::volition::dto::UUIDDTO& _internal_run_id() const;
  ::empowerops::volition::dto::UUIDDTO* _internal_mutable_run_id();
  public:
  void unsafe_arena_set_allocated_run_id(
      ::empowerops::volition::dto::UUIDDTO* run_id);
  ::empowerops::volition::dto::UUIDDTO* unsafe_arena_release_run_id();

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.NoSuchOptimizationRunDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::empowerops::volition::dto::UUIDDTO* run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// -------------------------------------------------------------------

class VariableNameDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empowerops.volition.dto.VariableNameDTO) */ {
 public:
  inline VariableNameDTO() : VariableNameDTO(nullptr) {}
  ~VariableNameDTO() override;
  explicit constexpr VariableNameDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableNameDTO(const VariableNameDTO& from);
  VariableNameDTO(VariableNameDTO&& from) noexcept
    : VariableNameDTO() {
    *this = ::std::move(from);
  }

  inline VariableNameDTO& operator=(const VariableNameDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableNameDTO& operator=(VariableNameDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableNameDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableNameDTO* internal_default_instance() {
    return reinterpret_cast<const VariableNameDTO*>(
               &_VariableNameDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(VariableNameDTO& a, VariableNameDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableNameDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableNameDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableNameDTO* New() const final {
    return new VariableNameDTO();
  }

  VariableNameDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableNameDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableNameDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VariableNameDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableNameDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empowerops.volition.dto.VariableNameDTO";
  }
  protected:
  explicit VariableNameDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:empowerops.volition.dto.VariableNameDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_optimizer_2eproto;
};
// ===================================================================

static const int kPotentialMessageSizeFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  potential_message_size;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartOptimizationCommandDTO

// .empowerops.volition.dto.ProblemDefinitionDTO problem_definition = 1;
inline bool StartOptimizationCommandDTO::_internal_has_problem_definition() const {
  return this != internal_default_instance() && problem_definition_ != nullptr;
}
inline bool StartOptimizationCommandDTO::has_problem_definition() const {
  return _internal_has_problem_definition();
}
inline void StartOptimizationCommandDTO::clear_problem_definition() {
  if (GetArenaForAllocation() == nullptr && problem_definition_ != nullptr) {
    delete problem_definition_;
  }
  problem_definition_ = nullptr;
}
inline const ::empowerops::volition::dto::ProblemDefinitionDTO& StartOptimizationCommandDTO::_internal_problem_definition() const {
  const ::empowerops::volition::dto::ProblemDefinitionDTO* p = problem_definition_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::ProblemDefinitionDTO&>(
      ::empowerops::volition::dto::_ProblemDefinitionDTO_default_instance_);
}
inline const ::empowerops::volition::dto::ProblemDefinitionDTO& StartOptimizationCommandDTO::problem_definition() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.StartOptimizationCommandDTO.problem_definition)
  return _internal_problem_definition();
}
inline void StartOptimizationCommandDTO::unsafe_arena_set_allocated_problem_definition(
    ::empowerops::volition::dto::ProblemDefinitionDTO* problem_definition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(problem_definition_);
  }
  problem_definition_ = problem_definition;
  if (problem_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.StartOptimizationCommandDTO.problem_definition)
}
inline ::empowerops::volition::dto::ProblemDefinitionDTO* StartOptimizationCommandDTO::release_problem_definition() {
  
  ::empowerops::volition::dto::ProblemDefinitionDTO* temp = problem_definition_;
  problem_definition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::ProblemDefinitionDTO* StartOptimizationCommandDTO::unsafe_arena_release_problem_definition() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.StartOptimizationCommandDTO.problem_definition)
  
  ::empowerops::volition::dto::ProblemDefinitionDTO* temp = problem_definition_;
  problem_definition_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::ProblemDefinitionDTO* StartOptimizationCommandDTO::_internal_mutable_problem_definition() {
  
  if (problem_definition_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::ProblemDefinitionDTO>(GetArenaForAllocation());
    problem_definition_ = p;
  }
  return problem_definition_;
}
inline ::empowerops::volition::dto::ProblemDefinitionDTO* StartOptimizationCommandDTO::mutable_problem_definition() {
  ::empowerops::volition::dto::ProblemDefinitionDTO* _msg = _internal_mutable_problem_definition();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.StartOptimizationCommandDTO.problem_definition)
  return _msg;
}
inline void StartOptimizationCommandDTO::set_allocated_problem_definition(::empowerops::volition::dto::ProblemDefinitionDTO* problem_definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete problem_definition_;
  }
  if (problem_definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::ProblemDefinitionDTO>::GetOwningArena(problem_definition);
    if (message_arena != submessage_arena) {
      problem_definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, problem_definition, submessage_arena);
    }
    
  } else {
    
  }
  problem_definition_ = problem_definition;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.StartOptimizationCommandDTO.problem_definition)
}

// .empowerops.volition.dto.OptimizationSettingsDTO settings = 3;
inline bool StartOptimizationCommandDTO::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool StartOptimizationCommandDTO::has_settings() const {
  return _internal_has_settings();
}
inline void StartOptimizationCommandDTO::clear_settings() {
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::empowerops::volition::dto::OptimizationSettingsDTO& StartOptimizationCommandDTO::_internal_settings() const {
  const ::empowerops::volition::dto::OptimizationSettingsDTO* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::OptimizationSettingsDTO&>(
      ::empowerops::volition::dto::_OptimizationSettingsDTO_default_instance_);
}
inline const ::empowerops::volition::dto::OptimizationSettingsDTO& StartOptimizationCommandDTO::settings() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.StartOptimizationCommandDTO.settings)
  return _internal_settings();
}
inline void StartOptimizationCommandDTO::unsafe_arena_set_allocated_settings(
    ::empowerops::volition::dto::OptimizationSettingsDTO* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.StartOptimizationCommandDTO.settings)
}
inline ::empowerops::volition::dto::OptimizationSettingsDTO* StartOptimizationCommandDTO::release_settings() {
  
  ::empowerops::volition::dto::OptimizationSettingsDTO* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::OptimizationSettingsDTO* StartOptimizationCommandDTO::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.StartOptimizationCommandDTO.settings)
  
  ::empowerops::volition::dto::OptimizationSettingsDTO* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::OptimizationSettingsDTO* StartOptimizationCommandDTO::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::OptimizationSettingsDTO>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::empowerops::volition::dto::OptimizationSettingsDTO* StartOptimizationCommandDTO::mutable_settings() {
  ::empowerops::volition::dto::OptimizationSettingsDTO* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.StartOptimizationCommandDTO.settings)
  return _msg;
}
inline void StartOptimizationCommandDTO::set_allocated_settings(::empowerops::volition::dto::OptimizationSettingsDTO* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::OptimizationSettingsDTO>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.StartOptimizationCommandDTO.settings)
}

// repeated .empowerops.volition.dto.SeedRowDTO seed_points = 4;
inline int StartOptimizationCommandDTO::_internal_seed_points_size() const {
  return seed_points_.size();
}
inline int StartOptimizationCommandDTO::seed_points_size() const {
  return _internal_seed_points_size();
}
inline void StartOptimizationCommandDTO::clear_seed_points() {
  seed_points_.Clear();
}
inline ::empowerops::volition::dto::SeedRowDTO* StartOptimizationCommandDTO::mutable_seed_points(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.StartOptimizationCommandDTO.seed_points)
  return seed_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SeedRowDTO >*
StartOptimizationCommandDTO::mutable_seed_points() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.StartOptimizationCommandDTO.seed_points)
  return &seed_points_;
}
inline const ::empowerops::volition::dto::SeedRowDTO& StartOptimizationCommandDTO::_internal_seed_points(int index) const {
  return seed_points_.Get(index);
}
inline const ::empowerops::volition::dto::SeedRowDTO& StartOptimizationCommandDTO::seed_points(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.StartOptimizationCommandDTO.seed_points)
  return _internal_seed_points(index);
}
inline ::empowerops::volition::dto::SeedRowDTO* StartOptimizationCommandDTO::_internal_add_seed_points() {
  return seed_points_.Add();
}
inline ::empowerops::volition::dto::SeedRowDTO* StartOptimizationCommandDTO::add_seed_points() {
  ::empowerops::volition::dto::SeedRowDTO* _add = _internal_add_seed_points();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.StartOptimizationCommandDTO.seed_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SeedRowDTO >&
StartOptimizationCommandDTO::seed_points() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.StartOptimizationCommandDTO.seed_points)
  return seed_points_;
}

// -------------------------------------------------------------------

// ProblemDefinitionDTO

// repeated .empowerops.volition.dto.InputParameterDTO inputs = 1;
inline int ProblemDefinitionDTO::_internal_inputs_size() const {
  return inputs_.size();
}
inline int ProblemDefinitionDTO::inputs_size() const {
  return _internal_inputs_size();
}
inline void ProblemDefinitionDTO::clear_inputs() {
  inputs_.Clear();
}
inline ::empowerops::volition::dto::InputParameterDTO* ProblemDefinitionDTO::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ProblemDefinitionDTO.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDTO >*
ProblemDefinitionDTO::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.ProblemDefinitionDTO.inputs)
  return &inputs_;
}
inline const ::empowerops::volition::dto::InputParameterDTO& ProblemDefinitionDTO::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::empowerops::volition::dto::InputParameterDTO& ProblemDefinitionDTO::inputs(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ProblemDefinitionDTO.inputs)
  return _internal_inputs(index);
}
inline ::empowerops::volition::dto::InputParameterDTO* ProblemDefinitionDTO::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::empowerops::volition::dto::InputParameterDTO* ProblemDefinitionDTO::add_inputs() {
  ::empowerops::volition::dto::InputParameterDTO* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.ProblemDefinitionDTO.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDTO >&
ProblemDefinitionDTO::inputs() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.ProblemDefinitionDTO.inputs)
  return inputs_;
}

// repeated .empowerops.volition.dto.EvaluableNodeDTO evaluables = 2;
inline int ProblemDefinitionDTO::_internal_evaluables_size() const {
  return evaluables_.size();
}
inline int ProblemDefinitionDTO::evaluables_size() const {
  return _internal_evaluables_size();
}
inline void ProblemDefinitionDTO::clear_evaluables() {
  evaluables_.Clear();
}
inline ::empowerops::volition::dto::EvaluableNodeDTO* ProblemDefinitionDTO::mutable_evaluables(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ProblemDefinitionDTO.evaluables)
  return evaluables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::EvaluableNodeDTO >*
ProblemDefinitionDTO::mutable_evaluables() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.ProblemDefinitionDTO.evaluables)
  return &evaluables_;
}
inline const ::empowerops::volition::dto::EvaluableNodeDTO& ProblemDefinitionDTO::_internal_evaluables(int index) const {
  return evaluables_.Get(index);
}
inline const ::empowerops::volition::dto::EvaluableNodeDTO& ProblemDefinitionDTO::evaluables(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ProblemDefinitionDTO.evaluables)
  return _internal_evaluables(index);
}
inline ::empowerops::volition::dto::EvaluableNodeDTO* ProblemDefinitionDTO::_internal_add_evaluables() {
  return evaluables_.Add();
}
inline ::empowerops::volition::dto::EvaluableNodeDTO* ProblemDefinitionDTO::add_evaluables() {
  ::empowerops::volition::dto::EvaluableNodeDTO* _add = _internal_add_evaluables();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.ProblemDefinitionDTO.evaluables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::EvaluableNodeDTO >&
ProblemDefinitionDTO::evaluables() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.ProblemDefinitionDTO.evaluables)
  return evaluables_;
}

// -------------------------------------------------------------------

// EvaluableNodeDTO

// .empowerops.volition.dto.BabelScalarNodeDTO transform = 2;
inline bool EvaluableNodeDTO::_internal_has_transform() const {
  return value_case() == kTransform;
}
inline bool EvaluableNodeDTO::has_transform() const {
  return _internal_has_transform();
}
inline void EvaluableNodeDTO::set_has_transform() {
  _oneof_case_[0] = kTransform;
}
inline void EvaluableNodeDTO::clear_transform() {
  if (_internal_has_transform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.transform_;
    }
    clear_has_value();
  }
}
inline ::empowerops::volition::dto::BabelScalarNodeDTO* EvaluableNodeDTO::release_transform() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.EvaluableNodeDTO.transform)
  if (_internal_has_transform()) {
    clear_has_value();
      ::empowerops::volition::dto::BabelScalarNodeDTO* temp = value_.transform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::BabelScalarNodeDTO& EvaluableNodeDTO::_internal_transform() const {
  return _internal_has_transform()
      ? *value_.transform_
      : reinterpret_cast< ::empowerops::volition::dto::BabelScalarNodeDTO&>(::empowerops::volition::dto::_BabelScalarNodeDTO_default_instance_);
}
inline const ::empowerops::volition::dto::BabelScalarNodeDTO& EvaluableNodeDTO::transform() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.EvaluableNodeDTO.transform)
  return _internal_transform();
}
inline ::empowerops::volition::dto::BabelScalarNodeDTO* EvaluableNodeDTO::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.EvaluableNodeDTO.transform)
  if (_internal_has_transform()) {
    clear_has_value();
    ::empowerops::volition::dto::BabelScalarNodeDTO* temp = value_.transform_;
    value_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EvaluableNodeDTO::unsafe_arena_set_allocated_transform(::empowerops::volition::dto::BabelScalarNodeDTO* transform) {
  clear_value();
  if (transform) {
    set_has_transform();
    value_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.EvaluableNodeDTO.transform)
}
inline ::empowerops::volition::dto::BabelScalarNodeDTO* EvaluableNodeDTO::_internal_mutable_transform() {
  if (!_internal_has_transform()) {
    clear_value();
    set_has_transform();
    value_.transform_ = CreateMaybeMessage< ::empowerops::volition::dto::BabelScalarNodeDTO >(GetArenaForAllocation());
  }
  return value_.transform_;
}
inline ::empowerops::volition::dto::BabelScalarNodeDTO* EvaluableNodeDTO::mutable_transform() {
  ::empowerops::volition::dto::BabelScalarNodeDTO* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.EvaluableNodeDTO.transform)
  return _msg;
}

// .empowerops.volition.dto.SimulationNodeDTO simulation = 3;
inline bool EvaluableNodeDTO::_internal_has_simulation() const {
  return value_case() == kSimulation;
}
inline bool EvaluableNodeDTO::has_simulation() const {
  return _internal_has_simulation();
}
inline void EvaluableNodeDTO::set_has_simulation() {
  _oneof_case_[0] = kSimulation;
}
inline void EvaluableNodeDTO::clear_simulation() {
  if (_internal_has_simulation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.simulation_;
    }
    clear_has_value();
  }
}
inline ::empowerops::volition::dto::SimulationNodeDTO* EvaluableNodeDTO::release_simulation() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.EvaluableNodeDTO.simulation)
  if (_internal_has_simulation()) {
    clear_has_value();
      ::empowerops::volition::dto::SimulationNodeDTO* temp = value_.simulation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.simulation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::SimulationNodeDTO& EvaluableNodeDTO::_internal_simulation() const {
  return _internal_has_simulation()
      ? *value_.simulation_
      : reinterpret_cast< ::empowerops::volition::dto::SimulationNodeDTO&>(::empowerops::volition::dto::_SimulationNodeDTO_default_instance_);
}
inline const ::empowerops::volition::dto::SimulationNodeDTO& EvaluableNodeDTO::simulation() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.EvaluableNodeDTO.simulation)
  return _internal_simulation();
}
inline ::empowerops::volition::dto::SimulationNodeDTO* EvaluableNodeDTO::unsafe_arena_release_simulation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.EvaluableNodeDTO.simulation)
  if (_internal_has_simulation()) {
    clear_has_value();
    ::empowerops::volition::dto::SimulationNodeDTO* temp = value_.simulation_;
    value_.simulation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EvaluableNodeDTO::unsafe_arena_set_allocated_simulation(::empowerops::volition::dto::SimulationNodeDTO* simulation) {
  clear_value();
  if (simulation) {
    set_has_simulation();
    value_.simulation_ = simulation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.EvaluableNodeDTO.simulation)
}
inline ::empowerops::volition::dto::SimulationNodeDTO* EvaluableNodeDTO::_internal_mutable_simulation() {
  if (!_internal_has_simulation()) {
    clear_value();
    set_has_simulation();
    value_.simulation_ = CreateMaybeMessage< ::empowerops::volition::dto::SimulationNodeDTO >(GetArenaForAllocation());
  }
  return value_.simulation_;
}
inline ::empowerops::volition::dto::SimulationNodeDTO* EvaluableNodeDTO::mutable_simulation() {
  ::empowerops::volition::dto::SimulationNodeDTO* _msg = _internal_mutable_simulation();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.EvaluableNodeDTO.simulation)
  return _msg;
}

// .empowerops.volition.dto.BabelConstraintNodeDTO constraint = 4;
inline bool EvaluableNodeDTO::_internal_has_constraint() const {
  return value_case() == kConstraint;
}
inline bool EvaluableNodeDTO::has_constraint() const {
  return _internal_has_constraint();
}
inline void EvaluableNodeDTO::set_has_constraint() {
  _oneof_case_[0] = kConstraint;
}
inline void EvaluableNodeDTO::clear_constraint() {
  if (_internal_has_constraint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.constraint_;
    }
    clear_has_value();
  }
}
inline ::empowerops::volition::dto::BabelConstraintNodeDTO* EvaluableNodeDTO::release_constraint() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.EvaluableNodeDTO.constraint)
  if (_internal_has_constraint()) {
    clear_has_value();
      ::empowerops::volition::dto::BabelConstraintNodeDTO* temp = value_.constraint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::BabelConstraintNodeDTO& EvaluableNodeDTO::_internal_constraint() const {
  return _internal_has_constraint()
      ? *value_.constraint_
      : reinterpret_cast< ::empowerops::volition::dto::BabelConstraintNodeDTO&>(::empowerops::volition::dto::_BabelConstraintNodeDTO_default_instance_);
}
inline const ::empowerops::volition::dto::BabelConstraintNodeDTO& EvaluableNodeDTO::constraint() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.EvaluableNodeDTO.constraint)
  return _internal_constraint();
}
inline ::empowerops::volition::dto::BabelConstraintNodeDTO* EvaluableNodeDTO::unsafe_arena_release_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.EvaluableNodeDTO.constraint)
  if (_internal_has_constraint()) {
    clear_has_value();
    ::empowerops::volition::dto::BabelConstraintNodeDTO* temp = value_.constraint_;
    value_.constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EvaluableNodeDTO::unsafe_arena_set_allocated_constraint(::empowerops::volition::dto::BabelConstraintNodeDTO* constraint) {
  clear_value();
  if (constraint) {
    set_has_constraint();
    value_.constraint_ = constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.EvaluableNodeDTO.constraint)
}
inline ::empowerops::volition::dto::BabelConstraintNodeDTO* EvaluableNodeDTO::_internal_mutable_constraint() {
  if (!_internal_has_constraint()) {
    clear_value();
    set_has_constraint();
    value_.constraint_ = CreateMaybeMessage< ::empowerops::volition::dto::BabelConstraintNodeDTO >(GetArenaForAllocation());
  }
  return value_.constraint_;
}
inline ::empowerops::volition::dto::BabelConstraintNodeDTO* EvaluableNodeDTO::mutable_constraint() {
  ::empowerops::volition::dto::BabelConstraintNodeDTO* _msg = _internal_mutable_constraint();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.EvaluableNodeDTO.constraint)
  return _msg;
}

inline bool EvaluableNodeDTO::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void EvaluableNodeDTO::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline EvaluableNodeDTO::ValueCase EvaluableNodeDTO::value_case() const {
  return EvaluableNodeDTO::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SimulationNodeDTO

// string name = 1;
inline void SimulationNodeDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimulationNodeDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationNodeDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationNodeDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationNodeDTO.name)
}
inline std::string* SimulationNodeDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationNodeDTO.name)
  return _s;
}
inline const std::string& SimulationNodeDTO::_internal_name() const {
  return name_.Get();
}
inline void SimulationNodeDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationNodeDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationNodeDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationNodeDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationNodeDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationNodeDTO.name)
}

// bool auto_map = 2;
inline bool SimulationNodeDTO::_internal_has_auto_map() const {
  return mapping_case() == kAutoMap;
}
inline bool SimulationNodeDTO::has_auto_map() const {
  return _internal_has_auto_map();
}
inline void SimulationNodeDTO::set_has_auto_map() {
  _oneof_case_[0] = kAutoMap;
}
inline void SimulationNodeDTO::clear_auto_map() {
  if (_internal_has_auto_map()) {
    mapping_.auto_map_ = false;
    clear_has_mapping();
  }
}
inline bool SimulationNodeDTO::_internal_auto_map() const {
  if (_internal_has_auto_map()) {
    return mapping_.auto_map_;
  }
  return false;
}
inline void SimulationNodeDTO::_internal_set_auto_map(bool value) {
  if (!_internal_has_auto_map()) {
    clear_mapping();
    set_has_auto_map();
  }
  mapping_.auto_map_ = value;
}
inline bool SimulationNodeDTO::auto_map() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationNodeDTO.auto_map)
  return _internal_auto_map();
}
inline void SimulationNodeDTO::set_auto_map(bool value) {
  _internal_set_auto_map(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationNodeDTO.auto_map)
}

// .empowerops.volition.dto.VariableMappingDTO mapping_table = 3;
inline bool SimulationNodeDTO::_internal_has_mapping_table() const {
  return mapping_case() == kMappingTable;
}
inline bool SimulationNodeDTO::has_mapping_table() const {
  return _internal_has_mapping_table();
}
inline void SimulationNodeDTO::set_has_mapping_table() {
  _oneof_case_[0] = kMappingTable;
}
inline void SimulationNodeDTO::clear_mapping_table() {
  if (_internal_has_mapping_table()) {
    if (GetArenaForAllocation() == nullptr) {
      delete mapping_.mapping_table_;
    }
    clear_has_mapping();
  }
}
inline ::empowerops::volition::dto::VariableMappingDTO* SimulationNodeDTO::release_mapping_table() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationNodeDTO.mapping_table)
  if (_internal_has_mapping_table()) {
    clear_has_mapping();
      ::empowerops::volition::dto::VariableMappingDTO* temp = mapping_.mapping_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mapping_.mapping_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::VariableMappingDTO& SimulationNodeDTO::_internal_mapping_table() const {
  return _internal_has_mapping_table()
      ? *mapping_.mapping_table_
      : reinterpret_cast< ::empowerops::volition::dto::VariableMappingDTO&>(::empowerops::volition::dto::_VariableMappingDTO_default_instance_);
}
inline const ::empowerops::volition::dto::VariableMappingDTO& SimulationNodeDTO::mapping_table() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationNodeDTO.mapping_table)
  return _internal_mapping_table();
}
inline ::empowerops::volition::dto::VariableMappingDTO* SimulationNodeDTO::unsafe_arena_release_mapping_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.SimulationNodeDTO.mapping_table)
  if (_internal_has_mapping_table()) {
    clear_has_mapping();
    ::empowerops::volition::dto::VariableMappingDTO* temp = mapping_.mapping_table_;
    mapping_.mapping_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimulationNodeDTO::unsafe_arena_set_allocated_mapping_table(::empowerops::volition::dto::VariableMappingDTO* mapping_table) {
  clear_mapping();
  if (mapping_table) {
    set_has_mapping_table();
    mapping_.mapping_table_ = mapping_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.SimulationNodeDTO.mapping_table)
}
inline ::empowerops::volition::dto::VariableMappingDTO* SimulationNodeDTO::_internal_mutable_mapping_table() {
  if (!_internal_has_mapping_table()) {
    clear_mapping();
    set_has_mapping_table();
    mapping_.mapping_table_ = CreateMaybeMessage< ::empowerops::volition::dto::VariableMappingDTO >(GetArenaForAllocation());
  }
  return mapping_.mapping_table_;
}
inline ::empowerops::volition::dto::VariableMappingDTO* SimulationNodeDTO::mutable_mapping_table() {
  ::empowerops::volition::dto::VariableMappingDTO* _msg = _internal_mutable_mapping_table();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationNodeDTO.mapping_table)
  return _msg;
}

// repeated .empowerops.volition.dto.SimulationInputParameterDTO inputs = 4;
inline int SimulationNodeDTO::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SimulationNodeDTO::inputs_size() const {
  return _internal_inputs_size();
}
inline void SimulationNodeDTO::clear_inputs() {
  inputs_.Clear();
}
inline ::empowerops::volition::dto::SimulationInputParameterDTO* SimulationNodeDTO::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationNodeDTO.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationInputParameterDTO >*
SimulationNodeDTO::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.SimulationNodeDTO.inputs)
  return &inputs_;
}
inline const ::empowerops::volition::dto::SimulationInputParameterDTO& SimulationNodeDTO::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::empowerops::volition::dto::SimulationInputParameterDTO& SimulationNodeDTO::inputs(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationNodeDTO.inputs)
  return _internal_inputs(index);
}
inline ::empowerops::volition::dto::SimulationInputParameterDTO* SimulationNodeDTO::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::empowerops::volition::dto::SimulationInputParameterDTO* SimulationNodeDTO::add_inputs() {
  ::empowerops::volition::dto::SimulationInputParameterDTO* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.SimulationNodeDTO.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationInputParameterDTO >&
SimulationNodeDTO::inputs() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.SimulationNodeDTO.inputs)
  return inputs_;
}

// repeated .empowerops.volition.dto.SimulationOutputParameterDTO outputs = 5;
inline int SimulationNodeDTO::_internal_outputs_size() const {
  return outputs_.size();
}
inline int SimulationNodeDTO::outputs_size() const {
  return _internal_outputs_size();
}
inline void SimulationNodeDTO::clear_outputs() {
  outputs_.Clear();
}
inline ::empowerops::volition::dto::SimulationOutputParameterDTO* SimulationNodeDTO::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationNodeDTO.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationOutputParameterDTO >*
SimulationNodeDTO::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.SimulationNodeDTO.outputs)
  return &outputs_;
}
inline const ::empowerops::volition::dto::SimulationOutputParameterDTO& SimulationNodeDTO::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::empowerops::volition::dto::SimulationOutputParameterDTO& SimulationNodeDTO::outputs(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationNodeDTO.outputs)
  return _internal_outputs(index);
}
inline ::empowerops::volition::dto::SimulationOutputParameterDTO* SimulationNodeDTO::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::empowerops::volition::dto::SimulationOutputParameterDTO* SimulationNodeDTO::add_outputs() {
  ::empowerops::volition::dto::SimulationOutputParameterDTO* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.SimulationNodeDTO.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::SimulationOutputParameterDTO >&
SimulationNodeDTO::outputs() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.SimulationNodeDTO.outputs)
  return outputs_;
}

// .google.protobuf.Duration time_out = 6;
inline bool SimulationNodeDTO::_internal_has_time_out() const {
  return this != internal_default_instance() && time_out_ != nullptr;
}
inline bool SimulationNodeDTO::has_time_out() const {
  return _internal_has_time_out();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SimulationNodeDTO::_internal_time_out() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = time_out_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SimulationNodeDTO::time_out() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationNodeDTO.time_out)
  return _internal_time_out();
}
inline void SimulationNodeDTO::unsafe_arena_set_allocated_time_out(
    ::PROTOBUF_NAMESPACE_ID::Duration* time_out) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_out_);
  }
  time_out_ = time_out;
  if (time_out) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.SimulationNodeDTO.time_out)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SimulationNodeDTO::release_time_out() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = time_out_;
  time_out_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SimulationNodeDTO::unsafe_arena_release_time_out() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationNodeDTO.time_out)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = time_out_;
  time_out_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SimulationNodeDTO::_internal_mutable_time_out() {
  
  if (time_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    time_out_ = p;
  }
  return time_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SimulationNodeDTO::mutable_time_out() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_time_out();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationNodeDTO.time_out)
  return _msg;
}
inline void SimulationNodeDTO::set_allocated_time_out(::PROTOBUF_NAMESPACE_ID::Duration* time_out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_out_);
  }
  if (time_out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_out));
    if (message_arena != submessage_arena) {
      time_out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_out, submessage_arena);
    }
    
  } else {
    
  }
  time_out_ = time_out;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationNodeDTO.time_out)
}

// .empowerops.volition.dto.SuspendAndCallbackConfigurationDTO suspend_and_callback = 7;
inline bool SimulationNodeDTO::_internal_has_suspend_and_callback() const {
  return strategy_case() == kSuspendAndCallback;
}
inline bool SimulationNodeDTO::has_suspend_and_callback() const {
  return _internal_has_suspend_and_callback();
}
inline void SimulationNodeDTO::set_has_suspend_and_callback() {
  _oneof_case_[1] = kSuspendAndCallback;
}
inline void SimulationNodeDTO::clear_suspend_and_callback() {
  if (_internal_has_suspend_and_callback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete strategy_.suspend_and_callback_;
    }
    clear_has_strategy();
  }
}
inline ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* SimulationNodeDTO::release_suspend_and_callback() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationNodeDTO.suspend_and_callback)
  if (_internal_has_suspend_and_callback()) {
    clear_has_strategy();
      ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* temp = strategy_.suspend_and_callback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    strategy_.suspend_and_callback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO& SimulationNodeDTO::_internal_suspend_and_callback() const {
  return _internal_has_suspend_and_callback()
      ? *strategy_.suspend_and_callback_
      : reinterpret_cast< ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO&>(::empowerops::volition::dto::_SuspendAndCallbackConfigurationDTO_default_instance_);
}
inline const ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO& SimulationNodeDTO::suspend_and_callback() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationNodeDTO.suspend_and_callback)
  return _internal_suspend_and_callback();
}
inline ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* SimulationNodeDTO::unsafe_arena_release_suspend_and_callback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.SimulationNodeDTO.suspend_and_callback)
  if (_internal_has_suspend_and_callback()) {
    clear_has_strategy();
    ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* temp = strategy_.suspend_and_callback_;
    strategy_.suspend_and_callback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimulationNodeDTO::unsafe_arena_set_allocated_suspend_and_callback(::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* suspend_and_callback) {
  clear_strategy();
  if (suspend_and_callback) {
    set_has_suspend_and_callback();
    strategy_.suspend_and_callback_ = suspend_and_callback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.SimulationNodeDTO.suspend_and_callback)
}
inline ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* SimulationNodeDTO::_internal_mutable_suspend_and_callback() {
  if (!_internal_has_suspend_and_callback()) {
    clear_strategy();
    set_has_suspend_and_callback();
    strategy_.suspend_and_callback_ = CreateMaybeMessage< ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO >(GetArenaForAllocation());
  }
  return strategy_.suspend_and_callback_;
}
inline ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* SimulationNodeDTO::mutable_suspend_and_callback() {
  ::empowerops::volition::dto::SuspendAndCallbackConfigurationDTO* _msg = _internal_mutable_suspend_and_callback();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationNodeDTO.suspend_and_callback)
  return _msg;
}

// .empowerops.volition.dto.ExternalSimulationExecConfigurationDTO external_simulation_exec = 8;
inline bool SimulationNodeDTO::_internal_has_external_simulation_exec() const {
  return strategy_case() == kExternalSimulationExec;
}
inline bool SimulationNodeDTO::has_external_simulation_exec() const {
  return _internal_has_external_simulation_exec();
}
inline void SimulationNodeDTO::set_has_external_simulation_exec() {
  _oneof_case_[1] = kExternalSimulationExec;
}
inline void SimulationNodeDTO::clear_external_simulation_exec() {
  if (_internal_has_external_simulation_exec()) {
    if (GetArenaForAllocation() == nullptr) {
      delete strategy_.external_simulation_exec_;
    }
    clear_has_strategy();
  }
}
inline ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* SimulationNodeDTO::release_external_simulation_exec() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationNodeDTO.external_simulation_exec)
  if (_internal_has_external_simulation_exec()) {
    clear_has_strategy();
      ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* temp = strategy_.external_simulation_exec_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    strategy_.external_simulation_exec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO& SimulationNodeDTO::_internal_external_simulation_exec() const {
  return _internal_has_external_simulation_exec()
      ? *strategy_.external_simulation_exec_
      : reinterpret_cast< ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO&>(::empowerops::volition::dto::_ExternalSimulationExecConfigurationDTO_default_instance_);
}
inline const ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO& SimulationNodeDTO::external_simulation_exec() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationNodeDTO.external_simulation_exec)
  return _internal_external_simulation_exec();
}
inline ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* SimulationNodeDTO::unsafe_arena_release_external_simulation_exec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.SimulationNodeDTO.external_simulation_exec)
  if (_internal_has_external_simulation_exec()) {
    clear_has_strategy();
    ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* temp = strategy_.external_simulation_exec_;
    strategy_.external_simulation_exec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimulationNodeDTO::unsafe_arena_set_allocated_external_simulation_exec(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* external_simulation_exec) {
  clear_strategy();
  if (external_simulation_exec) {
    set_has_external_simulation_exec();
    strategy_.external_simulation_exec_ = external_simulation_exec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.SimulationNodeDTO.external_simulation_exec)
}
inline ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* SimulationNodeDTO::_internal_mutable_external_simulation_exec() {
  if (!_internal_has_external_simulation_exec()) {
    clear_strategy();
    set_has_external_simulation_exec();
    strategy_.external_simulation_exec_ = CreateMaybeMessage< ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO >(GetArenaForAllocation());
  }
  return strategy_.external_simulation_exec_;
}
inline ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* SimulationNodeDTO::mutable_external_simulation_exec() {
  ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO* _msg = _internal_mutable_external_simulation_exec();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationNodeDTO.external_simulation_exec)
  return _msg;
}

inline bool SimulationNodeDTO::has_mapping() const {
  return mapping_case() != MAPPING_NOT_SET;
}
inline void SimulationNodeDTO::clear_has_mapping() {
  _oneof_case_[0] = MAPPING_NOT_SET;
}
inline bool SimulationNodeDTO::has_strategy() const {
  return strategy_case() != STRATEGY_NOT_SET;
}
inline void SimulationNodeDTO::clear_has_strategy() {
  _oneof_case_[1] = STRATEGY_NOT_SET;
}
inline SimulationNodeDTO::MappingCase SimulationNodeDTO::mapping_case() const {
  return SimulationNodeDTO::MappingCase(_oneof_case_[0]);
}
inline SimulationNodeDTO::StrategyCase SimulationNodeDTO::strategy_case() const {
  return SimulationNodeDTO::StrategyCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SimulationInputParameterDTO

// string name = 1;
inline void SimulationInputParameterDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimulationInputParameterDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationInputParameterDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationInputParameterDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationInputParameterDTO.name)
}
inline std::string* SimulationInputParameterDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationInputParameterDTO.name)
  return _s;
}
inline const std::string& SimulationInputParameterDTO::_internal_name() const {
  return name_.Get();
}
inline void SimulationInputParameterDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationInputParameterDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationInputParameterDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationInputParameterDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationInputParameterDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationInputParameterDTO.name)
}

// -------------------------------------------------------------------

// SimulationOutputParameterDTO

// string name = 1;
inline void SimulationOutputParameterDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimulationOutputParameterDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationOutputParameterDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationOutputParameterDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationOutputParameterDTO.name)
}
inline std::string* SimulationOutputParameterDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationOutputParameterDTO.name)
  return _s;
}
inline const std::string& SimulationOutputParameterDTO::_internal_name() const {
  return name_.Get();
}
inline void SimulationOutputParameterDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationOutputParameterDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationOutputParameterDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationOutputParameterDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationOutputParameterDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationOutputParameterDTO.name)
}

// bool is_boolean = 2;
inline void SimulationOutputParameterDTO::clear_is_boolean() {
  is_boolean_ = false;
}
inline bool SimulationOutputParameterDTO::_internal_is_boolean() const {
  return is_boolean_;
}
inline bool SimulationOutputParameterDTO::is_boolean() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationOutputParameterDTO.is_boolean)
  return _internal_is_boolean();
}
inline void SimulationOutputParameterDTO::_internal_set_is_boolean(bool value) {
  
  is_boolean_ = value;
}
inline void SimulationOutputParameterDTO::set_is_boolean(bool value) {
  _internal_set_is_boolean(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationOutputParameterDTO.is_boolean)
}

// -------------------------------------------------------------------

// SuspendAndCallbackConfigurationDTO

// -------------------------------------------------------------------

// ExternalSimulationExecConfigurationDTO

// .empowerops.volition.dto.PathDTO working_directory = 1;
inline bool ExternalSimulationExecConfigurationDTO::_internal_has_working_directory() const {
  return this != internal_default_instance() && working_directory_ != nullptr;
}
inline bool ExternalSimulationExecConfigurationDTO::has_working_directory() const {
  return _internal_has_working_directory();
}
inline void ExternalSimulationExecConfigurationDTO::clear_working_directory() {
  if (GetArenaForAllocation() == nullptr && working_directory_ != nullptr) {
    delete working_directory_;
  }
  working_directory_ = nullptr;
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::_internal_working_directory() const {
  const ::empowerops::volition::dto::PathDTO* p = working_directory_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::PathDTO&>(
      ::empowerops::volition::dto::_PathDTO_default_instance_);
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::working_directory() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.working_directory)
  return _internal_working_directory();
}
inline void ExternalSimulationExecConfigurationDTO::unsafe_arena_set_allocated_working_directory(
    ::empowerops::volition::dto::PathDTO* working_directory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(working_directory_);
  }
  working_directory_ = working_directory;
  if (working_directory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.working_directory)
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::release_working_directory() {
  
  ::empowerops::volition::dto::PathDTO* temp = working_directory_;
  working_directory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::unsafe_arena_release_working_directory() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.working_directory)
  
  ::empowerops::volition::dto::PathDTO* temp = working_directory_;
  working_directory_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::_internal_mutable_working_directory() {
  
  if (working_directory_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::PathDTO>(GetArenaForAllocation());
    working_directory_ = p;
  }
  return working_directory_;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::mutable_working_directory() {
  ::empowerops::volition::dto::PathDTO* _msg = _internal_mutable_working_directory();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.working_directory)
  return _msg;
}
inline void ExternalSimulationExecConfigurationDTO::set_allocated_working_directory(::empowerops::volition::dto::PathDTO* working_directory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete working_directory_;
  }
  if (working_directory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::PathDTO>::GetOwningArena(working_directory);
    if (message_arena != submessage_arena) {
      working_directory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, working_directory, submessage_arena);
    }
    
  } else {
    
  }
  working_directory_ = working_directory;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.working_directory)
}

// .empowerops.volition.dto.PathDTO input_file = 2;
inline bool ExternalSimulationExecConfigurationDTO::_internal_has_input_file() const {
  return this != internal_default_instance() && input_file_ != nullptr;
}
inline bool ExternalSimulationExecConfigurationDTO::has_input_file() const {
  return _internal_has_input_file();
}
inline void ExternalSimulationExecConfigurationDTO::clear_input_file() {
  if (GetArenaForAllocation() == nullptr && input_file_ != nullptr) {
    delete input_file_;
  }
  input_file_ = nullptr;
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::_internal_input_file() const {
  const ::empowerops::volition::dto::PathDTO* p = input_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::PathDTO&>(
      ::empowerops::volition::dto::_PathDTO_default_instance_);
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::input_file() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_file)
  return _internal_input_file();
}
inline void ExternalSimulationExecConfigurationDTO::unsafe_arena_set_allocated_input_file(
    ::empowerops::volition::dto::PathDTO* input_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_file_);
  }
  input_file_ = input_file;
  if (input_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_file)
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::release_input_file() {
  
  ::empowerops::volition::dto::PathDTO* temp = input_file_;
  input_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::unsafe_arena_release_input_file() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_file)
  
  ::empowerops::volition::dto::PathDTO* temp = input_file_;
  input_file_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::_internal_mutable_input_file() {
  
  if (input_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::PathDTO>(GetArenaForAllocation());
    input_file_ = p;
  }
  return input_file_;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::mutable_input_file() {
  ::empowerops::volition::dto::PathDTO* _msg = _internal_mutable_input_file();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_file)
  return _msg;
}
inline void ExternalSimulationExecConfigurationDTO::set_allocated_input_file(::empowerops::volition::dto::PathDTO* input_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_file_;
  }
  if (input_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::PathDTO>::GetOwningArena(input_file);
    if (message_arena != submessage_arena) {
      input_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_file, submessage_arena);
    }
    
  } else {
    
  }
  input_file_ = input_file;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_file)
}

// .empowerops.volition.dto.PathDTO output_file = 3;
inline bool ExternalSimulationExecConfigurationDTO::_internal_has_output_file() const {
  return this != internal_default_instance() && output_file_ != nullptr;
}
inline bool ExternalSimulationExecConfigurationDTO::has_output_file() const {
  return _internal_has_output_file();
}
inline void ExternalSimulationExecConfigurationDTO::clear_output_file() {
  if (GetArenaForAllocation() == nullptr && output_file_ != nullptr) {
    delete output_file_;
  }
  output_file_ = nullptr;
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::_internal_output_file() const {
  const ::empowerops::volition::dto::PathDTO* p = output_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::PathDTO&>(
      ::empowerops::volition::dto::_PathDTO_default_instance_);
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::output_file() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_file)
  return _internal_output_file();
}
inline void ExternalSimulationExecConfigurationDTO::unsafe_arena_set_allocated_output_file(
    ::empowerops::volition::dto::PathDTO* output_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_file_);
  }
  output_file_ = output_file;
  if (output_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_file)
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::release_output_file() {
  
  ::empowerops::volition::dto::PathDTO* temp = output_file_;
  output_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::unsafe_arena_release_output_file() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_file)
  
  ::empowerops::volition::dto::PathDTO* temp = output_file_;
  output_file_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::_internal_mutable_output_file() {
  
  if (output_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::PathDTO>(GetArenaForAllocation());
    output_file_ = p;
  }
  return output_file_;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::mutable_output_file() {
  ::empowerops::volition::dto::PathDTO* _msg = _internal_mutable_output_file();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_file)
  return _msg;
}
inline void ExternalSimulationExecConfigurationDTO::set_allocated_output_file(::empowerops::volition::dto::PathDTO* output_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete output_file_;
  }
  if (output_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::PathDTO>::GetOwningArena(output_file);
    if (message_arena != submessage_arena) {
      output_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_file, submessage_arena);
    }
    
  } else {
    
  }
  output_file_ = output_file;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_file)
}

// .empowerops.volition.dto.PathDTO backup_directory = 4;
inline bool ExternalSimulationExecConfigurationDTO::_internal_has_backup_directory() const {
  return this != internal_default_instance() && backup_directory_ != nullptr;
}
inline bool ExternalSimulationExecConfigurationDTO::has_backup_directory() const {
  return _internal_has_backup_directory();
}
inline void ExternalSimulationExecConfigurationDTO::clear_backup_directory() {
  if (GetArenaForAllocation() == nullptr && backup_directory_ != nullptr) {
    delete backup_directory_;
  }
  backup_directory_ = nullptr;
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::_internal_backup_directory() const {
  const ::empowerops::volition::dto::PathDTO* p = backup_directory_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::PathDTO&>(
      ::empowerops::volition::dto::_PathDTO_default_instance_);
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::backup_directory() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.backup_directory)
  return _internal_backup_directory();
}
inline void ExternalSimulationExecConfigurationDTO::unsafe_arena_set_allocated_backup_directory(
    ::empowerops::volition::dto::PathDTO* backup_directory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup_directory_);
  }
  backup_directory_ = backup_directory;
  if (backup_directory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.backup_directory)
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::release_backup_directory() {
  
  ::empowerops::volition::dto::PathDTO* temp = backup_directory_;
  backup_directory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::unsafe_arena_release_backup_directory() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.backup_directory)
  
  ::empowerops::volition::dto::PathDTO* temp = backup_directory_;
  backup_directory_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::_internal_mutable_backup_directory() {
  
  if (backup_directory_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::PathDTO>(GetArenaForAllocation());
    backup_directory_ = p;
  }
  return backup_directory_;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::mutable_backup_directory() {
  ::empowerops::volition::dto::PathDTO* _msg = _internal_mutable_backup_directory();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.backup_directory)
  return _msg;
}
inline void ExternalSimulationExecConfigurationDTO::set_allocated_backup_directory(::empowerops::volition::dto::PathDTO* backup_directory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete backup_directory_;
  }
  if (backup_directory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::PathDTO>::GetOwningArena(backup_directory);
    if (message_arena != submessage_arena) {
      backup_directory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup_directory, submessage_arena);
    }
    
  } else {
    
  }
  backup_directory_ = backup_directory;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.backup_directory)
}

// .empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.BackupTimimg backup_timing = 5;
inline void ExternalSimulationExecConfigurationDTO::clear_backup_timing() {
  backup_timing_ = 0;
}
inline ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg ExternalSimulationExecConfigurationDTO::_internal_backup_timing() const {
  return static_cast< ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg >(backup_timing_);
}
inline ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg ExternalSimulationExecConfigurationDTO::backup_timing() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.backup_timing)
  return _internal_backup_timing();
}
inline void ExternalSimulationExecConfigurationDTO::_internal_set_backup_timing(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg value) {
  
  backup_timing_ = value;
}
inline void ExternalSimulationExecConfigurationDTO::set_backup_timing(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg value) {
  _internal_set_backup_timing(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.backup_timing)
}

// .empowerops.volition.dto.PathDTO executable = 6;
inline bool ExternalSimulationExecConfigurationDTO::_internal_has_executable() const {
  return this != internal_default_instance() && executable_ != nullptr;
}
inline bool ExternalSimulationExecConfigurationDTO::has_executable() const {
  return _internal_has_executable();
}
inline void ExternalSimulationExecConfigurationDTO::clear_executable() {
  if (GetArenaForAllocation() == nullptr && executable_ != nullptr) {
    delete executable_;
  }
  executable_ = nullptr;
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::_internal_executable() const {
  const ::empowerops::volition::dto::PathDTO* p = executable_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::PathDTO&>(
      ::empowerops::volition::dto::_PathDTO_default_instance_);
}
inline const ::empowerops::volition::dto::PathDTO& ExternalSimulationExecConfigurationDTO::executable() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.executable)
  return _internal_executable();
}
inline void ExternalSimulationExecConfigurationDTO::unsafe_arena_set_allocated_executable(
    ::empowerops::volition::dto::PathDTO* executable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executable_);
  }
  executable_ = executable;
  if (executable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.executable)
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::release_executable() {
  
  ::empowerops::volition::dto::PathDTO* temp = executable_;
  executable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::unsafe_arena_release_executable() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.executable)
  
  ::empowerops::volition::dto::PathDTO* temp = executable_;
  executable_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::_internal_mutable_executable() {
  
  if (executable_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::PathDTO>(GetArenaForAllocation());
    executable_ = p;
  }
  return executable_;
}
inline ::empowerops::volition::dto::PathDTO* ExternalSimulationExecConfigurationDTO::mutable_executable() {
  ::empowerops::volition::dto::PathDTO* _msg = _internal_mutable_executable();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.executable)
  return _msg;
}
inline void ExternalSimulationExecConfigurationDTO::set_allocated_executable(::empowerops::volition::dto::PathDTO* executable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete executable_;
  }
  if (executable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::PathDTO>::GetOwningArena(executable);
    if (message_arena != submessage_arena) {
      executable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executable, submessage_arena);
    }
    
  } else {
    
  }
  executable_ = executable;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.executable)
}

// repeated .empowerops.volition.dto.ExecOptionDTO options = 7;
inline int ExternalSimulationExecConfigurationDTO::_internal_options_size() const {
  return options_.size();
}
inline int ExternalSimulationExecConfigurationDTO::options_size() const {
  return _internal_options_size();
}
inline void ExternalSimulationExecConfigurationDTO::clear_options() {
  options_.Clear();
}
inline ::empowerops::volition::dto::ExecOptionDTO* ExternalSimulationExecConfigurationDTO::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::ExecOptionDTO >*
ExternalSimulationExecConfigurationDTO::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.options)
  return &options_;
}
inline const ::empowerops::volition::dto::ExecOptionDTO& ExternalSimulationExecConfigurationDTO::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::empowerops::volition::dto::ExecOptionDTO& ExternalSimulationExecConfigurationDTO::options(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.options)
  return _internal_options(index);
}
inline ::empowerops::volition::dto::ExecOptionDTO* ExternalSimulationExecConfigurationDTO::_internal_add_options() {
  return options_.Add();
}
inline ::empowerops::volition::dto::ExecOptionDTO* ExternalSimulationExecConfigurationDTO::add_options() {
  ::empowerops::volition::dto::ExecOptionDTO* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::ExecOptionDTO >&
ExternalSimulationExecConfigurationDTO::options() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.options)
  return options_;
}

// .empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.ExecStrategy exec_strategy = 8;
inline void ExternalSimulationExecConfigurationDTO::clear_exec_strategy() {
  exec_strategy_ = 0;
}
inline ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy ExternalSimulationExecConfigurationDTO::_internal_exec_strategy() const {
  return static_cast< ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy >(exec_strategy_);
}
inline ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy ExternalSimulationExecConfigurationDTO::exec_strategy() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.exec_strategy)
  return _internal_exec_strategy();
}
inline void ExternalSimulationExecConfigurationDTO::_internal_set_exec_strategy(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy value) {
  
  exec_strategy_ = value;
}
inline void ExternalSimulationExecConfigurationDTO::set_exec_strategy(::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy value) {
  _internal_set_exec_strategy(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.exec_strategy)
}

// repeated .empowerops.volition.dto.OutputParameterLocationStepSequenceDTO output_step_sequences = 9;
inline int ExternalSimulationExecConfigurationDTO::_internal_output_step_sequences_size() const {
  return output_step_sequences_.size();
}
inline int ExternalSimulationExecConfigurationDTO::output_step_sequences_size() const {
  return _internal_output_step_sequences_size();
}
inline void ExternalSimulationExecConfigurationDTO::clear_output_step_sequences() {
  output_step_sequences_.Clear();
}
inline ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO* ExternalSimulationExecConfigurationDTO::mutable_output_step_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_step_sequences)
  return output_step_sequences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO >*
ExternalSimulationExecConfigurationDTO::mutable_output_step_sequences() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_step_sequences)
  return &output_step_sequences_;
}
inline const ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO& ExternalSimulationExecConfigurationDTO::_internal_output_step_sequences(int index) const {
  return output_step_sequences_.Get(index);
}
inline const ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO& ExternalSimulationExecConfigurationDTO::output_step_sequences(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_step_sequences)
  return _internal_output_step_sequences(index);
}
inline ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO* ExternalSimulationExecConfigurationDTO::_internal_add_output_step_sequences() {
  return output_step_sequences_.Add();
}
inline ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO* ExternalSimulationExecConfigurationDTO::add_output_step_sequences() {
  ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO* _add = _internal_add_output_step_sequences();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_step_sequences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepSequenceDTO >&
ExternalSimulationExecConfigurationDTO::output_step_sequences() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.output_step_sequences)
  return output_step_sequences_;
}

// repeated .empowerops.volition.dto.InputParameterDetectionStepSetDTO input_step_sets = 10;
inline int ExternalSimulationExecConfigurationDTO::_internal_input_step_sets_size() const {
  return input_step_sets_.size();
}
inline int ExternalSimulationExecConfigurationDTO::input_step_sets_size() const {
  return _internal_input_step_sets_size();
}
inline void ExternalSimulationExecConfigurationDTO::clear_input_step_sets() {
  input_step_sets_.Clear();
}
inline ::empowerops::volition::dto::InputParameterDetectionStepSetDTO* ExternalSimulationExecConfigurationDTO::mutable_input_step_sets(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_step_sets)
  return input_step_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDetectionStepSetDTO >*
ExternalSimulationExecConfigurationDTO::mutable_input_step_sets() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_step_sets)
  return &input_step_sets_;
}
inline const ::empowerops::volition::dto::InputParameterDetectionStepSetDTO& ExternalSimulationExecConfigurationDTO::_internal_input_step_sets(int index) const {
  return input_step_sets_.Get(index);
}
inline const ::empowerops::volition::dto::InputParameterDetectionStepSetDTO& ExternalSimulationExecConfigurationDTO::input_step_sets(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_step_sets)
  return _internal_input_step_sets(index);
}
inline ::empowerops::volition::dto::InputParameterDetectionStepSetDTO* ExternalSimulationExecConfigurationDTO::_internal_add_input_step_sets() {
  return input_step_sets_.Add();
}
inline ::empowerops::volition::dto::InputParameterDetectionStepSetDTO* ExternalSimulationExecConfigurationDTO::add_input_step_sets() {
  ::empowerops::volition::dto::InputParameterDetectionStepSetDTO* _add = _internal_add_input_step_sets();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_step_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterDetectionStepSetDTO >&
ExternalSimulationExecConfigurationDTO::input_step_sets() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.input_step_sets)
  return input_step_sets_;
}

// repeated uint32 exit_codes = 11;
inline int ExternalSimulationExecConfigurationDTO::_internal_exit_codes_size() const {
  return exit_codes_.size();
}
inline int ExternalSimulationExecConfigurationDTO::exit_codes_size() const {
  return _internal_exit_codes_size();
}
inline void ExternalSimulationExecConfigurationDTO::clear_exit_codes() {
  exit_codes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalSimulationExecConfigurationDTO::_internal_exit_codes(int index) const {
  return exit_codes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalSimulationExecConfigurationDTO::exit_codes(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.exit_codes)
  return _internal_exit_codes(index);
}
inline void ExternalSimulationExecConfigurationDTO::set_exit_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  exit_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.exit_codes)
}
inline void ExternalSimulationExecConfigurationDTO::_internal_add_exit_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  exit_codes_.Add(value);
}
inline void ExternalSimulationExecConfigurationDTO::add_exit_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_exit_codes(value);
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.exit_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExternalSimulationExecConfigurationDTO::_internal_exit_codes() const {
  return exit_codes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExternalSimulationExecConfigurationDTO::exit_codes() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.exit_codes)
  return _internal_exit_codes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExternalSimulationExecConfigurationDTO::_internal_mutable_exit_codes() {
  return &exit_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExternalSimulationExecConfigurationDTO::mutable_exit_codes() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.ExternalSimulationExecConfigurationDTO.exit_codes)
  return _internal_mutable_exit_codes();
}

// -------------------------------------------------------------------

// ExecOptionDTO

// string option_name = 1;
inline void ExecOptionDTO::clear_option_name() {
  option_name_.ClearToEmpty();
}
inline const std::string& ExecOptionDTO::option_name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExecOptionDTO.option_name)
  return _internal_option_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecOptionDTO::set_option_name(ArgT0&& arg0, ArgT... args) {
 
 option_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.ExecOptionDTO.option_name)
}
inline std::string* ExecOptionDTO::mutable_option_name() {
  std::string* _s = _internal_mutable_option_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExecOptionDTO.option_name)
  return _s;
}
inline const std::string& ExecOptionDTO::_internal_option_name() const {
  return option_name_.Get();
}
inline void ExecOptionDTO::_internal_set_option_name(const std::string& value) {
  
  option_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecOptionDTO::_internal_mutable_option_name() {
  
  return option_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecOptionDTO::release_option_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ExecOptionDTO.option_name)
  return option_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecOptionDTO::set_allocated_option_name(std::string* option_name) {
  if (option_name != nullptr) {
    
  } else {
    
  }
  option_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), option_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.ExecOptionDTO.option_name)
}

// string argument = 2;
inline void ExecOptionDTO::clear_argument() {
  argument_.ClearToEmpty();
}
inline const std::string& ExecOptionDTO::argument() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ExecOptionDTO.argument)
  return _internal_argument();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecOptionDTO::set_argument(ArgT0&& arg0, ArgT... args) {
 
 argument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.ExecOptionDTO.argument)
}
inline std::string* ExecOptionDTO::mutable_argument() {
  std::string* _s = _internal_mutable_argument();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ExecOptionDTO.argument)
  return _s;
}
inline const std::string& ExecOptionDTO::_internal_argument() const {
  return argument_.Get();
}
inline void ExecOptionDTO::_internal_set_argument(const std::string& value) {
  
  argument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecOptionDTO::_internal_mutable_argument() {
  
  return argument_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecOptionDTO::release_argument() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ExecOptionDTO.argument)
  return argument_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecOptionDTO::set_allocated_argument(std::string* argument) {
  if (argument != nullptr) {
    
  } else {
    
  }
  argument_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), argument,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.ExecOptionDTO.argument)
}

// -------------------------------------------------------------------

// OutputParameterLocationStepSequenceDTO

// repeated .empowerops.volition.dto.OutputParameterLocationStepDTO steps = 1;
inline int OutputParameterLocationStepSequenceDTO::_internal_steps_size() const {
  return steps_.size();
}
inline int OutputParameterLocationStepSequenceDTO::steps_size() const {
  return _internal_steps_size();
}
inline void OutputParameterLocationStepSequenceDTO::clear_steps() {
  steps_.Clear();
}
inline ::empowerops::volition::dto::OutputParameterLocationStepDTO* OutputParameterLocationStepSequenceDTO::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OutputParameterLocationStepSequenceDTO.steps)
  return steps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepDTO >*
OutputParameterLocationStepSequenceDTO::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.OutputParameterLocationStepSequenceDTO.steps)
  return &steps_;
}
inline const ::empowerops::volition::dto::OutputParameterLocationStepDTO& OutputParameterLocationStepSequenceDTO::_internal_steps(int index) const {
  return steps_.Get(index);
}
inline const ::empowerops::volition::dto::OutputParameterLocationStepDTO& OutputParameterLocationStepSequenceDTO::steps(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OutputParameterLocationStepSequenceDTO.steps)
  return _internal_steps(index);
}
inline ::empowerops::volition::dto::OutputParameterLocationStepDTO* OutputParameterLocationStepSequenceDTO::_internal_add_steps() {
  return steps_.Add();
}
inline ::empowerops::volition::dto::OutputParameterLocationStepDTO* OutputParameterLocationStepSequenceDTO::add_steps() {
  ::empowerops::volition::dto::OutputParameterLocationStepDTO* _add = _internal_add_steps();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.OutputParameterLocationStepSequenceDTO.steps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::OutputParameterLocationStepDTO >&
OutputParameterLocationStepSequenceDTO::steps() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.OutputParameterLocationStepSequenceDTO.steps)
  return steps_;
}

// -------------------------------------------------------------------

// InputParameterDetectionStepSetDTO

// repeated .empowerops.volition.dto.InputParameterLocationStepDTO steps = 1;
inline int InputParameterDetectionStepSetDTO::_internal_steps_size() const {
  return steps_.size();
}
inline int InputParameterDetectionStepSetDTO::steps_size() const {
  return _internal_steps_size();
}
inline void InputParameterDetectionStepSetDTO::clear_steps() {
  steps_.Clear();
}
inline ::empowerops::volition::dto::InputParameterLocationStepDTO* InputParameterDetectionStepSetDTO::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.InputParameterDetectionStepSetDTO.steps)
  return steps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterLocationStepDTO >*
InputParameterDetectionStepSetDTO::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.InputParameterDetectionStepSetDTO.steps)
  return &steps_;
}
inline const ::empowerops::volition::dto::InputParameterLocationStepDTO& InputParameterDetectionStepSetDTO::_internal_steps(int index) const {
  return steps_.Get(index);
}
inline const ::empowerops::volition::dto::InputParameterLocationStepDTO& InputParameterDetectionStepSetDTO::steps(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.InputParameterDetectionStepSetDTO.steps)
  return _internal_steps(index);
}
inline ::empowerops::volition::dto::InputParameterLocationStepDTO* InputParameterDetectionStepSetDTO::_internal_add_steps() {
  return steps_.Add();
}
inline ::empowerops::volition::dto::InputParameterLocationStepDTO* InputParameterDetectionStepSetDTO::add_steps() {
  ::empowerops::volition::dto::InputParameterLocationStepDTO* _add = _internal_add_steps();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.InputParameterDetectionStepSetDTO.steps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::InputParameterLocationStepDTO >&
InputParameterDetectionStepSetDTO::steps() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.InputParameterDetectionStepSetDTO.steps)
  return steps_;
}

// -------------------------------------------------------------------

// OutputParameterLocationStepDTO

// string name = 1;
inline void OutputParameterLocationStepDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OutputParameterLocationStepDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OutputParameterLocationStepDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutputParameterLocationStepDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OutputParameterLocationStepDTO.name)
}
inline std::string* OutputParameterLocationStepDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OutputParameterLocationStepDTO.name)
  return _s;
}
inline const std::string& OutputParameterLocationStepDTO::_internal_name() const {
  return name_.Get();
}
inline void OutputParameterLocationStepDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OutputParameterLocationStepDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OutputParameterLocationStepDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OutputParameterLocationStepDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OutputParameterLocationStepDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.OutputParameterLocationStepDTO.name)
}

// .empowerops.volition.dto.AnchorLocationDTO anchor_location = 2;
inline bool OutputParameterLocationStepDTO::_internal_has_anchor_location() const {
  return location_case() == kAnchorLocation;
}
inline bool OutputParameterLocationStepDTO::has_anchor_location() const {
  return _internal_has_anchor_location();
}
inline void OutputParameterLocationStepDTO::set_has_anchor_location() {
  _oneof_case_[0] = kAnchorLocation;
}
inline void OutputParameterLocationStepDTO::clear_anchor_location() {
  if (_internal_has_anchor_location()) {
    if (GetArenaForAllocation() == nullptr) {
      delete location_.anchor_location_;
    }
    clear_has_location();
  }
}
inline ::empowerops::volition::dto::AnchorLocationDTO* OutputParameterLocationStepDTO::release_anchor_location() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OutputParameterLocationStepDTO.anchor_location)
  if (_internal_has_anchor_location()) {
    clear_has_location();
      ::empowerops::volition::dto::AnchorLocationDTO* temp = location_.anchor_location_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    location_.anchor_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::AnchorLocationDTO& OutputParameterLocationStepDTO::_internal_anchor_location() const {
  return _internal_has_anchor_location()
      ? *location_.anchor_location_
      : reinterpret_cast< ::empowerops::volition::dto::AnchorLocationDTO&>(::empowerops::volition::dto::_AnchorLocationDTO_default_instance_);
}
inline const ::empowerops::volition::dto::AnchorLocationDTO& OutputParameterLocationStepDTO::anchor_location() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OutputParameterLocationStepDTO.anchor_location)
  return _internal_anchor_location();
}
inline ::empowerops::volition::dto::AnchorLocationDTO* OutputParameterLocationStepDTO::unsafe_arena_release_anchor_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.OutputParameterLocationStepDTO.anchor_location)
  if (_internal_has_anchor_location()) {
    clear_has_location();
    ::empowerops::volition::dto::AnchorLocationDTO* temp = location_.anchor_location_;
    location_.anchor_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OutputParameterLocationStepDTO::unsafe_arena_set_allocated_anchor_location(::empowerops::volition::dto::AnchorLocationDTO* anchor_location) {
  clear_location();
  if (anchor_location) {
    set_has_anchor_location();
    location_.anchor_location_ = anchor_location;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OutputParameterLocationStepDTO.anchor_location)
}
inline ::empowerops::volition::dto::AnchorLocationDTO* OutputParameterLocationStepDTO::_internal_mutable_anchor_location() {
  if (!_internal_has_anchor_location()) {
    clear_location();
    set_has_anchor_location();
    location_.anchor_location_ = CreateMaybeMessage< ::empowerops::volition::dto::AnchorLocationDTO >(GetArenaForAllocation());
  }
  return location_.anchor_location_;
}
inline ::empowerops::volition::dto::AnchorLocationDTO* OutputParameterLocationStepDTO::mutable_anchor_location() {
  ::empowerops::volition::dto::AnchorLocationDTO* _msg = _internal_mutable_anchor_location();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OutputParameterLocationStepDTO.anchor_location)
  return _msg;
}

// uint32 row_offset = 3;
inline bool OutputParameterLocationStepDTO::_internal_has_row_offset() const {
  return location_case() == kRowOffset;
}
inline bool OutputParameterLocationStepDTO::has_row_offset() const {
  return _internal_has_row_offset();
}
inline void OutputParameterLocationStepDTO::set_has_row_offset() {
  _oneof_case_[0] = kRowOffset;
}
inline void OutputParameterLocationStepDTO::clear_row_offset() {
  if (_internal_has_row_offset()) {
    location_.row_offset_ = 0u;
    clear_has_location();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputParameterLocationStepDTO::_internal_row_offset() const {
  if (_internal_has_row_offset()) {
    return location_.row_offset_;
  }
  return 0u;
}
inline void OutputParameterLocationStepDTO::_internal_set_row_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_row_offset()) {
    clear_location();
    set_has_row_offset();
  }
  location_.row_offset_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputParameterLocationStepDTO::row_offset() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OutputParameterLocationStepDTO.row_offset)
  return _internal_row_offset();
}
inline void OutputParameterLocationStepDTO::set_row_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_offset(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OutputParameterLocationStepDTO.row_offset)
}

// uint32 column_offset = 4;
inline bool OutputParameterLocationStepDTO::_internal_has_column_offset() const {
  return location_case() == kColumnOffset;
}
inline bool OutputParameterLocationStepDTO::has_column_offset() const {
  return _internal_has_column_offset();
}
inline void OutputParameterLocationStepDTO::set_has_column_offset() {
  _oneof_case_[0] = kColumnOffset;
}
inline void OutputParameterLocationStepDTO::clear_column_offset() {
  if (_internal_has_column_offset()) {
    location_.column_offset_ = 0u;
    clear_has_location();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputParameterLocationStepDTO::_internal_column_offset() const {
  if (_internal_has_column_offset()) {
    return location_.column_offset_;
  }
  return 0u;
}
inline void OutputParameterLocationStepDTO::_internal_set_column_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_column_offset()) {
    clear_location();
    set_has_column_offset();
  }
  location_.column_offset_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputParameterLocationStepDTO::column_offset() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OutputParameterLocationStepDTO.column_offset)
  return _internal_column_offset();
}
inline void OutputParameterLocationStepDTO::set_column_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_offset(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OutputParameterLocationStepDTO.column_offset)
}

inline bool OutputParameterLocationStepDTO::has_location() const {
  return location_case() != LOCATION_NOT_SET;
}
inline void OutputParameterLocationStepDTO::clear_has_location() {
  _oneof_case_[0] = LOCATION_NOT_SET;
}
inline OutputParameterLocationStepDTO::LocationCase OutputParameterLocationStepDTO::location_case() const {
  return OutputParameterLocationStepDTO::LocationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InputParameterLocationStepDTO

// string name = 1;
inline void InputParameterLocationStepDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InputParameterLocationStepDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.InputParameterLocationStepDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputParameterLocationStepDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.InputParameterLocationStepDTO.name)
}
inline std::string* InputParameterLocationStepDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.InputParameterLocationStepDTO.name)
  return _s;
}
inline const std::string& InputParameterLocationStepDTO::_internal_name() const {
  return name_.Get();
}
inline void InputParameterLocationStepDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InputParameterLocationStepDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InputParameterLocationStepDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.InputParameterLocationStepDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InputParameterLocationStepDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.InputParameterLocationStepDTO.name)
}

// .empowerops.volition.dto.RowColumnLengthLocationDTO row_column_and_length_location = 2;
inline bool InputParameterLocationStepDTO::_internal_has_row_column_and_length_location() const {
  return location_case() == kRowColumnAndLengthLocation;
}
inline bool InputParameterLocationStepDTO::has_row_column_and_length_location() const {
  return _internal_has_row_column_and_length_location();
}
inline void InputParameterLocationStepDTO::set_has_row_column_and_length_location() {
  _oneof_case_[0] = kRowColumnAndLengthLocation;
}
inline void InputParameterLocationStepDTO::clear_row_column_and_length_location() {
  if (_internal_has_row_column_and_length_location()) {
    if (GetArenaForAllocation() == nullptr) {
      delete location_.row_column_and_length_location_;
    }
    clear_has_location();
  }
}
inline ::empowerops::volition::dto::RowColumnLengthLocationDTO* InputParameterLocationStepDTO::release_row_column_and_length_location() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.InputParameterLocationStepDTO.row_column_and_length_location)
  if (_internal_has_row_column_and_length_location()) {
    clear_has_location();
      ::empowerops::volition::dto::RowColumnLengthLocationDTO* temp = location_.row_column_and_length_location_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    location_.row_column_and_length_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::RowColumnLengthLocationDTO& InputParameterLocationStepDTO::_internal_row_column_and_length_location() const {
  return _internal_has_row_column_and_length_location()
      ? *location_.row_column_and_length_location_
      : reinterpret_cast< ::empowerops::volition::dto::RowColumnLengthLocationDTO&>(::empowerops::volition::dto::_RowColumnLengthLocationDTO_default_instance_);
}
inline const ::empowerops::volition::dto::RowColumnLengthLocationDTO& InputParameterLocationStepDTO::row_column_and_length_location() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.InputParameterLocationStepDTO.row_column_and_length_location)
  return _internal_row_column_and_length_location();
}
inline ::empowerops::volition::dto::RowColumnLengthLocationDTO* InputParameterLocationStepDTO::unsafe_arena_release_row_column_and_length_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.InputParameterLocationStepDTO.row_column_and_length_location)
  if (_internal_has_row_column_and_length_location()) {
    clear_has_location();
    ::empowerops::volition::dto::RowColumnLengthLocationDTO* temp = location_.row_column_and_length_location_;
    location_.row_column_and_length_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InputParameterLocationStepDTO::unsafe_arena_set_allocated_row_column_and_length_location(::empowerops::volition::dto::RowColumnLengthLocationDTO* row_column_and_length_location) {
  clear_location();
  if (row_column_and_length_location) {
    set_has_row_column_and_length_location();
    location_.row_column_and_length_location_ = row_column_and_length_location;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.InputParameterLocationStepDTO.row_column_and_length_location)
}
inline ::empowerops::volition::dto::RowColumnLengthLocationDTO* InputParameterLocationStepDTO::_internal_mutable_row_column_and_length_location() {
  if (!_internal_has_row_column_and_length_location()) {
    clear_location();
    set_has_row_column_and_length_location();
    location_.row_column_and_length_location_ = CreateMaybeMessage< ::empowerops::volition::dto::RowColumnLengthLocationDTO >(GetArenaForAllocation());
  }
  return location_.row_column_and_length_location_;
}
inline ::empowerops::volition::dto::RowColumnLengthLocationDTO* InputParameterLocationStepDTO::mutable_row_column_and_length_location() {
  ::empowerops::volition::dto::RowColumnLengthLocationDTO* _msg = _internal_mutable_row_column_and_length_location();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.InputParameterLocationStepDTO.row_column_and_length_location)
  return _msg;
}

inline bool InputParameterLocationStepDTO::has_location() const {
  return location_case() != LOCATION_NOT_SET;
}
inline void InputParameterLocationStepDTO::clear_has_location() {
  _oneof_case_[0] = LOCATION_NOT_SET;
}
inline InputParameterLocationStepDTO::LocationCase InputParameterLocationStepDTO::location_case() const {
  return InputParameterLocationStepDTO::LocationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RowColumnLengthLocationDTO

// uint32 row_number = 1;
inline void RowColumnLengthLocationDTO::clear_row_number() {
  row_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RowColumnLengthLocationDTO::_internal_row_number() const {
  return row_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RowColumnLengthLocationDTO::row_number() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.RowColumnLengthLocationDTO.row_number)
  return _internal_row_number();
}
inline void RowColumnLengthLocationDTO::_internal_set_row_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  row_number_ = value;
}
inline void RowColumnLengthLocationDTO::set_row_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_number(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.RowColumnLengthLocationDTO.row_number)
}

// uint32 column_number = 2;
inline void RowColumnLengthLocationDTO::clear_column_number() {
  column_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RowColumnLengthLocationDTO::_internal_column_number() const {
  return column_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RowColumnLengthLocationDTO::column_number() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.RowColumnLengthLocationDTO.column_number)
  return _internal_column_number();
}
inline void RowColumnLengthLocationDTO::_internal_set_column_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  column_number_ = value;
}
inline void RowColumnLengthLocationDTO::set_column_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_number(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.RowColumnLengthLocationDTO.column_number)
}

// uint32 length = 3;
inline void RowColumnLengthLocationDTO::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RowColumnLengthLocationDTO::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RowColumnLengthLocationDTO::length() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.RowColumnLengthLocationDTO.length)
  return _internal_length();
}
inline void RowColumnLengthLocationDTO::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void RowColumnLengthLocationDTO::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.RowColumnLengthLocationDTO.length)
}

// -------------------------------------------------------------------

// AnchorLocationDTO

// string raw_anchor_text = 1;
inline void AnchorLocationDTO::clear_raw_anchor_text() {
  raw_anchor_text_.ClearToEmpty();
}
inline const std::string& AnchorLocationDTO::raw_anchor_text() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.AnchorLocationDTO.raw_anchor_text)
  return _internal_raw_anchor_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnchorLocationDTO::set_raw_anchor_text(ArgT0&& arg0, ArgT... args) {
 
 raw_anchor_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.AnchorLocationDTO.raw_anchor_text)
}
inline std::string* AnchorLocationDTO::mutable_raw_anchor_text() {
  std::string* _s = _internal_mutable_raw_anchor_text();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.AnchorLocationDTO.raw_anchor_text)
  return _s;
}
inline const std::string& AnchorLocationDTO::_internal_raw_anchor_text() const {
  return raw_anchor_text_.Get();
}
inline void AnchorLocationDTO::_internal_set_raw_anchor_text(const std::string& value) {
  
  raw_anchor_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnchorLocationDTO::_internal_mutable_raw_anchor_text() {
  
  return raw_anchor_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnchorLocationDTO::release_raw_anchor_text() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.AnchorLocationDTO.raw_anchor_text)
  return raw_anchor_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnchorLocationDTO::set_allocated_raw_anchor_text(std::string* raw_anchor_text) {
  if (raw_anchor_text != nullptr) {
    
  } else {
    
  }
  raw_anchor_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_anchor_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.AnchorLocationDTO.raw_anchor_text)
}

// uint32 occurance = 2;
inline void AnchorLocationDTO::clear_occurance() {
  occurance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorLocationDTO::_internal_occurance() const {
  return occurance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorLocationDTO::occurance() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.AnchorLocationDTO.occurance)
  return _internal_occurance();
}
inline void AnchorLocationDTO::_internal_set_occurance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  occurance_ = value;
}
inline void AnchorLocationDTO::set_occurance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_occurance(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.AnchorLocationDTO.occurance)
}

// -------------------------------------------------------------------

// OptimizationSettingsDTO

// optional .google.protobuf.Duration run_time = 11;
inline bool OptimizationSettingsDTO::_internal_has_run_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || run_time_ != nullptr);
  return value;
}
inline bool OptimizationSettingsDTO::has_run_time() const {
  return _internal_has_run_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& OptimizationSettingsDTO::_internal_run_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = run_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& OptimizationSettingsDTO::run_time() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationSettingsDTO.run_time)
  return _internal_run_time();
}
inline void OptimizationSettingsDTO::unsafe_arena_set_allocated_run_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* run_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_);
  }
  run_time_ = run_time;
  if (run_time) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizationSettingsDTO.run_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* OptimizationSettingsDTO::release_run_time() {
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = run_time_;
  run_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* OptimizationSettingsDTO::unsafe_arena_release_run_time() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizationSettingsDTO.run_time)
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = run_time_;
  run_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* OptimizationSettingsDTO::_internal_mutable_run_time() {
  _has_bits_[0] |= 0x00000001u;
  if (run_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    run_time_ = p;
  }
  return run_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* OptimizationSettingsDTO::mutable_run_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_run_time();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationSettingsDTO.run_time)
  return _msg;
}
inline void OptimizationSettingsDTO::set_allocated_run_time(::PROTOBUF_NAMESPACE_ID::Duration* run_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time_);
  }
  if (run_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_time));
    if (message_arena != submessage_arena) {
      run_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  run_time_ = run_time;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.OptimizationSettingsDTO.run_time)
}

// optional uint32 iteration_count = 12;
inline bool OptimizationSettingsDTO::_internal_has_iteration_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OptimizationSettingsDTO::has_iteration_count() const {
  return _internal_has_iteration_count();
}
inline void OptimizationSettingsDTO::clear_iteration_count() {
  iteration_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptimizationSettingsDTO::_internal_iteration_count() const {
  return iteration_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptimizationSettingsDTO::iteration_count() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationSettingsDTO.iteration_count)
  return _internal_iteration_count();
}
inline void OptimizationSettingsDTO::_internal_set_iteration_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  iteration_count_ = value;
}
inline void OptimizationSettingsDTO::set_iteration_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iteration_count(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OptimizationSettingsDTO.iteration_count)
}

// optional double target_objective_value = 13;
inline bool OptimizationSettingsDTO::_internal_has_target_objective_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OptimizationSettingsDTO::has_target_objective_value() const {
  return _internal_has_target_objective_value();
}
inline void OptimizationSettingsDTO::clear_target_objective_value() {
  target_objective_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double OptimizationSettingsDTO::_internal_target_objective_value() const {
  return target_objective_value_;
}
inline double OptimizationSettingsDTO::target_objective_value() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationSettingsDTO.target_objective_value)
  return _internal_target_objective_value();
}
inline void OptimizationSettingsDTO::_internal_set_target_objective_value(double value) {
  _has_bits_[0] |= 0x00000004u;
  target_objective_value_ = value;
}
inline void OptimizationSettingsDTO::set_target_objective_value(double value) {
  _internal_set_target_objective_value(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OptimizationSettingsDTO.target_objective_value)
}

// -------------------------------------------------------------------

// OptimizerGeneratedQueryDTO

// .empowerops.volition.dto.SimulationEvaluationRequestDTO evaluation_request = 1;
inline bool OptimizerGeneratedQueryDTO::_internal_has_evaluation_request() const {
  return purpose_case() == kEvaluationRequest;
}
inline bool OptimizerGeneratedQueryDTO::has_evaluation_request() const {
  return _internal_has_evaluation_request();
}
inline void OptimizerGeneratedQueryDTO::set_has_evaluation_request() {
  _oneof_case_[0] = kEvaluationRequest;
}
inline void OptimizerGeneratedQueryDTO::clear_evaluation_request() {
  if (_internal_has_evaluation_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete purpose_.evaluation_request_;
    }
    clear_has_purpose();
  }
}
inline ::empowerops::volition::dto::SimulationEvaluationRequestDTO* OptimizerGeneratedQueryDTO::release_evaluation_request() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.evaluation_request)
  if (_internal_has_evaluation_request()) {
    clear_has_purpose();
      ::empowerops::volition::dto::SimulationEvaluationRequestDTO* temp = purpose_.evaluation_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    purpose_.evaluation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::SimulationEvaluationRequestDTO& OptimizerGeneratedQueryDTO::_internal_evaluation_request() const {
  return _internal_has_evaluation_request()
      ? *purpose_.evaluation_request_
      : reinterpret_cast< ::empowerops::volition::dto::SimulationEvaluationRequestDTO&>(::empowerops::volition::dto::_SimulationEvaluationRequestDTO_default_instance_);
}
inline const ::empowerops::volition::dto::SimulationEvaluationRequestDTO& OptimizerGeneratedQueryDTO::evaluation_request() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizerGeneratedQueryDTO.evaluation_request)
  return _internal_evaluation_request();
}
inline ::empowerops::volition::dto::SimulationEvaluationRequestDTO* OptimizerGeneratedQueryDTO::unsafe_arena_release_evaluation_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.evaluation_request)
  if (_internal_has_evaluation_request()) {
    clear_has_purpose();
    ::empowerops::volition::dto::SimulationEvaluationRequestDTO* temp = purpose_.evaluation_request_;
    purpose_.evaluation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OptimizerGeneratedQueryDTO::unsafe_arena_set_allocated_evaluation_request(::empowerops::volition::dto::SimulationEvaluationRequestDTO* evaluation_request) {
  clear_purpose();
  if (evaluation_request) {
    set_has_evaluation_request();
    purpose_.evaluation_request_ = evaluation_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizerGeneratedQueryDTO.evaluation_request)
}
inline ::empowerops::volition::dto::SimulationEvaluationRequestDTO* OptimizerGeneratedQueryDTO::_internal_mutable_evaluation_request() {
  if (!_internal_has_evaluation_request()) {
    clear_purpose();
    set_has_evaluation_request();
    purpose_.evaluation_request_ = CreateMaybeMessage< ::empowerops::volition::dto::SimulationEvaluationRequestDTO >(GetArenaForAllocation());
  }
  return purpose_.evaluation_request_;
}
inline ::empowerops::volition::dto::SimulationEvaluationRequestDTO* OptimizerGeneratedQueryDTO::mutable_evaluation_request() {
  ::empowerops::volition::dto::SimulationEvaluationRequestDTO* _msg = _internal_mutable_evaluation_request();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizerGeneratedQueryDTO.evaluation_request)
  return _msg;
}

// .empowerops.volition.dto.SimulationCancelRequestDTO cancel_request = 3;
inline bool OptimizerGeneratedQueryDTO::_internal_has_cancel_request() const {
  return purpose_case() == kCancelRequest;
}
inline bool OptimizerGeneratedQueryDTO::has_cancel_request() const {
  return _internal_has_cancel_request();
}
inline void OptimizerGeneratedQueryDTO::set_has_cancel_request() {
  _oneof_case_[0] = kCancelRequest;
}
inline void OptimizerGeneratedQueryDTO::clear_cancel_request() {
  if (_internal_has_cancel_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete purpose_.cancel_request_;
    }
    clear_has_purpose();
  }
}
inline ::empowerops::volition::dto::SimulationCancelRequestDTO* OptimizerGeneratedQueryDTO::release_cancel_request() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.cancel_request)
  if (_internal_has_cancel_request()) {
    clear_has_purpose();
      ::empowerops::volition::dto::SimulationCancelRequestDTO* temp = purpose_.cancel_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    purpose_.cancel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::SimulationCancelRequestDTO& OptimizerGeneratedQueryDTO::_internal_cancel_request() const {
  return _internal_has_cancel_request()
      ? *purpose_.cancel_request_
      : reinterpret_cast< ::empowerops::volition::dto::SimulationCancelRequestDTO&>(::empowerops::volition::dto::_SimulationCancelRequestDTO_default_instance_);
}
inline const ::empowerops::volition::dto::SimulationCancelRequestDTO& OptimizerGeneratedQueryDTO::cancel_request() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizerGeneratedQueryDTO.cancel_request)
  return _internal_cancel_request();
}
inline ::empowerops::volition::dto::SimulationCancelRequestDTO* OptimizerGeneratedQueryDTO::unsafe_arena_release_cancel_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.cancel_request)
  if (_internal_has_cancel_request()) {
    clear_has_purpose();
    ::empowerops::volition::dto::SimulationCancelRequestDTO* temp = purpose_.cancel_request_;
    purpose_.cancel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OptimizerGeneratedQueryDTO::unsafe_arena_set_allocated_cancel_request(::empowerops::volition::dto::SimulationCancelRequestDTO* cancel_request) {
  clear_purpose();
  if (cancel_request) {
    set_has_cancel_request();
    purpose_.cancel_request_ = cancel_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizerGeneratedQueryDTO.cancel_request)
}
inline ::empowerops::volition::dto::SimulationCancelRequestDTO* OptimizerGeneratedQueryDTO::_internal_mutable_cancel_request() {
  if (!_internal_has_cancel_request()) {
    clear_purpose();
    set_has_cancel_request();
    purpose_.cancel_request_ = CreateMaybeMessage< ::empowerops::volition::dto::SimulationCancelRequestDTO >(GetArenaForAllocation());
  }
  return purpose_.cancel_request_;
}
inline ::empowerops::volition::dto::SimulationCancelRequestDTO* OptimizerGeneratedQueryDTO::mutable_cancel_request() {
  ::empowerops::volition::dto::SimulationCancelRequestDTO* _msg = _internal_mutable_cancel_request();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizerGeneratedQueryDTO.cancel_request)
  return _msg;
}

// .empowerops.volition.dto.OptimizationStartedNotificationDTO optimization_started_notification = 5;
inline bool OptimizerGeneratedQueryDTO::_internal_has_optimization_started_notification() const {
  return purpose_case() == kOptimizationStartedNotification;
}
inline bool OptimizerGeneratedQueryDTO::has_optimization_started_notification() const {
  return _internal_has_optimization_started_notification();
}
inline void OptimizerGeneratedQueryDTO::set_has_optimization_started_notification() {
  _oneof_case_[0] = kOptimizationStartedNotification;
}
inline void OptimizerGeneratedQueryDTO::clear_optimization_started_notification() {
  if (_internal_has_optimization_started_notification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete purpose_.optimization_started_notification_;
    }
    clear_has_purpose();
  }
}
inline ::empowerops::volition::dto::OptimizationStartedNotificationDTO* OptimizerGeneratedQueryDTO::release_optimization_started_notification() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_started_notification)
  if (_internal_has_optimization_started_notification()) {
    clear_has_purpose();
      ::empowerops::volition::dto::OptimizationStartedNotificationDTO* temp = purpose_.optimization_started_notification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    purpose_.optimization_started_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::OptimizationStartedNotificationDTO& OptimizerGeneratedQueryDTO::_internal_optimization_started_notification() const {
  return _internal_has_optimization_started_notification()
      ? *purpose_.optimization_started_notification_
      : reinterpret_cast< ::empowerops::volition::dto::OptimizationStartedNotificationDTO&>(::empowerops::volition::dto::_OptimizationStartedNotificationDTO_default_instance_);
}
inline const ::empowerops::volition::dto::OptimizationStartedNotificationDTO& OptimizerGeneratedQueryDTO::optimization_started_notification() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_started_notification)
  return _internal_optimization_started_notification();
}
inline ::empowerops::volition::dto::OptimizationStartedNotificationDTO* OptimizerGeneratedQueryDTO::unsafe_arena_release_optimization_started_notification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_started_notification)
  if (_internal_has_optimization_started_notification()) {
    clear_has_purpose();
    ::empowerops::volition::dto::OptimizationStartedNotificationDTO* temp = purpose_.optimization_started_notification_;
    purpose_.optimization_started_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OptimizerGeneratedQueryDTO::unsafe_arena_set_allocated_optimization_started_notification(::empowerops::volition::dto::OptimizationStartedNotificationDTO* optimization_started_notification) {
  clear_purpose();
  if (optimization_started_notification) {
    set_has_optimization_started_notification();
    purpose_.optimization_started_notification_ = optimization_started_notification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_started_notification)
}
inline ::empowerops::volition::dto::OptimizationStartedNotificationDTO* OptimizerGeneratedQueryDTO::_internal_mutable_optimization_started_notification() {
  if (!_internal_has_optimization_started_notification()) {
    clear_purpose();
    set_has_optimization_started_notification();
    purpose_.optimization_started_notification_ = CreateMaybeMessage< ::empowerops::volition::dto::OptimizationStartedNotificationDTO >(GetArenaForAllocation());
  }
  return purpose_.optimization_started_notification_;
}
inline ::empowerops::volition::dto::OptimizationStartedNotificationDTO* OptimizerGeneratedQueryDTO::mutable_optimization_started_notification() {
  ::empowerops::volition::dto::OptimizationStartedNotificationDTO* _msg = _internal_mutable_optimization_started_notification();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_started_notification)
  return _msg;
}

// .empowerops.volition.dto.OptimizationFinishedNotificationDTO optimization_finished_notification = 6;
inline bool OptimizerGeneratedQueryDTO::_internal_has_optimization_finished_notification() const {
  return purpose_case() == kOptimizationFinishedNotification;
}
inline bool OptimizerGeneratedQueryDTO::has_optimization_finished_notification() const {
  return _internal_has_optimization_finished_notification();
}
inline void OptimizerGeneratedQueryDTO::set_has_optimization_finished_notification() {
  _oneof_case_[0] = kOptimizationFinishedNotification;
}
inline void OptimizerGeneratedQueryDTO::clear_optimization_finished_notification() {
  if (_internal_has_optimization_finished_notification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete purpose_.optimization_finished_notification_;
    }
    clear_has_purpose();
  }
}
inline ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* OptimizerGeneratedQueryDTO::release_optimization_finished_notification() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_finished_notification)
  if (_internal_has_optimization_finished_notification()) {
    clear_has_purpose();
      ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* temp = purpose_.optimization_finished_notification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    purpose_.optimization_finished_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::OptimizationFinishedNotificationDTO& OptimizerGeneratedQueryDTO::_internal_optimization_finished_notification() const {
  return _internal_has_optimization_finished_notification()
      ? *purpose_.optimization_finished_notification_
      : reinterpret_cast< ::empowerops::volition::dto::OptimizationFinishedNotificationDTO&>(::empowerops::volition::dto::_OptimizationFinishedNotificationDTO_default_instance_);
}
inline const ::empowerops::volition::dto::OptimizationFinishedNotificationDTO& OptimizerGeneratedQueryDTO::optimization_finished_notification() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_finished_notification)
  return _internal_optimization_finished_notification();
}
inline ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* OptimizerGeneratedQueryDTO::unsafe_arena_release_optimization_finished_notification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_finished_notification)
  if (_internal_has_optimization_finished_notification()) {
    clear_has_purpose();
    ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* temp = purpose_.optimization_finished_notification_;
    purpose_.optimization_finished_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OptimizerGeneratedQueryDTO::unsafe_arena_set_allocated_optimization_finished_notification(::empowerops::volition::dto::OptimizationFinishedNotificationDTO* optimization_finished_notification) {
  clear_purpose();
  if (optimization_finished_notification) {
    set_has_optimization_finished_notification();
    purpose_.optimization_finished_notification_ = optimization_finished_notification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_finished_notification)
}
inline ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* OptimizerGeneratedQueryDTO::_internal_mutable_optimization_finished_notification() {
  if (!_internal_has_optimization_finished_notification()) {
    clear_purpose();
    set_has_optimization_finished_notification();
    purpose_.optimization_finished_notification_ = CreateMaybeMessage< ::empowerops::volition::dto::OptimizationFinishedNotificationDTO >(GetArenaForAllocation());
  }
  return purpose_.optimization_finished_notification_;
}
inline ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* OptimizerGeneratedQueryDTO::mutable_optimization_finished_notification() {
  ::empowerops::volition::dto::OptimizationFinishedNotificationDTO* _msg = _internal_mutable_optimization_finished_notification();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_finished_notification)
  return _msg;
}

// .empowerops.volition.dto.OptimizationNotStartedNotificationDTO optimization_not_started_notification = 7;
inline bool OptimizerGeneratedQueryDTO::_internal_has_optimization_not_started_notification() const {
  return purpose_case() == kOptimizationNotStartedNotification;
}
inline bool OptimizerGeneratedQueryDTO::has_optimization_not_started_notification() const {
  return _internal_has_optimization_not_started_notification();
}
inline void OptimizerGeneratedQueryDTO::set_has_optimization_not_started_notification() {
  _oneof_case_[0] = kOptimizationNotStartedNotification;
}
inline void OptimizerGeneratedQueryDTO::clear_optimization_not_started_notification() {
  if (_internal_has_optimization_not_started_notification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete purpose_.optimization_not_started_notification_;
    }
    clear_has_purpose();
  }
}
inline ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* OptimizerGeneratedQueryDTO::release_optimization_not_started_notification() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_not_started_notification)
  if (_internal_has_optimization_not_started_notification()) {
    clear_has_purpose();
      ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* temp = purpose_.optimization_not_started_notification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    purpose_.optimization_not_started_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO& OptimizerGeneratedQueryDTO::_internal_optimization_not_started_notification() const {
  return _internal_has_optimization_not_started_notification()
      ? *purpose_.optimization_not_started_notification_
      : reinterpret_cast< ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO&>(::empowerops::volition::dto::_OptimizationNotStartedNotificationDTO_default_instance_);
}
inline const ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO& OptimizerGeneratedQueryDTO::optimization_not_started_notification() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_not_started_notification)
  return _internal_optimization_not_started_notification();
}
inline ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* OptimizerGeneratedQueryDTO::unsafe_arena_release_optimization_not_started_notification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_not_started_notification)
  if (_internal_has_optimization_not_started_notification()) {
    clear_has_purpose();
    ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* temp = purpose_.optimization_not_started_notification_;
    purpose_.optimization_not_started_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OptimizerGeneratedQueryDTO::unsafe_arena_set_allocated_optimization_not_started_notification(::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* optimization_not_started_notification) {
  clear_purpose();
  if (optimization_not_started_notification) {
    set_has_optimization_not_started_notification();
    purpose_.optimization_not_started_notification_ = optimization_not_started_notification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_not_started_notification)
}
inline ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* OptimizerGeneratedQueryDTO::_internal_mutable_optimization_not_started_notification() {
  if (!_internal_has_optimization_not_started_notification()) {
    clear_purpose();
    set_has_optimization_not_started_notification();
    purpose_.optimization_not_started_notification_ = CreateMaybeMessage< ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO >(GetArenaForAllocation());
  }
  return purpose_.optimization_not_started_notification_;
}
inline ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* OptimizerGeneratedQueryDTO::mutable_optimization_not_started_notification() {
  ::empowerops::volition::dto::OptimizationNotStartedNotificationDTO* _msg = _internal_mutable_optimization_not_started_notification();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizerGeneratedQueryDTO.optimization_not_started_notification)
  return _msg;
}

// .empowerops.volition.dto.DesignIterationCompletedNotificationDTO design_iteration_completed_notification = 8;
inline bool OptimizerGeneratedQueryDTO::_internal_has_design_iteration_completed_notification() const {
  return purpose_case() == kDesignIterationCompletedNotification;
}
inline bool OptimizerGeneratedQueryDTO::has_design_iteration_completed_notification() const {
  return _internal_has_design_iteration_completed_notification();
}
inline void OptimizerGeneratedQueryDTO::set_has_design_iteration_completed_notification() {
  _oneof_case_[0] = kDesignIterationCompletedNotification;
}
inline void OptimizerGeneratedQueryDTO::clear_design_iteration_completed_notification() {
  if (_internal_has_design_iteration_completed_notification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete purpose_.design_iteration_completed_notification_;
    }
    clear_has_purpose();
  }
}
inline ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* OptimizerGeneratedQueryDTO::release_design_iteration_completed_notification() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.design_iteration_completed_notification)
  if (_internal_has_design_iteration_completed_notification()) {
    clear_has_purpose();
      ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* temp = purpose_.design_iteration_completed_notification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    purpose_.design_iteration_completed_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO& OptimizerGeneratedQueryDTO::_internal_design_iteration_completed_notification() const {
  return _internal_has_design_iteration_completed_notification()
      ? *purpose_.design_iteration_completed_notification_
      : reinterpret_cast< ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO&>(::empowerops::volition::dto::_DesignIterationCompletedNotificationDTO_default_instance_);
}
inline const ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO& OptimizerGeneratedQueryDTO::design_iteration_completed_notification() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizerGeneratedQueryDTO.design_iteration_completed_notification)
  return _internal_design_iteration_completed_notification();
}
inline ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* OptimizerGeneratedQueryDTO::unsafe_arena_release_design_iteration_completed_notification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.OptimizerGeneratedQueryDTO.design_iteration_completed_notification)
  if (_internal_has_design_iteration_completed_notification()) {
    clear_has_purpose();
    ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* temp = purpose_.design_iteration_completed_notification_;
    purpose_.design_iteration_completed_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OptimizerGeneratedQueryDTO::unsafe_arena_set_allocated_design_iteration_completed_notification(::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* design_iteration_completed_notification) {
  clear_purpose();
  if (design_iteration_completed_notification) {
    set_has_design_iteration_completed_notification();
    purpose_.design_iteration_completed_notification_ = design_iteration_completed_notification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizerGeneratedQueryDTO.design_iteration_completed_notification)
}
inline ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* OptimizerGeneratedQueryDTO::_internal_mutable_design_iteration_completed_notification() {
  if (!_internal_has_design_iteration_completed_notification()) {
    clear_purpose();
    set_has_design_iteration_completed_notification();
    purpose_.design_iteration_completed_notification_ = CreateMaybeMessage< ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO >(GetArenaForAllocation());
  }
  return purpose_.design_iteration_completed_notification_;
}
inline ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* OptimizerGeneratedQueryDTO::mutable_design_iteration_completed_notification() {
  ::empowerops::volition::dto::DesignIterationCompletedNotificationDTO* _msg = _internal_mutable_design_iteration_completed_notification();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizerGeneratedQueryDTO.design_iteration_completed_notification)
  return _msg;
}

inline bool OptimizerGeneratedQueryDTO::has_purpose() const {
  return purpose_case() != PURPOSE_NOT_SET;
}
inline void OptimizerGeneratedQueryDTO::clear_has_purpose() {
  _oneof_case_[0] = PURPOSE_NOT_SET;
}
inline OptimizerGeneratedQueryDTO::PurposeCase OptimizerGeneratedQueryDTO::purpose_case() const {
  return OptimizerGeneratedQueryDTO::PurposeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SimulationEvaluationRequestDTO

// string name = 1;
inline void SimulationEvaluationRequestDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimulationEvaluationRequestDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationEvaluationRequestDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationEvaluationRequestDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationEvaluationRequestDTO.name)
}
inline std::string* SimulationEvaluationRequestDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationEvaluationRequestDTO.name)
  return _s;
}
inline const std::string& SimulationEvaluationRequestDTO::_internal_name() const {
  return name_.Get();
}
inline void SimulationEvaluationRequestDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationRequestDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationRequestDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationEvaluationRequestDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationEvaluationRequestDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationEvaluationRequestDTO.name)
}

// map<string, double> input_vector = 2;
inline int SimulationEvaluationRequestDTO::_internal_input_vector_size() const {
  return input_vector_.size();
}
inline int SimulationEvaluationRequestDTO::input_vector_size() const {
  return _internal_input_vector_size();
}
inline void SimulationEvaluationRequestDTO::clear_input_vector() {
  input_vector_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
SimulationEvaluationRequestDTO::_internal_input_vector() const {
  return input_vector_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
SimulationEvaluationRequestDTO::input_vector() const {
  // @@protoc_insertion_point(field_map:empowerops.volition.dto.SimulationEvaluationRequestDTO.input_vector)
  return _internal_input_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
SimulationEvaluationRequestDTO::_internal_mutable_input_vector() {
  return input_vector_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
SimulationEvaluationRequestDTO::mutable_input_vector() {
  // @@protoc_insertion_point(field_mutable_map:empowerops.volition.dto.SimulationEvaluationRequestDTO.input_vector)
  return _internal_mutable_input_vector();
}

// -------------------------------------------------------------------

// SimulationCancelRequestDTO

// string name = 1;
inline void SimulationCancelRequestDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimulationCancelRequestDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationCancelRequestDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationCancelRequestDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationCancelRequestDTO.name)
}
inline std::string* SimulationCancelRequestDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationCancelRequestDTO.name)
  return _s;
}
inline const std::string& SimulationCancelRequestDTO::_internal_name() const {
  return name_.Get();
}
inline void SimulationCancelRequestDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationCancelRequestDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationCancelRequestDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationCancelRequestDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationCancelRequestDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationCancelRequestDTO.name)
}

// -------------------------------------------------------------------

// OptimizationStartedNotificationDTO

// .empowerops.volition.dto.UUIDDTO run_ID = 1;
inline bool OptimizationStartedNotificationDTO::_internal_has_run_id() const {
  return this != internal_default_instance() && run_id_ != nullptr;
}
inline bool OptimizationStartedNotificationDTO::has_run_id() const {
  return _internal_has_run_id();
}
inline void OptimizationStartedNotificationDTO::clear_run_id() {
  if (GetArenaForAllocation() == nullptr && run_id_ != nullptr) {
    delete run_id_;
  }
  run_id_ = nullptr;
}
inline const ::empowerops::volition::dto::UUIDDTO& OptimizationStartedNotificationDTO::_internal_run_id() const {
  const ::empowerops::volition::dto::UUIDDTO* p = run_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::UUIDDTO&>(
      ::empowerops::volition::dto::_UUIDDTO_default_instance_);
}
inline const ::empowerops::volition::dto::UUIDDTO& OptimizationStartedNotificationDTO::run_id() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationStartedNotificationDTO.run_ID)
  return _internal_run_id();
}
inline void OptimizationStartedNotificationDTO::unsafe_arena_set_allocated_run_id(
    ::empowerops::volition::dto::UUIDDTO* run_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_id_);
  }
  run_id_ = run_id;
  if (run_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizationStartedNotificationDTO.run_ID)
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationStartedNotificationDTO::release_run_id() {
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationStartedNotificationDTO::unsafe_arena_release_run_id() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizationStartedNotificationDTO.run_ID)
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationStartedNotificationDTO::_internal_mutable_run_id() {
  
  if (run_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::UUIDDTO>(GetArenaForAllocation());
    run_id_ = p;
  }
  return run_id_;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationStartedNotificationDTO::mutable_run_id() {
  ::empowerops::volition::dto::UUIDDTO* _msg = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationStartedNotificationDTO.run_ID)
  return _msg;
}
inline void OptimizationStartedNotificationDTO::set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_id_;
  }
  if (run_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::UUIDDTO>::GetOwningArena(run_id);
    if (message_arena != submessage_arena) {
      run_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_id, submessage_arena);
    }
    
  } else {
    
  }
  run_id_ = run_id;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.OptimizationStartedNotificationDTO.run_ID)
}

// -------------------------------------------------------------------

// OptimizationFinishedNotificationDTO

// .empowerops.volition.dto.UUIDDTO run_ID = 1;
inline bool OptimizationFinishedNotificationDTO::_internal_has_run_id() const {
  return this != internal_default_instance() && run_id_ != nullptr;
}
inline bool OptimizationFinishedNotificationDTO::has_run_id() const {
  return _internal_has_run_id();
}
inline void OptimizationFinishedNotificationDTO::clear_run_id() {
  if (GetArenaForAllocation() == nullptr && run_id_ != nullptr) {
    delete run_id_;
  }
  run_id_ = nullptr;
}
inline const ::empowerops::volition::dto::UUIDDTO& OptimizationFinishedNotificationDTO::_internal_run_id() const {
  const ::empowerops::volition::dto::UUIDDTO* p = run_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::UUIDDTO&>(
      ::empowerops::volition::dto::_UUIDDTO_default_instance_);
}
inline const ::empowerops::volition::dto::UUIDDTO& OptimizationFinishedNotificationDTO::run_id() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationFinishedNotificationDTO.run_ID)
  return _internal_run_id();
}
inline void OptimizationFinishedNotificationDTO::unsafe_arena_set_allocated_run_id(
    ::empowerops::volition::dto::UUIDDTO* run_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_id_);
  }
  run_id_ = run_id;
  if (run_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizationFinishedNotificationDTO.run_ID)
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationFinishedNotificationDTO::release_run_id() {
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationFinishedNotificationDTO::unsafe_arena_release_run_id() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizationFinishedNotificationDTO.run_ID)
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationFinishedNotificationDTO::_internal_mutable_run_id() {
  
  if (run_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::UUIDDTO>(GetArenaForAllocation());
    run_id_ = p;
  }
  return run_id_;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationFinishedNotificationDTO::mutable_run_id() {
  ::empowerops::volition::dto::UUIDDTO* _msg = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationFinishedNotificationDTO.run_ID)
  return _msg;
}
inline void OptimizationFinishedNotificationDTO::set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_id_;
  }
  if (run_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::UUIDDTO>::GetOwningArena(run_id);
    if (message_arena != submessage_arena) {
      run_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_id, submessage_arena);
    }
    
  } else {
    
  }
  run_id_ = run_id;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.OptimizationFinishedNotificationDTO.run_ID)
}

// -------------------------------------------------------------------

// OptimizationNotStartedNotificationDTO

// repeated string issues = 1;
inline int OptimizationNotStartedNotificationDTO::_internal_issues_size() const {
  return issues_.size();
}
inline int OptimizationNotStartedNotificationDTO::issues_size() const {
  return _internal_issues_size();
}
inline void OptimizationNotStartedNotificationDTO::clear_issues() {
  issues_.Clear();
}
inline std::string* OptimizationNotStartedNotificationDTO::add_issues() {
  std::string* _s = _internal_add_issues();
  // @@protoc_insertion_point(field_add_mutable:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
  return _s;
}
inline const std::string& OptimizationNotStartedNotificationDTO::_internal_issues(int index) const {
  return issues_.Get(index);
}
inline const std::string& OptimizationNotStartedNotificationDTO::issues(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
  return _internal_issues(index);
}
inline std::string* OptimizationNotStartedNotificationDTO::mutable_issues(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
  return issues_.Mutable(index);
}
inline void OptimizationNotStartedNotificationDTO::set_issues(int index, const std::string& value) {
  issues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
}
inline void OptimizationNotStartedNotificationDTO::set_issues(int index, std::string&& value) {
  issues_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
}
inline void OptimizationNotStartedNotificationDTO::set_issues(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  issues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
}
inline void OptimizationNotStartedNotificationDTO::set_issues(int index, const char* value, size_t size) {
  issues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
}
inline std::string* OptimizationNotStartedNotificationDTO::_internal_add_issues() {
  return issues_.Add();
}
inline void OptimizationNotStartedNotificationDTO::add_issues(const std::string& value) {
  issues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
}
inline void OptimizationNotStartedNotificationDTO::add_issues(std::string&& value) {
  issues_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
}
inline void OptimizationNotStartedNotificationDTO::add_issues(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  issues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
}
inline void OptimizationNotStartedNotificationDTO::add_issues(const char* value, size_t size) {
  issues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OptimizationNotStartedNotificationDTO::issues() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
  return issues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OptimizationNotStartedNotificationDTO::mutable_issues() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.OptimizationNotStartedNotificationDTO.issues)
  return &issues_;
}

// -------------------------------------------------------------------

// DesignIterationCompletedNotificationDTO

// .empowerops.volition.dto.DesignRowDTO design_point = 1;
inline bool DesignIterationCompletedNotificationDTO::_internal_has_design_point() const {
  return this != internal_default_instance() && design_point_ != nullptr;
}
inline bool DesignIterationCompletedNotificationDTO::has_design_point() const {
  return _internal_has_design_point();
}
inline void DesignIterationCompletedNotificationDTO::clear_design_point() {
  if (GetArenaForAllocation() == nullptr && design_point_ != nullptr) {
    delete design_point_;
  }
  design_point_ = nullptr;
}
inline const ::empowerops::volition::dto::DesignRowDTO& DesignIterationCompletedNotificationDTO::_internal_design_point() const {
  const ::empowerops::volition::dto::DesignRowDTO* p = design_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::DesignRowDTO&>(
      ::empowerops::volition::dto::_DesignRowDTO_default_instance_);
}
inline const ::empowerops::volition::dto::DesignRowDTO& DesignIterationCompletedNotificationDTO::design_point() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.DesignIterationCompletedNotificationDTO.design_point)
  return _internal_design_point();
}
inline void DesignIterationCompletedNotificationDTO::unsafe_arena_set_allocated_design_point(
    ::empowerops::volition::dto::DesignRowDTO* design_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(design_point_);
  }
  design_point_ = design_point;
  if (design_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.DesignIterationCompletedNotificationDTO.design_point)
}
inline ::empowerops::volition::dto::DesignRowDTO* DesignIterationCompletedNotificationDTO::release_design_point() {
  
  ::empowerops::volition::dto::DesignRowDTO* temp = design_point_;
  design_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::DesignRowDTO* DesignIterationCompletedNotificationDTO::unsafe_arena_release_design_point() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.DesignIterationCompletedNotificationDTO.design_point)
  
  ::empowerops::volition::dto::DesignRowDTO* temp = design_point_;
  design_point_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::DesignRowDTO* DesignIterationCompletedNotificationDTO::_internal_mutable_design_point() {
  
  if (design_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::DesignRowDTO>(GetArenaForAllocation());
    design_point_ = p;
  }
  return design_point_;
}
inline ::empowerops::volition::dto::DesignRowDTO* DesignIterationCompletedNotificationDTO::mutable_design_point() {
  ::empowerops::volition::dto::DesignRowDTO* _msg = _internal_mutable_design_point();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.DesignIterationCompletedNotificationDTO.design_point)
  return _msg;
}
inline void DesignIterationCompletedNotificationDTO::set_allocated_design_point(::empowerops::volition::dto::DesignRowDTO* design_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete design_point_;
  }
  if (design_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::DesignRowDTO>::GetOwningArena(design_point);
    if (message_arena != submessage_arena) {
      design_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, design_point, submessage_arena);
    }
    
  } else {
    
  }
  design_point_ = design_point;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.DesignIterationCompletedNotificationDTO.design_point)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SimulationEvaluationCompletedResponseDTO

// string name = 1;
inline void SimulationEvaluationCompletedResponseDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimulationEvaluationCompletedResponseDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationEvaluationCompletedResponseDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.name)
}
inline std::string* SimulationEvaluationCompletedResponseDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.name)
  return _s;
}
inline const std::string& SimulationEvaluationCompletedResponseDTO::_internal_name() const {
  return name_.Get();
}
inline void SimulationEvaluationCompletedResponseDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationCompletedResponseDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationCompletedResponseDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationEvaluationCompletedResponseDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.name)
}

// map<string, double> output_vector = 2;
inline int SimulationEvaluationCompletedResponseDTO::_internal_output_vector_size() const {
  return output_vector_.size();
}
inline int SimulationEvaluationCompletedResponseDTO::output_vector_size() const {
  return _internal_output_vector_size();
}
inline void SimulationEvaluationCompletedResponseDTO::clear_output_vector() {
  output_vector_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
SimulationEvaluationCompletedResponseDTO::_internal_output_vector() const {
  return output_vector_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
SimulationEvaluationCompletedResponseDTO::output_vector() const {
  // @@protoc_insertion_point(field_map:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.output_vector)
  return _internal_output_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
SimulationEvaluationCompletedResponseDTO::_internal_mutable_output_vector() {
  return output_vector_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
SimulationEvaluationCompletedResponseDTO::mutable_output_vector() {
  // @@protoc_insertion_point(field_mutable_map:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.output_vector)
  return _internal_mutable_output_vector();
}

// bool abort_optimization = 3;
inline void SimulationEvaluationCompletedResponseDTO::clear_abort_optimization() {
  abort_optimization_ = false;
}
inline bool SimulationEvaluationCompletedResponseDTO::_internal_abort_optimization() const {
  return abort_optimization_;
}
inline bool SimulationEvaluationCompletedResponseDTO::abort_optimization() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.abort_optimization)
  return _internal_abort_optimization();
}
inline void SimulationEvaluationCompletedResponseDTO::_internal_set_abort_optimization(bool value) {
  
  abort_optimization_ = value;
}
inline void SimulationEvaluationCompletedResponseDTO::set_abort_optimization(bool value) {
  _internal_set_abort_optimization(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationEvaluationCompletedResponseDTO.abort_optimization)
}

// -------------------------------------------------------------------

// SimulationEvaluationResultConfirmDTO

// -------------------------------------------------------------------

// SimulationEvaluationErrorResponseDTO

// string name = 1;
inline void SimulationEvaluationErrorResponseDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimulationEvaluationErrorResponseDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationEvaluationErrorResponseDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.name)
}
inline std::string* SimulationEvaluationErrorResponseDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.name)
  return _s;
}
inline const std::string& SimulationEvaluationErrorResponseDTO::_internal_name() const {
  return name_.Get();
}
inline void SimulationEvaluationErrorResponseDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationErrorResponseDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationErrorResponseDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationEvaluationErrorResponseDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.name)
}

// string message = 2;
inline void SimulationEvaluationErrorResponseDTO::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SimulationEvaluationErrorResponseDTO::message() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationEvaluationErrorResponseDTO::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.message)
}
inline std::string* SimulationEvaluationErrorResponseDTO::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.message)
  return _s;
}
inline const std::string& SimulationEvaluationErrorResponseDTO::_internal_message() const {
  return message_.Get();
}
inline void SimulationEvaluationErrorResponseDTO::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationErrorResponseDTO::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationErrorResponseDTO::release_message() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationEvaluationErrorResponseDTO::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.message)
}

// string exception = 3;
inline void SimulationEvaluationErrorResponseDTO::clear_exception() {
  exception_.ClearToEmpty();
}
inline const std::string& SimulationEvaluationErrorResponseDTO::exception() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.exception)
  return _internal_exception();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimulationEvaluationErrorResponseDTO::set_exception(ArgT0&& arg0, ArgT... args) {
 
 exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.exception)
}
inline std::string* SimulationEvaluationErrorResponseDTO::mutable_exception() {
  std::string* _s = _internal_mutable_exception();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.exception)
  return _s;
}
inline const std::string& SimulationEvaluationErrorResponseDTO::_internal_exception() const {
  return exception_.Get();
}
inline void SimulationEvaluationErrorResponseDTO::_internal_set_exception(const std::string& value) {
  
  exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationErrorResponseDTO::_internal_mutable_exception() {
  
  return exception_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimulationEvaluationErrorResponseDTO::release_exception() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.exception)
  return exception_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimulationEvaluationErrorResponseDTO::set_allocated_exception(std::string* exception) {
  if (exception != nullptr) {
    
  } else {
    
  }
  exception_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exception,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.exception)
}

// bool abort_optimization = 4;
inline void SimulationEvaluationErrorResponseDTO::clear_abort_optimization() {
  abort_optimization_ = false;
}
inline bool SimulationEvaluationErrorResponseDTO::_internal_abort_optimization() const {
  return abort_optimization_;
}
inline bool SimulationEvaluationErrorResponseDTO::abort_optimization() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.abort_optimization)
  return _internal_abort_optimization();
}
inline void SimulationEvaluationErrorResponseDTO::_internal_set_abort_optimization(bool value) {
  
  abort_optimization_ = value;
}
inline void SimulationEvaluationErrorResponseDTO::set_abort_optimization(bool value) {
  _internal_set_abort_optimization(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SimulationEvaluationErrorResponseDTO.abort_optimization)
}

// -------------------------------------------------------------------

// SimulationEvaluationErrorConfirmDTO

// -------------------------------------------------------------------

// StatusMessageCommandDTO

// string name = 1;
inline void StatusMessageCommandDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StatusMessageCommandDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.StatusMessageCommandDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusMessageCommandDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.StatusMessageCommandDTO.name)
}
inline std::string* StatusMessageCommandDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.StatusMessageCommandDTO.name)
  return _s;
}
inline const std::string& StatusMessageCommandDTO::_internal_name() const {
  return name_.Get();
}
inline void StatusMessageCommandDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusMessageCommandDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusMessageCommandDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.StatusMessageCommandDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusMessageCommandDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.StatusMessageCommandDTO.name)
}

// string message = 2;
inline void StatusMessageCommandDTO::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& StatusMessageCommandDTO::message() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.StatusMessageCommandDTO.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusMessageCommandDTO::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.StatusMessageCommandDTO.message)
}
inline std::string* StatusMessageCommandDTO::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.StatusMessageCommandDTO.message)
  return _s;
}
inline const std::string& StatusMessageCommandDTO::_internal_message() const {
  return message_.Get();
}
inline void StatusMessageCommandDTO::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusMessageCommandDTO::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusMessageCommandDTO::release_message() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.StatusMessageCommandDTO.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusMessageCommandDTO::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.StatusMessageCommandDTO.message)
}

// -------------------------------------------------------------------

// StatusMessageConfirmDTO

// -------------------------------------------------------------------

// StopOptimizationCommandDTO

// string name = 1;
inline void StopOptimizationCommandDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopOptimizationCommandDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.StopOptimizationCommandDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopOptimizationCommandDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.StopOptimizationCommandDTO.name)
}
inline std::string* StopOptimizationCommandDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.StopOptimizationCommandDTO.name)
  return _s;
}
inline const std::string& StopOptimizationCommandDTO::_internal_name() const {
  return name_.Get();
}
inline void StopOptimizationCommandDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StopOptimizationCommandDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StopOptimizationCommandDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.StopOptimizationCommandDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StopOptimizationCommandDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.StopOptimizationCommandDTO.name)
}

// .empowerops.volition.dto.UUIDDTO run_ID = 2;
inline bool StopOptimizationCommandDTO::_internal_has_run_id() const {
  return this != internal_default_instance() && run_id_ != nullptr;
}
inline bool StopOptimizationCommandDTO::has_run_id() const {
  return _internal_has_run_id();
}
inline void StopOptimizationCommandDTO::clear_run_id() {
  if (GetArenaForAllocation() == nullptr && run_id_ != nullptr) {
    delete run_id_;
  }
  run_id_ = nullptr;
}
inline const ::empowerops::volition::dto::UUIDDTO& StopOptimizationCommandDTO::_internal_run_id() const {
  const ::empowerops::volition::dto::UUIDDTO* p = run_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::UUIDDTO&>(
      ::empowerops::volition::dto::_UUIDDTO_default_instance_);
}
inline const ::empowerops::volition::dto::UUIDDTO& StopOptimizationCommandDTO::run_id() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.StopOptimizationCommandDTO.run_ID)
  return _internal_run_id();
}
inline void StopOptimizationCommandDTO::unsafe_arena_set_allocated_run_id(
    ::empowerops::volition::dto::UUIDDTO* run_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_id_);
  }
  run_id_ = run_id;
  if (run_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.StopOptimizationCommandDTO.run_ID)
}
inline ::empowerops::volition::dto::UUIDDTO* StopOptimizationCommandDTO::release_run_id() {
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* StopOptimizationCommandDTO::unsafe_arena_release_run_id() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.StopOptimizationCommandDTO.run_ID)
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* StopOptimizationCommandDTO::_internal_mutable_run_id() {
  
  if (run_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::UUIDDTO>(GetArenaForAllocation());
    run_id_ = p;
  }
  return run_id_;
}
inline ::empowerops::volition::dto::UUIDDTO* StopOptimizationCommandDTO::mutable_run_id() {
  ::empowerops::volition::dto::UUIDDTO* _msg = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.StopOptimizationCommandDTO.run_ID)
  return _msg;
}
inline void StopOptimizationCommandDTO::set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_id_;
  }
  if (run_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::UUIDDTO>::GetOwningArena(run_id);
    if (message_arena != submessage_arena) {
      run_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_id, submessage_arena);
    }
    
  } else {
    
  }
  run_id_ = run_id;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.StopOptimizationCommandDTO.run_ID)
}

// -------------------------------------------------------------------

// StopOptimizationConfirmDTO

// .empowerops.volition.dto.UUIDDTO run_ID = 2;
inline bool StopOptimizationConfirmDTO::_internal_has_run_id() const {
  return this != internal_default_instance() && run_id_ != nullptr;
}
inline bool StopOptimizationConfirmDTO::has_run_id() const {
  return _internal_has_run_id();
}
inline void StopOptimizationConfirmDTO::clear_run_id() {
  if (GetArenaForAllocation() == nullptr && run_id_ != nullptr) {
    delete run_id_;
  }
  run_id_ = nullptr;
}
inline const ::empowerops::volition::dto::UUIDDTO& StopOptimizationConfirmDTO::_internal_run_id() const {
  const ::empowerops::volition::dto::UUIDDTO* p = run_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::UUIDDTO&>(
      ::empowerops::volition::dto::_UUIDDTO_default_instance_);
}
inline const ::empowerops::volition::dto::UUIDDTO& StopOptimizationConfirmDTO::run_id() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.StopOptimizationConfirmDTO.run_ID)
  return _internal_run_id();
}
inline void StopOptimizationConfirmDTO::unsafe_arena_set_allocated_run_id(
    ::empowerops::volition::dto::UUIDDTO* run_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_id_);
  }
  run_id_ = run_id;
  if (run_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.StopOptimizationConfirmDTO.run_ID)
}
inline ::empowerops::volition::dto::UUIDDTO* StopOptimizationConfirmDTO::release_run_id() {
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* StopOptimizationConfirmDTO::unsafe_arena_release_run_id() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.StopOptimizationConfirmDTO.run_ID)
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* StopOptimizationConfirmDTO::_internal_mutable_run_id() {
  
  if (run_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::UUIDDTO>(GetArenaForAllocation());
    run_id_ = p;
  }
  return run_id_;
}
inline ::empowerops::volition::dto::UUIDDTO* StopOptimizationConfirmDTO::mutable_run_id() {
  ::empowerops::volition::dto::UUIDDTO* _msg = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.StopOptimizationConfirmDTO.run_ID)
  return _msg;
}
inline void StopOptimizationConfirmDTO::set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_id_;
  }
  if (run_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::UUIDDTO>::GetOwningArena(run_id);
    if (message_arena != submessage_arena) {
      run_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_id, submessage_arena);
    }
    
  } else {
    
  }
  run_id_ = run_id;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.StopOptimizationConfirmDTO.run_ID)
}

// -------------------------------------------------------------------

// OptimizationResultsQueryDTO

// .empowerops.volition.dto.UUIDDTO run_ID = 2;
inline bool OptimizationResultsQueryDTO::_internal_has_run_id() const {
  return this != internal_default_instance() && run_id_ != nullptr;
}
inline bool OptimizationResultsQueryDTO::has_run_id() const {
  return _internal_has_run_id();
}
inline void OptimizationResultsQueryDTO::clear_run_id() {
  if (GetArenaForAllocation() == nullptr && run_id_ != nullptr) {
    delete run_id_;
  }
  run_id_ = nullptr;
}
inline const ::empowerops::volition::dto::UUIDDTO& OptimizationResultsQueryDTO::_internal_run_id() const {
  const ::empowerops::volition::dto::UUIDDTO* p = run_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::UUIDDTO&>(
      ::empowerops::volition::dto::_UUIDDTO_default_instance_);
}
inline const ::empowerops::volition::dto::UUIDDTO& OptimizationResultsQueryDTO::run_id() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationResultsQueryDTO.run_ID)
  return _internal_run_id();
}
inline void OptimizationResultsQueryDTO::unsafe_arena_set_allocated_run_id(
    ::empowerops::volition::dto::UUIDDTO* run_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_id_);
  }
  run_id_ = run_id;
  if (run_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizationResultsQueryDTO.run_ID)
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationResultsQueryDTO::release_run_id() {
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationResultsQueryDTO::unsafe_arena_release_run_id() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizationResultsQueryDTO.run_ID)
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationResultsQueryDTO::_internal_mutable_run_id() {
  
  if (run_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::UUIDDTO>(GetArenaForAllocation());
    run_id_ = p;
  }
  return run_id_;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationResultsQueryDTO::mutable_run_id() {
  ::empowerops::volition::dto::UUIDDTO* _msg = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationResultsQueryDTO.run_ID)
  return _msg;
}
inline void OptimizationResultsQueryDTO::set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_id_;
  }
  if (run_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::UUIDDTO>::GetOwningArena(run_id);
    if (message_arena != submessage_arena) {
      run_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_id, submessage_arena);
    }
    
  } else {
    
  }
  run_id_ = run_id;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.OptimizationResultsQueryDTO.run_ID)
}

// -------------------------------------------------------------------

// OptimizationResultsResponseDTO

// .empowerops.volition.dto.UUIDDTO run_ID = 1;
inline bool OptimizationResultsResponseDTO::_internal_has_run_id() const {
  return this != internal_default_instance() && run_id_ != nullptr;
}
inline bool OptimizationResultsResponseDTO::has_run_id() const {
  return _internal_has_run_id();
}
inline void OptimizationResultsResponseDTO::clear_run_id() {
  if (GetArenaForAllocation() == nullptr && run_id_ != nullptr) {
    delete run_id_;
  }
  run_id_ = nullptr;
}
inline const ::empowerops::volition::dto::UUIDDTO& OptimizationResultsResponseDTO::_internal_run_id() const {
  const ::empowerops::volition::dto::UUIDDTO* p = run_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::UUIDDTO&>(
      ::empowerops::volition::dto::_UUIDDTO_default_instance_);
}
inline const ::empowerops::volition::dto::UUIDDTO& OptimizationResultsResponseDTO::run_id() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationResultsResponseDTO.run_ID)
  return _internal_run_id();
}
inline void OptimizationResultsResponseDTO::unsafe_arena_set_allocated_run_id(
    ::empowerops::volition::dto::UUIDDTO* run_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_id_);
  }
  run_id_ = run_id;
  if (run_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.OptimizationResultsResponseDTO.run_ID)
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationResultsResponseDTO::release_run_id() {
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationResultsResponseDTO::unsafe_arena_release_run_id() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.OptimizationResultsResponseDTO.run_ID)
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationResultsResponseDTO::_internal_mutable_run_id() {
  
  if (run_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::UUIDDTO>(GetArenaForAllocation());
    run_id_ = p;
  }
  return run_id_;
}
inline ::empowerops::volition::dto::UUIDDTO* OptimizationResultsResponseDTO::mutable_run_id() {
  ::empowerops::volition::dto::UUIDDTO* _msg = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationResultsResponseDTO.run_ID)
  return _msg;
}
inline void OptimizationResultsResponseDTO::set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_id_;
  }
  if (run_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::UUIDDTO>::GetOwningArena(run_id);
    if (message_arena != submessage_arena) {
      run_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_id, submessage_arena);
    }
    
  } else {
    
  }
  run_id_ = run_id;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.OptimizationResultsResponseDTO.run_ID)
}

// repeated string input_columns = 7;
inline int OptimizationResultsResponseDTO::_internal_input_columns_size() const {
  return input_columns_.size();
}
inline int OptimizationResultsResponseDTO::input_columns_size() const {
  return _internal_input_columns_size();
}
inline void OptimizationResultsResponseDTO::clear_input_columns() {
  input_columns_.Clear();
}
inline std::string* OptimizationResultsResponseDTO::add_input_columns() {
  std::string* _s = _internal_add_input_columns();
  // @@protoc_insertion_point(field_add_mutable:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
  return _s;
}
inline const std::string& OptimizationResultsResponseDTO::_internal_input_columns(int index) const {
  return input_columns_.Get(index);
}
inline const std::string& OptimizationResultsResponseDTO::input_columns(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
  return _internal_input_columns(index);
}
inline std::string* OptimizationResultsResponseDTO::mutable_input_columns(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
  return input_columns_.Mutable(index);
}
inline void OptimizationResultsResponseDTO::set_input_columns(int index, const std::string& value) {
  input_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
}
inline void OptimizationResultsResponseDTO::set_input_columns(int index, std::string&& value) {
  input_columns_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
}
inline void OptimizationResultsResponseDTO::set_input_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
}
inline void OptimizationResultsResponseDTO::set_input_columns(int index, const char* value, size_t size) {
  input_columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
}
inline std::string* OptimizationResultsResponseDTO::_internal_add_input_columns() {
  return input_columns_.Add();
}
inline void OptimizationResultsResponseDTO::add_input_columns(const std::string& value) {
  input_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
}
inline void OptimizationResultsResponseDTO::add_input_columns(std::string&& value) {
  input_columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
}
inline void OptimizationResultsResponseDTO::add_input_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
}
inline void OptimizationResultsResponseDTO::add_input_columns(const char* value, size_t size) {
  input_columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OptimizationResultsResponseDTO::input_columns() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
  return input_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OptimizationResultsResponseDTO::mutable_input_columns() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.OptimizationResultsResponseDTO.input_columns)
  return &input_columns_;
}

// repeated string output_columns = 8;
inline int OptimizationResultsResponseDTO::_internal_output_columns_size() const {
  return output_columns_.size();
}
inline int OptimizationResultsResponseDTO::output_columns_size() const {
  return _internal_output_columns_size();
}
inline void OptimizationResultsResponseDTO::clear_output_columns() {
  output_columns_.Clear();
}
inline std::string* OptimizationResultsResponseDTO::add_output_columns() {
  std::string* _s = _internal_add_output_columns();
  // @@protoc_insertion_point(field_add_mutable:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
  return _s;
}
inline const std::string& OptimizationResultsResponseDTO::_internal_output_columns(int index) const {
  return output_columns_.Get(index);
}
inline const std::string& OptimizationResultsResponseDTO::output_columns(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
  return _internal_output_columns(index);
}
inline std::string* OptimizationResultsResponseDTO::mutable_output_columns(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
  return output_columns_.Mutable(index);
}
inline void OptimizationResultsResponseDTO::set_output_columns(int index, const std::string& value) {
  output_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
}
inline void OptimizationResultsResponseDTO::set_output_columns(int index, std::string&& value) {
  output_columns_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
}
inline void OptimizationResultsResponseDTO::set_output_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
}
inline void OptimizationResultsResponseDTO::set_output_columns(int index, const char* value, size_t size) {
  output_columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
}
inline std::string* OptimizationResultsResponseDTO::_internal_add_output_columns() {
  return output_columns_.Add();
}
inline void OptimizationResultsResponseDTO::add_output_columns(const std::string& value) {
  output_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
}
inline void OptimizationResultsResponseDTO::add_output_columns(std::string&& value) {
  output_columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
}
inline void OptimizationResultsResponseDTO::add_output_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
}
inline void OptimizationResultsResponseDTO::add_output_columns(const char* value, size_t size) {
  output_columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OptimizationResultsResponseDTO::output_columns() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
  return output_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OptimizationResultsResponseDTO::mutable_output_columns() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.OptimizationResultsResponseDTO.output_columns)
  return &output_columns_;
}

// repeated .empowerops.volition.dto.DesignRowDTO points = 9;
inline int OptimizationResultsResponseDTO::_internal_points_size() const {
  return points_.size();
}
inline int OptimizationResultsResponseDTO::points_size() const {
  return _internal_points_size();
}
inline void OptimizationResultsResponseDTO::clear_points() {
  points_.Clear();
}
inline ::empowerops::volition::dto::DesignRowDTO* OptimizationResultsResponseDTO::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.OptimizationResultsResponseDTO.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::DesignRowDTO >*
OptimizationResultsResponseDTO::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.OptimizationResultsResponseDTO.points)
  return &points_;
}
inline const ::empowerops::volition::dto::DesignRowDTO& OptimizationResultsResponseDTO::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::empowerops::volition::dto::DesignRowDTO& OptimizationResultsResponseDTO::points(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.OptimizationResultsResponseDTO.points)
  return _internal_points(index);
}
inline ::empowerops::volition::dto::DesignRowDTO* OptimizationResultsResponseDTO::_internal_add_points() {
  return points_.Add();
}
inline ::empowerops::volition::dto::DesignRowDTO* OptimizationResultsResponseDTO::add_points() {
  ::empowerops::volition::dto::DesignRowDTO* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.OptimizationResultsResponseDTO.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::empowerops::volition::dto::DesignRowDTO >&
OptimizationResultsResponseDTO::points() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.OptimizationResultsResponseDTO.points)
  return points_;
}

// -------------------------------------------------------------------

// InputParameterDTO

// string name = 1;
inline void InputParameterDTO::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InputParameterDTO::name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.InputParameterDTO.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputParameterDTO::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.InputParameterDTO.name)
}
inline std::string* InputParameterDTO::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.InputParameterDTO.name)
  return _s;
}
inline const std::string& InputParameterDTO::_internal_name() const {
  return name_.Get();
}
inline void InputParameterDTO::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InputParameterDTO::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InputParameterDTO::release_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.InputParameterDTO.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InputParameterDTO::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.InputParameterDTO.name)
}

// .empowerops.volition.dto.ContinuousDTO continuous = 4;
inline bool InputParameterDTO::_internal_has_continuous() const {
  return domain_case() == kContinuous;
}
inline bool InputParameterDTO::has_continuous() const {
  return _internal_has_continuous();
}
inline void InputParameterDTO::set_has_continuous() {
  _oneof_case_[0] = kContinuous;
}
inline void InputParameterDTO::clear_continuous() {
  if (_internal_has_continuous()) {
    if (GetArenaForAllocation() == nullptr) {
      delete domain_.continuous_;
    }
    clear_has_domain();
  }
}
inline ::empowerops::volition::dto::ContinuousDTO* InputParameterDTO::release_continuous() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.InputParameterDTO.continuous)
  if (_internal_has_continuous()) {
    clear_has_domain();
      ::empowerops::volition::dto::ContinuousDTO* temp = domain_.continuous_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    domain_.continuous_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::ContinuousDTO& InputParameterDTO::_internal_continuous() const {
  return _internal_has_continuous()
      ? *domain_.continuous_
      : reinterpret_cast< ::empowerops::volition::dto::ContinuousDTO&>(::empowerops::volition::dto::_ContinuousDTO_default_instance_);
}
inline const ::empowerops::volition::dto::ContinuousDTO& InputParameterDTO::continuous() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.InputParameterDTO.continuous)
  return _internal_continuous();
}
inline ::empowerops::volition::dto::ContinuousDTO* InputParameterDTO::unsafe_arena_release_continuous() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.InputParameterDTO.continuous)
  if (_internal_has_continuous()) {
    clear_has_domain();
    ::empowerops::volition::dto::ContinuousDTO* temp = domain_.continuous_;
    domain_.continuous_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InputParameterDTO::unsafe_arena_set_allocated_continuous(::empowerops::volition::dto::ContinuousDTO* continuous) {
  clear_domain();
  if (continuous) {
    set_has_continuous();
    domain_.continuous_ = continuous;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.InputParameterDTO.continuous)
}
inline ::empowerops::volition::dto::ContinuousDTO* InputParameterDTO::_internal_mutable_continuous() {
  if (!_internal_has_continuous()) {
    clear_domain();
    set_has_continuous();
    domain_.continuous_ = CreateMaybeMessage< ::empowerops::volition::dto::ContinuousDTO >(GetArenaForAllocation());
  }
  return domain_.continuous_;
}
inline ::empowerops::volition::dto::ContinuousDTO* InputParameterDTO::mutable_continuous() {
  ::empowerops::volition::dto::ContinuousDTO* _msg = _internal_mutable_continuous();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.InputParameterDTO.continuous)
  return _msg;
}

// .empowerops.volition.dto.DiscreteRangeDTO discrete_range = 5;
inline bool InputParameterDTO::_internal_has_discrete_range() const {
  return domain_case() == kDiscreteRange;
}
inline bool InputParameterDTO::has_discrete_range() const {
  return _internal_has_discrete_range();
}
inline void InputParameterDTO::set_has_discrete_range() {
  _oneof_case_[0] = kDiscreteRange;
}
inline void InputParameterDTO::clear_discrete_range() {
  if (_internal_has_discrete_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete domain_.discrete_range_;
    }
    clear_has_domain();
  }
}
inline ::empowerops::volition::dto::DiscreteRangeDTO* InputParameterDTO::release_discrete_range() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.InputParameterDTO.discrete_range)
  if (_internal_has_discrete_range()) {
    clear_has_domain();
      ::empowerops::volition::dto::DiscreteRangeDTO* temp = domain_.discrete_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    domain_.discrete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::DiscreteRangeDTO& InputParameterDTO::_internal_discrete_range() const {
  return _internal_has_discrete_range()
      ? *domain_.discrete_range_
      : reinterpret_cast< ::empowerops::volition::dto::DiscreteRangeDTO&>(::empowerops::volition::dto::_DiscreteRangeDTO_default_instance_);
}
inline const ::empowerops::volition::dto::DiscreteRangeDTO& InputParameterDTO::discrete_range() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.InputParameterDTO.discrete_range)
  return _internal_discrete_range();
}
inline ::empowerops::volition::dto::DiscreteRangeDTO* InputParameterDTO::unsafe_arena_release_discrete_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.InputParameterDTO.discrete_range)
  if (_internal_has_discrete_range()) {
    clear_has_domain();
    ::empowerops::volition::dto::DiscreteRangeDTO* temp = domain_.discrete_range_;
    domain_.discrete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InputParameterDTO::unsafe_arena_set_allocated_discrete_range(::empowerops::volition::dto::DiscreteRangeDTO* discrete_range) {
  clear_domain();
  if (discrete_range) {
    set_has_discrete_range();
    domain_.discrete_range_ = discrete_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.InputParameterDTO.discrete_range)
}
inline ::empowerops::volition::dto::DiscreteRangeDTO* InputParameterDTO::_internal_mutable_discrete_range() {
  if (!_internal_has_discrete_range()) {
    clear_domain();
    set_has_discrete_range();
    domain_.discrete_range_ = CreateMaybeMessage< ::empowerops::volition::dto::DiscreteRangeDTO >(GetArenaForAllocation());
  }
  return domain_.discrete_range_;
}
inline ::empowerops::volition::dto::DiscreteRangeDTO* InputParameterDTO::mutable_discrete_range() {
  ::empowerops::volition::dto::DiscreteRangeDTO* _msg = _internal_mutable_discrete_range();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.InputParameterDTO.discrete_range)
  return _msg;
}

inline bool InputParameterDTO::has_domain() const {
  return domain_case() != DOMAIN_NOT_SET;
}
inline void InputParameterDTO::clear_has_domain() {
  _oneof_case_[0] = DOMAIN_NOT_SET;
}
inline InputParameterDTO::DomainCase InputParameterDTO::domain_case() const {
  return InputParameterDTO::DomainCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ContinuousDTO

// double lower_bound = 2;
inline void ContinuousDTO::clear_lower_bound() {
  lower_bound_ = 0;
}
inline double ContinuousDTO::_internal_lower_bound() const {
  return lower_bound_;
}
inline double ContinuousDTO::lower_bound() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ContinuousDTO.lower_bound)
  return _internal_lower_bound();
}
inline void ContinuousDTO::_internal_set_lower_bound(double value) {
  
  lower_bound_ = value;
}
inline void ContinuousDTO::set_lower_bound(double value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.ContinuousDTO.lower_bound)
}

// double upper_bound = 3;
inline void ContinuousDTO::clear_upper_bound() {
  upper_bound_ = 0;
}
inline double ContinuousDTO::_internal_upper_bound() const {
  return upper_bound_;
}
inline double ContinuousDTO::upper_bound() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ContinuousDTO.upper_bound)
  return _internal_upper_bound();
}
inline void ContinuousDTO::_internal_set_upper_bound(double value) {
  
  upper_bound_ = value;
}
inline void ContinuousDTO::set_upper_bound(double value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.ContinuousDTO.upper_bound)
}

// -------------------------------------------------------------------

// DiscreteRangeDTO

// double lower_bound = 2;
inline void DiscreteRangeDTO::clear_lower_bound() {
  lower_bound_ = 0;
}
inline double DiscreteRangeDTO::_internal_lower_bound() const {
  return lower_bound_;
}
inline double DiscreteRangeDTO::lower_bound() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.DiscreteRangeDTO.lower_bound)
  return _internal_lower_bound();
}
inline void DiscreteRangeDTO::_internal_set_lower_bound(double value) {
  
  lower_bound_ = value;
}
inline void DiscreteRangeDTO::set_lower_bound(double value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.DiscreteRangeDTO.lower_bound)
}

// double upper_bound = 3;
inline void DiscreteRangeDTO::clear_upper_bound() {
  upper_bound_ = 0;
}
inline double DiscreteRangeDTO::_internal_upper_bound() const {
  return upper_bound_;
}
inline double DiscreteRangeDTO::upper_bound() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.DiscreteRangeDTO.upper_bound)
  return _internal_upper_bound();
}
inline void DiscreteRangeDTO::_internal_set_upper_bound(double value) {
  
  upper_bound_ = value;
}
inline void DiscreteRangeDTO::set_upper_bound(double value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.DiscreteRangeDTO.upper_bound)
}

// double step_size = 4;
inline void DiscreteRangeDTO::clear_step_size() {
  step_size_ = 0;
}
inline double DiscreteRangeDTO::_internal_step_size() const {
  return step_size_;
}
inline double DiscreteRangeDTO::step_size() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.DiscreteRangeDTO.step_size)
  return _internal_step_size();
}
inline void DiscreteRangeDTO::_internal_set_step_size(double value) {
  
  step_size_ = value;
}
inline void DiscreteRangeDTO::set_step_size(double value) {
  _internal_set_step_size(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.DiscreteRangeDTO.step_size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VariableMappingDTO

// map<string, .empowerops.volition.dto.VariableNameDTO> inputs = 1;
inline int VariableMappingDTO::_internal_inputs_size() const {
  return inputs_.size();
}
inline int VariableMappingDTO::inputs_size() const {
  return _internal_inputs_size();
}
inline void VariableMappingDTO::clear_inputs() {
  inputs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >&
VariableMappingDTO::_internal_inputs() const {
  return inputs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >&
VariableMappingDTO::inputs() const {
  // @@protoc_insertion_point(field_map:empowerops.volition.dto.VariableMappingDTO.inputs)
  return _internal_inputs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >*
VariableMappingDTO::_internal_mutable_inputs() {
  return inputs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >*
VariableMappingDTO::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_map:empowerops.volition.dto.VariableMappingDTO.inputs)
  return _internal_mutable_inputs();
}

// map<string, .empowerops.volition.dto.VariableNameDTO> outputs = 2;
inline int VariableMappingDTO::_internal_outputs_size() const {
  return outputs_.size();
}
inline int VariableMappingDTO::outputs_size() const {
  return _internal_outputs_size();
}
inline void VariableMappingDTO::clear_outputs() {
  outputs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >&
VariableMappingDTO::_internal_outputs() const {
  return outputs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >&
VariableMappingDTO::outputs() const {
  // @@protoc_insertion_point(field_map:empowerops.volition.dto.VariableMappingDTO.outputs)
  return _internal_outputs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >*
VariableMappingDTO::_internal_mutable_outputs() {
  return outputs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::empowerops::volition::dto::VariableNameDTO >*
VariableMappingDTO::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_map:empowerops.volition.dto.VariableMappingDTO.outputs)
  return _internal_mutable_outputs();
}

// -------------------------------------------------------------------

// BabelConstraintNodeDTO

// string output_name = 1;
inline void BabelConstraintNodeDTO::clear_output_name() {
  output_name_.ClearToEmpty();
}
inline const std::string& BabelConstraintNodeDTO::output_name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.BabelConstraintNodeDTO.output_name)
  return _internal_output_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BabelConstraintNodeDTO::set_output_name(ArgT0&& arg0, ArgT... args) {
 
 output_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.BabelConstraintNodeDTO.output_name)
}
inline std::string* BabelConstraintNodeDTO::mutable_output_name() {
  std::string* _s = _internal_mutable_output_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.BabelConstraintNodeDTO.output_name)
  return _s;
}
inline const std::string& BabelConstraintNodeDTO::_internal_output_name() const {
  return output_name_.Get();
}
inline void BabelConstraintNodeDTO::_internal_set_output_name(const std::string& value) {
  
  output_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BabelConstraintNodeDTO::_internal_mutable_output_name() {
  
  return output_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BabelConstraintNodeDTO::release_output_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.BabelConstraintNodeDTO.output_name)
  return output_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BabelConstraintNodeDTO::set_allocated_output_name(std::string* output_name) {
  if (output_name != nullptr) {
    
  } else {
    
  }
  output_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.BabelConstraintNodeDTO.output_name)
}

// string boolean_expression = 2;
inline void BabelConstraintNodeDTO::clear_boolean_expression() {
  boolean_expression_.ClearToEmpty();
}
inline const std::string& BabelConstraintNodeDTO::boolean_expression() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.BabelConstraintNodeDTO.boolean_expression)
  return _internal_boolean_expression();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BabelConstraintNodeDTO::set_boolean_expression(ArgT0&& arg0, ArgT... args) {
 
 boolean_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.BabelConstraintNodeDTO.boolean_expression)
}
inline std::string* BabelConstraintNodeDTO::mutable_boolean_expression() {
  std::string* _s = _internal_mutable_boolean_expression();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.BabelConstraintNodeDTO.boolean_expression)
  return _s;
}
inline const std::string& BabelConstraintNodeDTO::_internal_boolean_expression() const {
  return boolean_expression_.Get();
}
inline void BabelConstraintNodeDTO::_internal_set_boolean_expression(const std::string& value) {
  
  boolean_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BabelConstraintNodeDTO::_internal_mutable_boolean_expression() {
  
  return boolean_expression_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BabelConstraintNodeDTO::release_boolean_expression() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.BabelConstraintNodeDTO.boolean_expression)
  return boolean_expression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BabelConstraintNodeDTO::set_allocated_boolean_expression(std::string* boolean_expression) {
  if (boolean_expression != nullptr) {
    
  } else {
    
  }
  boolean_expression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boolean_expression,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.BabelConstraintNodeDTO.boolean_expression)
}

// -------------------------------------------------------------------

// BabelScalarNodeDTO

// string output_name = 1;
inline void BabelScalarNodeDTO::clear_output_name() {
  output_name_.ClearToEmpty();
}
inline const std::string& BabelScalarNodeDTO::output_name() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.BabelScalarNodeDTO.output_name)
  return _internal_output_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BabelScalarNodeDTO::set_output_name(ArgT0&& arg0, ArgT... args) {
 
 output_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.BabelScalarNodeDTO.output_name)
}
inline std::string* BabelScalarNodeDTO::mutable_output_name() {
  std::string* _s = _internal_mutable_output_name();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.BabelScalarNodeDTO.output_name)
  return _s;
}
inline const std::string& BabelScalarNodeDTO::_internal_output_name() const {
  return output_name_.Get();
}
inline void BabelScalarNodeDTO::_internal_set_output_name(const std::string& value) {
  
  output_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BabelScalarNodeDTO::_internal_mutable_output_name() {
  
  return output_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BabelScalarNodeDTO::release_output_name() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.BabelScalarNodeDTO.output_name)
  return output_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BabelScalarNodeDTO::set_allocated_output_name(std::string* output_name) {
  if (output_name != nullptr) {
    
  } else {
    
  }
  output_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.BabelScalarNodeDTO.output_name)
}

// string scalar_expression = 2;
inline void BabelScalarNodeDTO::clear_scalar_expression() {
  scalar_expression_.ClearToEmpty();
}
inline const std::string& BabelScalarNodeDTO::scalar_expression() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.BabelScalarNodeDTO.scalar_expression)
  return _internal_scalar_expression();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BabelScalarNodeDTO::set_scalar_expression(ArgT0&& arg0, ArgT... args) {
 
 scalar_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.BabelScalarNodeDTO.scalar_expression)
}
inline std::string* BabelScalarNodeDTO::mutable_scalar_expression() {
  std::string* _s = _internal_mutable_scalar_expression();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.BabelScalarNodeDTO.scalar_expression)
  return _s;
}
inline const std::string& BabelScalarNodeDTO::_internal_scalar_expression() const {
  return scalar_expression_.Get();
}
inline void BabelScalarNodeDTO::_internal_set_scalar_expression(const std::string& value) {
  
  scalar_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BabelScalarNodeDTO::_internal_mutable_scalar_expression() {
  
  return scalar_expression_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BabelScalarNodeDTO::release_scalar_expression() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.BabelScalarNodeDTO.scalar_expression)
  return scalar_expression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BabelScalarNodeDTO::set_allocated_scalar_expression(std::string* scalar_expression) {
  if (scalar_expression != nullptr) {
    
  } else {
    
  }
  scalar_expression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scalar_expression,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.BabelScalarNodeDTO.scalar_expression)
}

// -------------------------------------------------------------------

// SeedRowDTO

// repeated double inputs = 1;
inline int SeedRowDTO::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SeedRowDTO::inputs_size() const {
  return _internal_inputs_size();
}
inline void SeedRowDTO::clear_inputs() {
  inputs_.Clear();
}
inline double SeedRowDTO::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline double SeedRowDTO::inputs(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SeedRowDTO.inputs)
  return _internal_inputs(index);
}
inline void SeedRowDTO::set_inputs(int index, double value) {
  inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SeedRowDTO.inputs)
}
inline void SeedRowDTO::_internal_add_inputs(double value) {
  inputs_.Add(value);
}
inline void SeedRowDTO::add_inputs(double value) {
  _internal_add_inputs(value);
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.SeedRowDTO.inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SeedRowDTO::_internal_inputs() const {
  return inputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SeedRowDTO::inputs() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.SeedRowDTO.inputs)
  return _internal_inputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SeedRowDTO::_internal_mutable_inputs() {
  return &inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SeedRowDTO::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.SeedRowDTO.inputs)
  return _internal_mutable_inputs();
}

// repeated double outputs = 2;
inline int SeedRowDTO::_internal_outputs_size() const {
  return outputs_.size();
}
inline int SeedRowDTO::outputs_size() const {
  return _internal_outputs_size();
}
inline void SeedRowDTO::clear_outputs() {
  outputs_.Clear();
}
inline double SeedRowDTO::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline double SeedRowDTO::outputs(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.SeedRowDTO.outputs)
  return _internal_outputs(index);
}
inline void SeedRowDTO::set_outputs(int index, double value) {
  outputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.SeedRowDTO.outputs)
}
inline void SeedRowDTO::_internal_add_outputs(double value) {
  outputs_.Add(value);
}
inline void SeedRowDTO::add_outputs(double value) {
  _internal_add_outputs(value);
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.SeedRowDTO.outputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SeedRowDTO::_internal_outputs() const {
  return outputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SeedRowDTO::outputs() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.SeedRowDTO.outputs)
  return _internal_outputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SeedRowDTO::_internal_mutable_outputs() {
  return &outputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SeedRowDTO::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.SeedRowDTO.outputs)
  return _internal_mutable_outputs();
}

// -------------------------------------------------------------------

// DesignRowDTO

// repeated double inputs = 1;
inline int DesignRowDTO::_internal_inputs_size() const {
  return inputs_.size();
}
inline int DesignRowDTO::inputs_size() const {
  return _internal_inputs_size();
}
inline void DesignRowDTO::clear_inputs() {
  inputs_.Clear();
}
inline double DesignRowDTO::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline double DesignRowDTO::inputs(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.DesignRowDTO.inputs)
  return _internal_inputs(index);
}
inline void DesignRowDTO::set_inputs(int index, double value) {
  inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.DesignRowDTO.inputs)
}
inline void DesignRowDTO::_internal_add_inputs(double value) {
  inputs_.Add(value);
}
inline void DesignRowDTO::add_inputs(double value) {
  _internal_add_inputs(value);
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.DesignRowDTO.inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DesignRowDTO::_internal_inputs() const {
  return inputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DesignRowDTO::inputs() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.DesignRowDTO.inputs)
  return _internal_inputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DesignRowDTO::_internal_mutable_inputs() {
  return &inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DesignRowDTO::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.DesignRowDTO.inputs)
  return _internal_mutable_inputs();
}

// repeated double outputs = 2;
inline int DesignRowDTO::_internal_outputs_size() const {
  return outputs_.size();
}
inline int DesignRowDTO::outputs_size() const {
  return _internal_outputs_size();
}
inline void DesignRowDTO::clear_outputs() {
  outputs_.Clear();
}
inline double DesignRowDTO::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline double DesignRowDTO::outputs(int index) const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.DesignRowDTO.outputs)
  return _internal_outputs(index);
}
inline void DesignRowDTO::set_outputs(int index, double value) {
  outputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.DesignRowDTO.outputs)
}
inline void DesignRowDTO::_internal_add_outputs(double value) {
  outputs_.Add(value);
}
inline void DesignRowDTO::add_outputs(double value) {
  _internal_add_outputs(value);
  // @@protoc_insertion_point(field_add:empowerops.volition.dto.DesignRowDTO.outputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DesignRowDTO::_internal_outputs() const {
  return outputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DesignRowDTO::outputs() const {
  // @@protoc_insertion_point(field_list:empowerops.volition.dto.DesignRowDTO.outputs)
  return _internal_outputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DesignRowDTO::_internal_mutable_outputs() {
  return &outputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DesignRowDTO::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:empowerops.volition.dto.DesignRowDTO.outputs)
  return _internal_mutable_outputs();
}

// bool is_feasible = 3;
inline void DesignRowDTO::clear_is_feasible() {
  is_feasible_ = false;
}
inline bool DesignRowDTO::_internal_is_feasible() const {
  return is_feasible_;
}
inline bool DesignRowDTO::is_feasible() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.DesignRowDTO.is_feasible)
  return _internal_is_feasible();
}
inline void DesignRowDTO::_internal_set_is_feasible(bool value) {
  
  is_feasible_ = value;
}
inline void DesignRowDTO::set_is_feasible(bool value) {
  _internal_set_is_feasible(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.DesignRowDTO.is_feasible)
}

// bool is_frontier = 4;
inline void DesignRowDTO::clear_is_frontier() {
  is_frontier_ = false;
}
inline bool DesignRowDTO::_internal_is_frontier() const {
  return is_frontier_;
}
inline bool DesignRowDTO::is_frontier() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.DesignRowDTO.is_frontier)
  return _internal_is_frontier();
}
inline void DesignRowDTO::_internal_set_is_frontier(bool value) {
  
  is_frontier_ = value;
}
inline void DesignRowDTO::set_is_frontier(bool value) {
  _internal_set_is_frontier(value);
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.DesignRowDTO.is_frontier)
}

// -------------------------------------------------------------------

// UUIDDTO

// string value = 1;
inline void UUIDDTO::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& UUIDDTO::value() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.UUIDDTO.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UUIDDTO::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.UUIDDTO.value)
}
inline std::string* UUIDDTO::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.UUIDDTO.value)
  return _s;
}
inline const std::string& UUIDDTO::_internal_value() const {
  return value_.Get();
}
inline void UUIDDTO::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UUIDDTO::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UUIDDTO::release_value() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.UUIDDTO.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UUIDDTO::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.UUIDDTO.value)
}

// -------------------------------------------------------------------

// PathDTO

// string value = 1;
inline void PathDTO::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& PathDTO::value() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.PathDTO.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathDTO::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.PathDTO.value)
}
inline std::string* PathDTO::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.PathDTO.value)
  return _s;
}
inline const std::string& PathDTO::_internal_value() const {
  return value_.Get();
}
inline void PathDTO::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathDTO::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathDTO::release_value() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.PathDTO.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathDTO::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.PathDTO.value)
}

// -------------------------------------------------------------------

// ErrorResponseDTO

// .empowerops.volition.dto.InternalErrorDTO internal_error = 1;
inline bool ErrorResponseDTO::_internal_has_internal_error() const {
  return value_case() == kInternalError;
}
inline bool ErrorResponseDTO::has_internal_error() const {
  return _internal_has_internal_error();
}
inline void ErrorResponseDTO::set_has_internal_error() {
  _oneof_case_[0] = kInternalError;
}
inline void ErrorResponseDTO::clear_internal_error() {
  if (_internal_has_internal_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.internal_error_;
    }
    clear_has_value();
  }
}
inline ::empowerops::volition::dto::InternalErrorDTO* ErrorResponseDTO::release_internal_error() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ErrorResponseDTO.internal_error)
  if (_internal_has_internal_error()) {
    clear_has_value();
      ::empowerops::volition::dto::InternalErrorDTO* temp = value_.internal_error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.internal_error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::InternalErrorDTO& ErrorResponseDTO::_internal_internal_error() const {
  return _internal_has_internal_error()
      ? *value_.internal_error_
      : reinterpret_cast< ::empowerops::volition::dto::InternalErrorDTO&>(::empowerops::volition::dto::_InternalErrorDTO_default_instance_);
}
inline const ::empowerops::volition::dto::InternalErrorDTO& ErrorResponseDTO::internal_error() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ErrorResponseDTO.internal_error)
  return _internal_internal_error();
}
inline ::empowerops::volition::dto::InternalErrorDTO* ErrorResponseDTO::unsafe_arena_release_internal_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.ErrorResponseDTO.internal_error)
  if (_internal_has_internal_error()) {
    clear_has_value();
    ::empowerops::volition::dto::InternalErrorDTO* temp = value_.internal_error_;
    value_.internal_error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ErrorResponseDTO::unsafe_arena_set_allocated_internal_error(::empowerops::volition::dto::InternalErrorDTO* internal_error) {
  clear_value();
  if (internal_error) {
    set_has_internal_error();
    value_.internal_error_ = internal_error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.ErrorResponseDTO.internal_error)
}
inline ::empowerops::volition::dto::InternalErrorDTO* ErrorResponseDTO::_internal_mutable_internal_error() {
  if (!_internal_has_internal_error()) {
    clear_value();
    set_has_internal_error();
    value_.internal_error_ = CreateMaybeMessage< ::empowerops::volition::dto::InternalErrorDTO >(GetArenaForAllocation());
  }
  return value_.internal_error_;
}
inline ::empowerops::volition::dto::InternalErrorDTO* ErrorResponseDTO::mutable_internal_error() {
  ::empowerops::volition::dto::InternalErrorDTO* _msg = _internal_mutable_internal_error();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ErrorResponseDTO.internal_error)
  return _msg;
}

// .empowerops.volition.dto.NoSuchOptimizationRunDTO no_such_optimization_run = 2;
inline bool ErrorResponseDTO::_internal_has_no_such_optimization_run() const {
  return value_case() == kNoSuchOptimizationRun;
}
inline bool ErrorResponseDTO::has_no_such_optimization_run() const {
  return _internal_has_no_such_optimization_run();
}
inline void ErrorResponseDTO::set_has_no_such_optimization_run() {
  _oneof_case_[0] = kNoSuchOptimizationRun;
}
inline void ErrorResponseDTO::clear_no_such_optimization_run() {
  if (_internal_has_no_such_optimization_run()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.no_such_optimization_run_;
    }
    clear_has_value();
  }
}
inline ::empowerops::volition::dto::NoSuchOptimizationRunDTO* ErrorResponseDTO::release_no_such_optimization_run() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.ErrorResponseDTO.no_such_optimization_run)
  if (_internal_has_no_such_optimization_run()) {
    clear_has_value();
      ::empowerops::volition::dto::NoSuchOptimizationRunDTO* temp = value_.no_such_optimization_run_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.no_such_optimization_run_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::empowerops::volition::dto::NoSuchOptimizationRunDTO& ErrorResponseDTO::_internal_no_such_optimization_run() const {
  return _internal_has_no_such_optimization_run()
      ? *value_.no_such_optimization_run_
      : reinterpret_cast< ::empowerops::volition::dto::NoSuchOptimizationRunDTO&>(::empowerops::volition::dto::_NoSuchOptimizationRunDTO_default_instance_);
}
inline const ::empowerops::volition::dto::NoSuchOptimizationRunDTO& ErrorResponseDTO::no_such_optimization_run() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.ErrorResponseDTO.no_such_optimization_run)
  return _internal_no_such_optimization_run();
}
inline ::empowerops::volition::dto::NoSuchOptimizationRunDTO* ErrorResponseDTO::unsafe_arena_release_no_such_optimization_run() {
  // @@protoc_insertion_point(field_unsafe_arena_release:empowerops.volition.dto.ErrorResponseDTO.no_such_optimization_run)
  if (_internal_has_no_such_optimization_run()) {
    clear_has_value();
    ::empowerops::volition::dto::NoSuchOptimizationRunDTO* temp = value_.no_such_optimization_run_;
    value_.no_such_optimization_run_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ErrorResponseDTO::unsafe_arena_set_allocated_no_such_optimization_run(::empowerops::volition::dto::NoSuchOptimizationRunDTO* no_such_optimization_run) {
  clear_value();
  if (no_such_optimization_run) {
    set_has_no_such_optimization_run();
    value_.no_such_optimization_run_ = no_such_optimization_run;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.ErrorResponseDTO.no_such_optimization_run)
}
inline ::empowerops::volition::dto::NoSuchOptimizationRunDTO* ErrorResponseDTO::_internal_mutable_no_such_optimization_run() {
  if (!_internal_has_no_such_optimization_run()) {
    clear_value();
    set_has_no_such_optimization_run();
    value_.no_such_optimization_run_ = CreateMaybeMessage< ::empowerops::volition::dto::NoSuchOptimizationRunDTO >(GetArenaForAllocation());
  }
  return value_.no_such_optimization_run_;
}
inline ::empowerops::volition::dto::NoSuchOptimizationRunDTO* ErrorResponseDTO::mutable_no_such_optimization_run() {
  ::empowerops::volition::dto::NoSuchOptimizationRunDTO* _msg = _internal_mutable_no_such_optimization_run();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.ErrorResponseDTO.no_such_optimization_run)
  return _msg;
}

inline bool ErrorResponseDTO::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ErrorResponseDTO::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ErrorResponseDTO::ValueCase ErrorResponseDTO::value_case() const {
  return ErrorResponseDTO::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InternalErrorDTO

// string message = 1;
inline void InternalErrorDTO::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& InternalErrorDTO::message() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.InternalErrorDTO.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalErrorDTO::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.InternalErrorDTO.message)
}
inline std::string* InternalErrorDTO::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.InternalErrorDTO.message)
  return _s;
}
inline const std::string& InternalErrorDTO::_internal_message() const {
  return message_.Get();
}
inline void InternalErrorDTO::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InternalErrorDTO::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InternalErrorDTO::release_message() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.InternalErrorDTO.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InternalErrorDTO::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.InternalErrorDTO.message)
}

// string trace = 2;
inline void InternalErrorDTO::clear_trace() {
  trace_.ClearToEmpty();
}
inline const std::string& InternalErrorDTO::trace() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.InternalErrorDTO.trace)
  return _internal_trace();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalErrorDTO::set_trace(ArgT0&& arg0, ArgT... args) {
 
 trace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.InternalErrorDTO.trace)
}
inline std::string* InternalErrorDTO::mutable_trace() {
  std::string* _s = _internal_mutable_trace();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.InternalErrorDTO.trace)
  return _s;
}
inline const std::string& InternalErrorDTO::_internal_trace() const {
  return trace_.Get();
}
inline void InternalErrorDTO::_internal_set_trace(const std::string& value) {
  
  trace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InternalErrorDTO::_internal_mutable_trace() {
  
  return trace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InternalErrorDTO::release_trace() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.InternalErrorDTO.trace)
  return trace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InternalErrorDTO::set_allocated_trace(std::string* trace) {
  if (trace != nullptr) {
    
  } else {
    
  }
  trace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.InternalErrorDTO.trace)
}

// -------------------------------------------------------------------

// NoSuchOptimizationRunDTO

// .empowerops.volition.dto.UUIDDTO run_ID = 1;
inline bool NoSuchOptimizationRunDTO::_internal_has_run_id() const {
  return this != internal_default_instance() && run_id_ != nullptr;
}
inline bool NoSuchOptimizationRunDTO::has_run_id() const {
  return _internal_has_run_id();
}
inline void NoSuchOptimizationRunDTO::clear_run_id() {
  if (GetArenaForAllocation() == nullptr && run_id_ != nullptr) {
    delete run_id_;
  }
  run_id_ = nullptr;
}
inline const ::empowerops::volition::dto::UUIDDTO& NoSuchOptimizationRunDTO::_internal_run_id() const {
  const ::empowerops::volition::dto::UUIDDTO* p = run_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::empowerops::volition::dto::UUIDDTO&>(
      ::empowerops::volition::dto::_UUIDDTO_default_instance_);
}
inline const ::empowerops::volition::dto::UUIDDTO& NoSuchOptimizationRunDTO::run_id() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.NoSuchOptimizationRunDTO.run_ID)
  return _internal_run_id();
}
inline void NoSuchOptimizationRunDTO::unsafe_arena_set_allocated_run_id(
    ::empowerops::volition::dto::UUIDDTO* run_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_id_);
  }
  run_id_ = run_id;
  if (run_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:empowerops.volition.dto.NoSuchOptimizationRunDTO.run_ID)
}
inline ::empowerops::volition::dto::UUIDDTO* NoSuchOptimizationRunDTO::release_run_id() {
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* NoSuchOptimizationRunDTO::unsafe_arena_release_run_id() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.NoSuchOptimizationRunDTO.run_ID)
  
  ::empowerops::volition::dto::UUIDDTO* temp = run_id_;
  run_id_ = nullptr;
  return temp;
}
inline ::empowerops::volition::dto::UUIDDTO* NoSuchOptimizationRunDTO::_internal_mutable_run_id() {
  
  if (run_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::empowerops::volition::dto::UUIDDTO>(GetArenaForAllocation());
    run_id_ = p;
  }
  return run_id_;
}
inline ::empowerops::volition::dto::UUIDDTO* NoSuchOptimizationRunDTO::mutable_run_id() {
  ::empowerops::volition::dto::UUIDDTO* _msg = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.NoSuchOptimizationRunDTO.run_ID)
  return _msg;
}
inline void NoSuchOptimizationRunDTO::set_allocated_run_id(::empowerops::volition::dto::UUIDDTO* run_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_id_;
  }
  if (run_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::empowerops::volition::dto::UUIDDTO>::GetOwningArena(run_id);
    if (message_arena != submessage_arena) {
      run_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_id, submessage_arena);
    }
    
  } else {
    
  }
  run_id_ = run_id;
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.NoSuchOptimizationRunDTO.run_ID)
}

// -------------------------------------------------------------------

// VariableNameDTO

// string value = 1;
inline void VariableNameDTO::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& VariableNameDTO::value() const {
  // @@protoc_insertion_point(field_get:empowerops.volition.dto.VariableNameDTO.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableNameDTO::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:empowerops.volition.dto.VariableNameDTO.value)
}
inline std::string* VariableNameDTO::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:empowerops.volition.dto.VariableNameDTO.value)
  return _s;
}
inline const std::string& VariableNameDTO::_internal_value() const {
  return value_.Get();
}
inline void VariableNameDTO::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableNameDTO::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableNameDTO::release_value() {
  // @@protoc_insertion_point(field_release:empowerops.volition.dto.VariableNameDTO.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VariableNameDTO::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:empowerops.volition.dto.VariableNameDTO.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dto
}  // namespace volition
}  // namespace empowerops

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg>() {
  return ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_BackupTimimg_descriptor();
}
template <> struct is_proto_enum< ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy>() {
  return ::empowerops::volition::dto::ExternalSimulationExecConfigurationDTO_ExecStrategy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_optimizer_2eproto
